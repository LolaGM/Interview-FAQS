{
  "users": [
    {
      "id": 1,
      "name": "Jesús Villalón",
      "password": "12345678",
      "confirmPassword": "12345678",
      "email": "jesus@google.com"
    },
    {
      "name": "lola",
      "email": "lola@google.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 2
    },
    {
      "name": "david",
      "email": "dagalisteo@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 3
    },
    {
      "name": "dani",
      "email": "dani@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 4
    },
    {
      "name": "María",
      "email": "maria@google.com",
      "password": "87654321",
      "confirmPassword": "87654321",
      "id": 5
    },
    {
      "name": "Manolito",
      "email": "manolito@google.com",
      "password": "manolito",
      "confirmPassword": "manolito",
      "id": 6
    }
  ],
  "userFavs": [],
  "questions": [
    {
      "id": 1,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que son los componentes de Angular",
      "answer": "Los componentes son los bloques de construcción más básicos para crear la interfaz de usuario de una aplicación de Angular. Estos componentes forman una especie de árbol en la aplicación y siempre tienen una plantilla (o template) con la que podemos formar la vista de nuestra aplicacion."
    },
    {
      "id": 2,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que es una plantilla?",
      "answer": "Una plantilla o template es una vista Html donde puedes mostrar datos al conectar sus elementos con las propiedades o métodos de un componente Angular."
    },
    {
      "id": 3,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 4,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 5,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 6,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 7,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 8,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 9,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 10,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 11,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 12,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 13,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 14,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 15,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 16,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 17,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 18,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 19,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 20,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 21,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre una etiqueta Html y un elemento Html?",
      "answer": "Una etiqueta Html es un marcador que define el inicio o el final de un elemento en un documento Html, mientras que un elemento Html es un conjunto completo que consta de una etiqueta de inicio, contenido y una etiqueta de cierre (si es necesario)."
    },
    {
      "id": 22,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es un atributo en Html y cómo se utiliza?",
      "answer": "Un atributo en Html proporciona información adicional sobre un elemento y se especifica dentro de la etiqueta de inicio. Por ejemplo, en <img src='imagen.jpg'>, 'src' es un atributo que especifica la fuente de la imagen."
    },
    {
      "id": 23,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla DOCTYPE en Html y cuál es su propósito?",
      "answer": "DOCTYPE significa Document Type Declaration. Se utiliza para especificar la versión de Html que se está utilizando en el documento y asegura que el navegador interprete la página correctamente."
    },
    {
      "id": 24,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea una lista desordenada en Html?",
      "answer": "Una lista desordenada se crea utilizando la etiqueta <ul>, y los elementos de la lista se especifican con la etiqueta <li> dentro de <ul>."
    },
    {
      "id": 25,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una entidad Html y cuál es su uso?",
      "answer": "Una entidad Html es una secuencia de caracteres predefinida que representa un carácter especial en Html, como '&lt;' para '<' y '&amp;' para '&'. Se utilizan para evitar conflictos con la sintaxis Html."
    },
    {
      "id": 26,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es un enlace relativo en Html y cómo se diferencia de un enlace absoluto?",
      "answer": "Un enlace relativo en Html especifica la ubicación de un recurso en relación con la ubicación actual del documento, mientras que un enlace absoluto proporciona una URL completa. Los enlaces relativos son útiles cuando se trabaja en un sitio web local o se desea flexibilidad en las rutas de archivo."
    },
    {
      "id": 27,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cómo se crea una tabla con bordes visibles en Html?",
      "answer": "Para crear una tabla con bordes visibles en Html, puedes agregar el atributo 'border' a la etiqueta <table> y establecerlo en un valor mayor que cero, por ejemplo, <table border='1'>."
    },
    {
      "id": 28,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es un formulario Html y cuál es su propósito?",
      "answer": "Un formulario Html es un conjunto de elementos que permiten a los usuarios ingresar datos y enviarlos a un servidor web. Se utiliza para interactuar con los usuarios y recopilar información."
    },
    {
      "id": 29,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es la etiqueta de encabezado más importante en Html y por qué?",
      "answer": "La etiqueta de encabezado más importante es <h1>. Es importante porque define el encabezado principal de la página y tiene un gran impacto en la optimización para motores de búsqueda (SEO) y la estructura del contenido."
    },
    {
      "id": 30,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es la validación en Html y por qué es importante?",
      "answer": "La validación en Html se refiere a asegurarse de que el código Html cumple con los estándares definidos por el W3C. Es importante porque ayuda a garantizar la consistencia y la compatibilidad entre navegadores, lo que mejora la calidad de la página web."
    },
    {
      "id": 31,
      "category": "Html",
      "level": "Senior",
      "question": "¿Qué son las etiquetas de encabezado en Html y cuál es su jerarquía?",
      "answer": "Las etiquetas de encabezado en Html, como <h1>, <h2>, ..., <h6>, se utilizan para definir la estructura jerárquica del contenido de la página. <h1> es el encabezado principal y <h6> el menos importante."
    },
    {
      "id": 32,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre Html y XHtml?",
      "answer": "XHtml es una versión más estricta y XML-compatible de Html. Requiere que el código esté bien formado y se adhiera a reglas más estrictas de sintaxis. Html es más flexible en términos de estructura y validación."
    },
    {
      "id": 33,
      "category": "Html",
      "level": "Senior",
      "question": "¿Qué son las hojas de estilo en cascada (CSS) y cómo se relacionan con Html?",
      "answer": "Las hojas de estilo en cascada (CSS) se utilizan para aplicar estilos y diseños a elementos Html. Permiten separar la estructura del contenido (Html) de su presentación visual, lo que facilita la gestión y el mantenimiento del diseño de un sitio web."
    },
    {
      "id": 34,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es la función de la etiqueta <iframe> en Html?",
      "answer": "La etiqueta <iframe> se utiliza para incrustar contenido de otra página web dentro de la página actual. Puede ser útil para mostrar mapas, videos u otros elementos externos."
    },
    {
      "id": 35,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre una etiqueta Html y un elemento Html?",
      "answer": "Una etiqueta Html es un marcador que define el inicio o el final de un elemento en un"
    },
    {
      "id": 36,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es un atributo en Html y cómo se utiliza?",
      "answer": "Un atributo en Html proporciona información adicional sobre un elemento y se especifica dentro de la etiqueta de inicio. Por ejemplo, en <img src='imagen.jpg'>, 'src' es un atributo que especifica la fuente de la imagen."
    },
    {
      "id": 37,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla DOCTYPE en Html y cuál es su propósito?",
      "answer": "DOCTYPE significa Document Type Declaration. Se utiliza para especificar la versión de Html que se está utilizando en el documento y asegura que el navegador interprete la página correctamente."
    },
    {
      "id": 38,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea una lista desordenada en Html?",
      "answer": "Una lista desordenada se crea utilizando la etiqueta <ul>, y los elementos de la lista se especifican con la etiqueta <li> dentro de <ul>."
    },
    {
      "id": 39,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una entidad Html y cuál es su uso?",
      "answer": "Una entidad Html es una secuencia de caracteres predefinida que representa un carácter especial en Html, como '&lt;' para '<' y '&amp;' para '&'. Se utilizan para evitar conflictos con la sintaxis Html."
    },
    {
      "id": 40,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una etiqueta de anclaje en Html y cómo se utiliza?",
      "answer": "Una etiqueta de anclaje, <a>, se utiliza para crear hipervínculos a otras páginas web o recursos. Se especifica el destino del enlace mediante el atributo 'href'. Por ejemplo, <a href='https://www.ejemplo.com'>Enlace a Ejemplo</a>."
    },
    {
      "id": 41,
      "category": "Css",
      "level": "Junior",
      "question": "Explique en qué se diferencia un selector de clase de CSS de un selector id",
      "answer": "Un selector de clase en CSS se denota con un punto (por ejemplo, '.mi-clase') y puede aplicarse a múltiples elementos en tu Html. Múltiples elementos pueden compartir la misma clase y tener estilos similares. Un selector de ID en CSS se denota con un símbolo de almohadilla o numeral (por ejemplo, '#mi-id') y debe ser único en todo tu documento Html. Solo un elemento puede tener un ID específico, y se utiliza cuando deseas aplicar estilos o manipular ese elemento en particular."
    },
    {
      "id": 42,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre las posiciones relative, fixed, absolute y static para un elemento dado?",
      "answer": "Estas posiciones afectan cómo se ubica un elemento en relación con su posición inicial y otros elementos. Static (Estático):Valor predeterminado para todos los elementos Html. Los elementos se muestran en el orden en que aparecen en el flujo normal del documento. No se ven afectados por las propiedades top, right, bottom o left. No se pueden superponer a otros elementos ni ajustar su posición en relación con otros elementos. Relative (Relativo):Los elementos se desplazan en relación con su posición normal. Puedes usar las propiedades top, right, bottom o left para mover el elemento desde su posición original. El espacio ocupado por el elemento en su posición original se mantiene, lo que significa que otros elementos no se ven afectados por su movimiento. Absolute (Absoluto): Los elementos se posicionan en relación con el ancestro más cercano que tenga una posición relativa, absoluta o fija. Los elementos absolutos se eliminan del flujo normal del documento, por lo que no ocupan espacio en el diseño original. Puedes usar top, right, bottom o left para ajustar su posición en relación con el ancestro posicionado. Si no hay un ancestro posicionado, se posicionan en relación con el documento Html.Fixed (Fijo): Los elementos se posicionan de forma fija en relación con la ventana gráfica del navegador, por lo que permanecen en la misma posición incluso si se desplaza la página. Se usan las propiedades top, right, bottom o left para definir su posición en relación con la ventana gráfica. No afectan ni se ven afectados por otros elementos en el documento."
    },
    {
      "id": 43,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 44,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 45,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 46,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 47,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 48,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 49,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 50,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 51,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 52,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 53,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 54,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 55,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 56,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 57,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 58,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 59,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 60,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 61,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre undefined y null?",
      "answer": "undefined representa una variable que no ha sido declarada o a la que no se le ha asignado un valor, mientras que null representa un valor intencionadamente vacío o ausente."
    },
    {
      "id": 62,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es el scope en JavaScript?",
      "answer": "El scope en JavaScript se refiere al alcance o contexto en el que una variable o función es accesible dentro del código. Puede ser global o local, y determina dónde una variable o función puede ser utilizada dentro de un programa."
    },
    {
      "id": 63,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 64,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 65,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 66,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 67,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 68,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 69,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 70,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 71,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 72,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 73,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 74,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 75,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 76,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 77,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 78,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 79,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 80,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 81,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es TypeScript y cómo se relaciona con JavaScript?",
      "answer": "TypeScript es un lenguaje de programación desarrollado por Microsoft que se basa en JavaScript. Se compila a JavaScript y agrega tipos estáticos opcionales, lo que mejora la robustez y la calidad del código JavaScript."
    },
    {
      "id": 82,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la extensión de archivo típica para los archivos TypeScript?",
      "answer": "La extensión de archivo típica para los archivos TypeScript es .ts"
    },
    {
      "id": 83,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son las interfaces en TypeScript y para qué se utiliza?",
      "answer": "Las interfaces en TypeScript son estructuras que definen la forma de un objeto, incluyendo sus propiedades,tipos y métodos, pero no su implementación. Se definen usando la palabra clave interface. Por ejemplo: interface Persona { nombre: string; edad: number; }. Con esto se garantiza que los objetos cumplan con ciertas propiedades y métodos"
    },
    {
      "id": 84,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Por qué TypeScript es útil en el desarrollo web y cuáles son sus ventajas clave?",
      "answer": "TypeScript es útil porque mejora la seguridad y la calidad del código JavaScript al agregar tipos estáticos. Esto facilita la detección temprana de errores y proporciona herramientas de desarrollo más sólidas."
    },
    {
      "id": 85,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es el propósito de las enumeraciones (enums) en TypeScript y cómo se declaran?",
      "answer": "Las enumeraciones en TypeScript permiten definir un conjunto de valores con nombres descriptivos. Se declaran usando enum. Por ejemplo: enum DíasSemana { Lunes, Martes, Miércoles, ... }"
    },
    {
      "id": 86,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es un tipo de dato en TypeScript?",
      "answer": "Un tipo de dato en TypeScript define el tipo de valor que puede contener una variable, como números, cadenas, objetos, etc."
    },
    {
      "id": 87,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre interface y type en TypeScript?",
      "answer": "Ambos se utilizan para definir estructuras de datos, pero interface se utiliza principalmente para definir contratos para objetos, mientras que type es más versátil y se puede usar para definir tipos de datos complejos."
    },
    {
      "id": 88,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la herencia en TypeScript y cómo se implementa?",
      "answer": "La herencia en TypeScript permite que una clase herede propiedades y métodos de otra clase. Se implementa usando la palabra clave extends, por ejemplo: class ClaseHija extends ClasePadre { } "
    },
    {
      "id": 89,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la inferencia de tipos en TypeScript y cómo se utiliza?",
      "answer": "La inferencia de tipos es la capacidad de TypeScript para deducir automáticamente el tipo de una variable según su valor. No es necesario especificar el tipo explícitamente, TypeScript lo infiere automáticamente."
    },
    {
      "id": 90,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los decoradores en TypeScript y cuál es su propósito en Angular?",
      "answer": "Los decoradores son funciones que se utilizan para modificar clases, métodos o propiedades en TypeScript. En Angular, se usan para agregar metadatos a clases y componentes, lo que permite que Angular realice tareas como inyección de dependencias y enrutamiento."
    },
    {
      "id": 91,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los genéricos en TypeScript y cómo se utilizan?",
      "answer": "Los genéricos permiten escribir funciones y clases que funcionen con diferentes tipos de datos sin perder la información de tipo. Se definen utilizando parámetros de tipo, por ejemplo: function ejemplo<T>(valor: T): T { return valor; }"
    },
    {
      "id": 92,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los tipos de unión (union types) en TypeScript y cómo se declaran?",
      "answer": "Los tipos de unión permiten declarar una variable que puede tener varios tipos posibles. Se declaran usando el símbolo | entre los tipos, por ejemplo: let variable: string | number; "
    },
    {
      "id": 93,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es un transpilador en TypeScript y cuál es su función?",
      "answer": "Es una herramienta que convierte código TypeScript en código JavaScript, lo que permite que los navegadores y entornos de ejecución de JavaScript lo comprendan y ejecuten.Un ejemplo de transpilador en TypeScript es el propio compilador de TypeScript, que se llama tsc (TypeScript Compiler). "
    },
    {
      "id": 94,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los módulos en TypeScript y cuál es su ventaja?",
      "answer": "Los módulos en TypeScript permiten organizar el código en archivos separados y reutilizables. Esto ayuda a mantener el código ordenado, modular y facilita la colaboración en proyectos grandes."
    },
    {
      "id": 95,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre any y unknown en TypeScript?",
      "answer": "ANY permite cualquier tipo de valor, mientras que UNKNOWN representa un tipo desconocido y es más seguro de usar que any."
    },
    {
      "id": 96,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cómo se declara una variable con un tipo específico en TypeScript?",
      "answer": "Se puede declarar una variable con un tipo específico utilizando la notación de dos puntos después del nombre de la variable, por ejemplo, let miVariable: number = 5;"
    },
    {
      "id": 97,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es el sistema de módulos en TypeScript y cuáles son los dos formatos de módulos admitidos?",
      "answer": "El sistema de módulos en TypeScript permite organizar el código en unidades separadas y reutilizables. Los dos formatos de módulos admitidos son CommonJS y ES6 (ECMAScript 2015)."
    },
    {
      "id": 98,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué es un namespace (espacio de nombres) en TypeScript y para qué se utiliza?",
      "answer": "Es una forma de agrupar y organizar código en un ámbito separado para evitar conflictos de nombres. Se utiliza para estructurar grandes aplicaciones y evitar la contaminación del espacio global."
    },
    {
      "id": 99,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué son los tipos condicionales (conditional types) en TypeScript?",
      "answer": "Los tipos condicionales son tipos que se basan en condiciones lógicas para determinar su forma. Se utilizan para crear tipos que dependen de otros tipos, como T extends U ? X : Y."
    },
    {
      "id": 100,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Cuál es el propósito de los archivos de declaración (declaration files) en TypeScript y cómo se nombran?",
      "answer": "Los archivos de declaración se utilizan para proporcionar información de tipo para bibliotecas escritas en JavaScript. Se nombran con la extensión .d.ts y deben coincidir con el nombre del archivo JavaScript correspondiente."
    }
  ]
}
