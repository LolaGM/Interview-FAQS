{
  "users": [
    {
      "id": 1,
      "name": "Jesús",
      "password": "12345678",
      "confirmPassword": "12345678",
      "email": "jesus@google.com",
      "favoriteQuestions": []
    },
    {
      "name": "Lola",
      "email": "lola@google.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 2,
      "favoriteQuestions": []
    },
    {
      "name": "david",
      "email": "dagalisteo@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 3,
      "favoriteQuestions": []
    },
    {
      "name": "dani",
      "email": "dani@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 4,
      "favoriteQuestions": []
    },
    {
      "name": "María",
      "email": "maria@google.com",
      "password": "87654321",
      "confirmPassword": "87654321",
      "id": 5,
      "favoriteQuestions": []
    },
    {
      "name": "Manolito",
      "email": "manolito@google.com",
      "password": "manolito",
      "confirmPassword": "manolito",
      "id": 6,
      "favoriteQuestions": []
    }
  ],
  "questions": [
    {
      "id": 1,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que son los componentes de Angular?",
      "answer": "Los componentes son los bloques de construcción más básicos para crear la interfaz de usuario de una aplicación de Angular. Estos componentes forman una especie de árbol en la aplicación y siempre tienen una plantilla (o template) con la que podemos formar la vista de nuestra aplicacion.",
      "correctAnswer": "b) Bloques de construcción más básicos para la interfaz de usuario de una aplicación Angular.",
      "allAnswers": [

          "a) Elementos para representar datos en Angular.",
          "b) Bloques de construcción más básicos para la interfaz de usuario de una aplicación Angular.",
          "c) Módulos de enrutamiento en Angular.",
          "d) Bibliotecas de terceros para mejorar el rendimiento de Angular."
      ]
    },
    {
      "id": 2,
      "category": "Angular",
      "level": "Junior",
      "question": "Indica al menos 3 formas en las que puedan comunicarse los componentes en Angular",
      "answer": "Binding (vinculación de entrada INPUT y vinculación de salida OUTPUT), Servicios (servicios compartidos inyectado en componentes), Router y rutas anidadas (Los datos pueden transmitirse a través de la URL),LocalStorage y SessionStorage (para la comunicación persistente entre sesiones o pestañas del navegador),Navegación con parámetros de ruta (a través de los parámetros de ruta en la URL cuando se navega entre diferentes vistas de la aplicación),Inyección de Dependencia (DI - Dependency Injection),  Directivas personalizadas...",
      "correctAnswer": "d) Servicios (servicios compartidos inyectados en componentes), Router y rutas anidadas (Los datos pueden transmitirse a través de la URL), Inyección de Dependencia (DI - Dependency Injection)",
      "allAnswers": [
        "a) Binding (vinculación de entrada INPUT y vinculación de salida OUTPUT)",
        "b) LocalStorage y SessionStorage (para la comunicación persistente entre sesiones o pestañas del navegador)",
        "c) Navegación con parámetros de ruta (a través de los parámetros de ruta en la URL cuando se navega entre diferentes vistas de la aplicación)",
        "d) Servicios (servicios compartidos inyectados en componentes), Router y rutas anidadas (Los datos pueden transmitirse a través de la URL), Inyección de Dependencia (DI - Dependency Injection)"
      ]
    },
    {
      "id": 3,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que es una plantilla?",
      "answer": "Una plantilla o template es una vista Html donde puedes mostrar datos al conectar sus elementos con las propiedades o métodos de un componente Angular.",
      "correctAnswer": "c) Una plantilla o template es una vista HTML donde puedes mostrar datos al conectar sus elementos con las propiedades o métodos de un componente Angular.",
      "allAnswers": [
        "a) Es una hoja de estilo CSS utilizada en Angular.",
        "b) Es un archivo JavaScript que define la lógica de un componente Angular.",
        "c) Una plantilla o template es una vista HTML donde puedes mostrar datos al conectar sus elementos con las propiedades o métodos de un componente Angular.",
        "d) Es un archivo JSON utilizado para almacenar datos en una aplicación Angular."
      ]
    },
    {
      "id": 4,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es el Data Binding o vinculación de datos?",
      "answer": "Es un concepto clave en Angular y permite definir la comunicación entre un componente y el DOM, lo que hace que sea muy fácil definir aplicaciones interactivas sin preocuparse por enviar y extraer datos",
      "correctAnswer": "d) Un concepto clave en Angular que permite definir la comunicación entre un componente y el DOM, facilitando la creación de aplicaciones interactivas.",
      "allAnswers": [
        "a) Una técnica para compilar el código fuente de Angular.",
        "b) Una biblioteca de gráficos en Angular.",
        "c) Un lenguaje de programación para Angular.",
        "d) Un concepto clave en Angular que permite definir la comunicación entre un componente y el DOM, facilitando la creación de aplicaciones interactivas."
      ]
    },
    {
      "id": 5,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es Angular CLI y para qué se usa?",
      "answer": "Es una interfaz de línea de comandos (Command Line Interface) para desarrollar y crear aplicaciones angulares utilizando módulos de estilo nodejs (commonJs). Se instala usando el siguiente comando: npm install @angular/cli@latest",
      "correctAnswer": "b) Una interfaz de línea de comandos (Command Line Interface) para desarrollar y crear aplicaciones Angular utilizando módulos de estilo nodejs (commonJs).",
      "allAnswers": [
        "a) Una interfaz gráfica de usuario para Angular.",
        "b) Una interfaz de línea de comandos (Command Line Interface) para desarrollar y crear aplicaciones Angular utilizando módulos de estilo nodejs (commonJs).",
        "c) Un servicio web para compilar aplicaciones Angular.",
        "d) Un editor de texto para programadores."
      ]
    },
    {
      "id": 6,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es la inyección de dependencia en Angular?",
      "answer": "Es un patrón de diseño de aplicaciones importante en el que una clase solicita dependencias de fuentes externas en lugar de crearlas ella misma. Angular viene con su propio marco de inyección de dependencias para resolver dependencias (servicios u objetos que una clase necesita para realizar su función), por lo que puede hacer que sus servicios dependan de otros servicios en toda su aplicación",
      "correctAnswer": "b) Un patrón de diseño de aplicaciones importante en el que una clase solicita dependencias de fuentes externas en lugar de crearlas ella misma.",
      "allAnswers": [
        "a) Un enfoque para compilar aplicaciones Angular.",
        "b) Un patrón de diseño de aplicaciones importante en el que una clase solicita dependencias de fuentes externas en lugar de crearlas ella misma.",
        "c) Una biblioteca de gráficos en Angular.",
        "d) Una técnica para modificar la apariencia de elementos HTML."
      ]
    },
    {
      "id": 7,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué son las directivas? Tipos de directivas en Angular",
      "answer": "En Angular, las directivas son marcadores en el DOM (Documento de Objetos del Modelo) que le indican al framework qué hacer con un elemento del DOM o cómo debe comportarse (se usan para agregar funcionalidad adicional a los elementos HTML o modificar su comportamiento). Existen ESTRUCTURALES que modifican la estructura del DOM al agregar o eliminar elementos del mismo (ngIf, ngFor y ngSwitch), las de ATRIBUTO (ngModel,ngClass, ngStyle, ngFor) y las de COMPONENTE que se refieren al uso de componentes personalizados como directivas en la construcción de la interfaz de usuario.",
      "correctAnswer": "d) En Angular, las directivas son marcadores en el DOM que indican al framework qué hacer con un elemento del DOM o cómo debe comportarse; existen ESTRUCTURALES, de ATRIBUTO y de COMPONENTE.",
      "allAnswers": [
        "a) Son funciones de Angular para compilar el código HTML.",
        "b) Son herramientas para la gestión de rutas en una aplicación Angular.",
        "c) Son bloques de construcción básicos en el desarrollo web.",
        "d) En Angular, las directivas son marcadores en el DOM que indican al framework qué hacer con un elemento del DOM o cómo debe comportarse; existen ESTRUCTURALES, de ATRIBUTO y de COMPONENTE."
      ]
    },
    {
      "id": 8,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué son los formularios reactivos? Explica FormBuilder",
      "answer": "Estos formularios se basan en programación reactiva y permiten un mayor control y flexibilidad en la manipulación y validación de datos de entrada del usuario.Son un enfoque basado en modelos para crear formularios en un estilo reactivo (las entradas del formulario cambian con el tiempo). Estos se construyen alrededor de flujos observables, donde las entradas de formularios y los valores se proporcionan como flujos de valores de entrada.Los formularios reactivos son especialmente útiles cuando necesitas gestionar formularios complejos con reglas de validación personalizadas, dependencias entre campos o cuando deseas tener un control más preciso sobre la manipulación de datos de entrada en tiempo real. También facilitan las pruebas unitarias de la lógica del formulario, ya que puedes simular fácilmente eventos y cambios en los campos.FormBuilder es una utilidad proporcionada por Angular que simplifica la creación de formularios reactivos al proporcionar métodos para crear instancias de FormGroup y FormControl de manera más sencilla y legible.",
      "correctAnswer": "a) Son formularios basados en programación reactiva que permiten un mayor control y flexibilidad en la manipulación y validación de datos de entrada del usuario.",
      "allAnswers": [
        "a) Son formularios basados en programación reactiva que permiten un mayor control y flexibilidad en la manipulación y validación de datos de entrada del usuario.",
        "b) Son formularios creados utilizando flujos observables para gestionar eventos de usuario.",
        "c) Son formularios diseñados para aplicaciones en tiempo real.",
        "d) Son formularios que simplifican la creación de flujos observables para gestionar eventos de usuario."
      ]
    },
    {
      "id": 9,
      "category": "Angular",
      "level": "Junior",
      "question": "Lazy loading: ¿qué es?",
      "answer": "La carga diferida es uno de los conceptos más útiles de Angular Routing. Nos ayuda a descargar las páginas web en trozos en lugar de descargar todo en un paquete grande. Se utiliza para la carga diferida al cargar de forma asincrónica el módulo de funciones para el enrutamiento cuando sea necesario usando la propiedad loadChildren",
      "correctAnswer": "d) La carga diferida es uno de los conceptos más útiles de Angular Routing que ayuda a descargar las páginas web en trozos cuando sea necesario.",
      "allAnswers": [
        "a) Una técnica para cargar páginas web de manera síncrona y completa.",
        "b) La carga de todas las páginas de una aplicación Angular de una vez.",
        "c) La carga diferida es un concepto clave en la administración de bases de datos.",
        "d) La carga diferida es uno de los conceptos más útiles de Angular Routing que ayuda a descargar las páginas web en trozos cuando sea necesario."
      ]
    },
    {
      "id": 10,
      "category": "Angular",
      "level": "Junior",
      "question": "Pipes.¿Qué son en Angular?",
      "answer": "Las tuberías o canalizaciones llamadas pipes en Angular son funciones simples que utilizan expresiones de plantilla para aceptar datos como entrada y transformarlos en la salida deseada en la interfaz de usuario. Son una característica esencial para la presentación de datos en Angular y se utilizan para realizar tareas comunes de formateo, filtrado y transformación de datos de manera declarativa en las plantillas. Ejemplo: ({{ userName | uppercase}})",
      "correctAnswer": "d) Las tuberías o canalizaciones llamadas pipes en Angular son funciones simples que utilizan expresiones de plantilla para aceptar datos como entrada y transformarlos en la salida deseada en la interfaz de usuario.",
      "allAnswers": [
        "a) Son conductos para transmitir datos en Angular.",
        "b) Son una característica para crear bases de datos en Angular.",
        "c) Son funciones avanzadas de manipulación de archivos en Angular.",
        "d) Las tuberías o canalizaciones llamadas pipes en Angular son funciones simples que utilizan expresiones de plantilla para aceptar datos como entrada y transformarlos en la salida deseada en la interfaz de usuario."
      ]
    },
    {
      "id": 11,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la interpolación?",
      "answer": "Es una técnica que se utiliza en las plantillas para mostrar dinámicamente valores de variables y expresiones en la interfaz de usuario. Permite incrustar valores de variables y expresiones directamente en el contenido HTML de una plantilla. La interpolación se realiza mediante la sintaxis de doble llave {{ }} y es una de las formas más simples y comunes de vincular datos en Angular. El texto entre llaves suele ser el nombre de una propiedad de componente. Angular reemplaza ese nombre con el valor de cadena de la propiedad del componente correspondiente.",
      "correctAnswer": "b) La interpolación es una técnica que se utiliza en las plantillas para mostrar dinámicamente valores de variables y expresiones en la interfaz de usuario.",
      "allAnswers": [
        "a) Un patrón de diseño para la administración de bases de datos en Angular.",
        "b) La interpolación es una técnica que se utiliza en las plantillas para mostrar dinámicamente valores de variables y expresiones en la interfaz de usuario.",
        "c) Un tipo de animación en Angular.",
        "d) Una técnica para cargar módulos en Angular."
      ]
    },
    {
      "id": 12,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué son los Observables?¿Cómo se crean?",
      "answer": "Son una parte fundamental de la programación reactiva y se utilizan en Angular (y en otros contextos) para manejar secuencias de eventos asíncronos y streams de datos. Los observables permiten la gestión de flujos de datos en tiempo real, lo que es especialmente útil en aplicaciones web para manejar eventos, solicitudes HTTP, actualizaciones en tiempo real y otras operaciones asíncronas.  Angular proporciona una implementación de observables basada en la biblioteca RxJS, que es una de las bibliotecas más populares para la programación reactiva en JavaScript. 1- Crearlo desde cero con OBSERVABLE y el método NEXT. 2- A partir de una promesa usando FROM. 3- Con el método FROMEVENT creamos observable que emite eventos del DOM. 4- Con INTERVAL creamos observables que emite valores en intervalos de tiempo.",
      "correctAnswer": "c) Son una parte fundamental de la programación reactiva y se utilizan en Angular para manejar eventos asíncronos y streams de datos.",
      "allAnswers": [
        "a) Son una característica específica de Angular para el manejo de rutas.",
        "b) Son una forma de almacenar datos en Angular.",
        "c) Son una parte fundamental de la programación reactiva y se utilizan en Angular para manejar eventos asíncronos y streams de datos.",
        "d) Los observables son una parte fundamental de la programación reactiva y se utilizan en Angular para compilar plantillas HTML."
      ]
    },
    {
      "id": 13,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es el Http Client en Angular?",
      "answer": "Es un módulo proporcionado por Angular para realizar solicitudes HTTP a servidores o recursos externos desde una aplicación Angular. Se utiliza para interactuar con servicios web, recuperar datos JSON, realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) y más.",
      "correctAnswer": "d) El Http Client es un módulo proporcionado por Angular para realizar solicitudes HTTP a servidores o recursos externos desde una aplicación Angular.",
      "allAnswers": [
        "a) Una interfaz de usuario para la administración de servidores en Angular.",
        "b) Un editor de texto para programadores en Angular.",
        "c) Un módulo que permite la comunicación con dispositivos móviles en Angular.",
        "d) El Http Client es un módulo proporcionado por Angular para realizar solicitudes HTTP a servidores o recursos externos desde una aplicación Angular."
      ]
    },
    {
      "id": 14,
      "category": "Angular",
      "level": "Middle",
      "question": "Explica el Angular Router",
      "answer": "El enrutador de Angular es una característica clave que permite la navegación entre diferentes vistas o componentes en una aplicación web Angular de una página (SPA, por sus siglas en inglés). El enrutador de Angular proporciona una forma estructurada de definir las rutas y gestionar la navegación del usuario en la aplicación.",
      "correctAnswer": "a) El enrutador de Angular es una característica clave que permite la navegación entre diferentes vistas o componentes en una aplicación web Angular de una página (SPA, por sus siglas en inglés).",
      "allAnswers": [
        "a) El enrutador de Angular es una característica clave que permite la navegación entre diferentes vistas o componentes en una aplicación web Angular de una página (SPA, por sus siglas en inglés).",
        "b) Una función que optimiza el rendimiento de las aplicaciones en Angular.",
        "c) Una característica que permite la comunicación con bases de datos en Angular.",
        "d) Una herramienta de diseño gráfico en Angular."
      ]
    },
    {
      "id": 15,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es un módulo compartido (Shared Module) en Angular y cuál es su propósito en una aplicación?",
      "answer": "Un módulo compartido (Shared Module) en Angular es un módulo que se utiliza para agrupar y exportar componentes, directivas, pipes y otros elementos que deben ser compartidos entre diferentes partes de una aplicación. Su propósito es promover la reutilización de código y evitar la duplicación de componentes y funcionalidades comunes en toda la aplicación. Un módulo compartido puede importarse en otros módulos de la aplicación para que los componentes y recursos compartidos estén disponibles en toda la aplicación.",
      "correctAnswer": "c) Un módulo compartido (Shared Module) en Angular es un módulo que se utiliza para agrupar y exportar componentes, directivas, pipes y otros elementos que deben ser compartidos entre diferentes partes de una aplicación.",
      "allAnswers": [
        "a) Un módulo que se utiliza para almacenar contraseñas en Angular.",
        "b) Un módulo que permite la comunicación con bases de datos en Angular.",
        "c) Un módulo compartido (Shared Module) en Angular es un módulo que se utiliza para agrupar y exportar componentes, directivas, pipes y otros elementos que deben ser compartidos entre diferentes partes de una aplicación.",
        "d) Un módulo que se utiliza para la administración de servidores en Angular."
      ]
    },
    {
      "id": 16,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre el enlace de datos unidireccional y el enlace de datos bidireccional en Angular y cuándo utilizarías uno u otro?",
      "answer": "El enlace de datos unidireccional y el enlace de datos bidireccional son dos enfoques para gestionar la comunicación entre componentes y la actualización de datos en Angular. El unidireccional es generalmente preferido para mantener un flujo de datos más predecible y evitar problemas potenciales, mientras que el enlace de datos bidireccional es útil en situaciones específicas donde la comunicación bidireccional es esencial, como en formularios interactivos.",
      "correctAnswer": "a) El enlace de datos unidireccional permite la comunicación desde el componente al DOM, mientras que el enlace de datos bidireccional permite la comunicación en ambas direcciones, desde el componente al DOM y viceversa.",
      "allAnswers": [
        "a) El enlace de datos unidireccional permite la comunicación desde el componente al DOM, mientras que el enlace de datos bidireccional permite la comunicación en ambas direcciones, desde el componente al DOM y viceversa.",
        "b) El enlace de datos unidireccional es preferible en todas las situaciones, independientemente de los requisitos del proyecto.",
        "c) El enlace de datos bidireccional es siempre la mejor opción para la comunicación entre componentes en Angular.",
        "d) El enlace de datos unidireccional y el enlace de datos bidireccional son dos enfoques equivalentes y se pueden utilizar indistintamente."
      ]
    },
    {
      "id": 17,
      "category": "Angular",
      "level": "Senior",
      "question": "Signals en Angular",
      "answer": "Son espacios en memoria que apunta en todo momento dónde se está usando el elemento señalado, y actualiza su información en todo momento. Si no lo usáramos Angular debe disparar todos sus métodos de detección de cambios a lo largo de toda la aplicación.",
      "correctAnswer": "c) Son espacios en memoria que apuntan en todo momento dónde se está usando el elemento señalado, y actualizan su información en todo momento. Si no lo usáramos Angular debe disparar todos sus métodos de detección de cambios a lo largo de toda la aplicación.",
      "allAnswers": [
        "a) Elementos visuales que indican eventos en una aplicación Angular.",
        "b) Variables utilizadas para el almacenamiento de datos en Angular.",
        "c) Son espacios en memoria que apuntan en todo momento dónde se está usando el elemento señalado, y actualizan su información en todo momento. Si no lo usáramos Angular debe disparar todos sus métodos de detección de cambios a lo largo de toda la aplicación.",
        "d) Mensajes de error generados por el sistema en Angular."
      ]
    },
    {
      "id": 18,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique RXJS",
      "answer": "RxJS (Reactive Extensions for JavaScript) es una biblioteca de programación reactiva en JavaScript que se utiliza ampliamente en el desarrollo de aplicaciones Angular. Angular utiliza RxJS para manejar flujos de datos asincrónicos, como observables, y facilita la gestión de eventos, llamadas HTTP y otros flujos de datos en aplicaciones web.",
      "correctAnswer": "c) RxJS (Reactive Extensions for JavaScript) es una biblioteca de programación reactiva en JavaScript que se utiliza ampliamente en el desarrollo de aplicaciones Angular.",
      "allAnswers": [
        "a) RxJS es un lenguaje de programación utilizado en Angular para crear interfaces de usuario.",
        "b) RxJS es una herramienta para la creación de gráficos en Angular.",
        "c) RxJS (Reactive Extensions for JavaScript) es una biblioteca de programación reactiva en JavaScript que se utiliza ampliamente en el desarrollo de aplicaciones Angular.",
        "d) RxJS es un servidor web utilizado en Angular para alojar aplicaciones en línea."
      ]
    },
    {
      "id": 19,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre el enrutamiento con carga diferida (Lazy Loading) y la carga convencional de módulos en Angular?",
      "answer": "El enrutamiento con carga diferida (Lazy Loading) es una técnica que retrasa la carga de módulos de Angular hasta que se necesitan, lo que mejora significativamente el rendimiento inicial de la aplicación. En contraste, la carga convencional de módulos carga todos los módulos de la aplicación al inicio. Lazy Loading se configura en las rutas del enrutador utilizando el método loadChildren, mientras que la carga convencional se realiza mediante el método import en los módulos principales. Lazy Loading es particularmente útil en aplicaciones grandes para reducir el tiempo de carga inicial.",
      "correctAnswer": "c) Lazy Loading se configura en las rutas del enrutador utilizando el método loadChildren, mientras que la carga convencional se realiza mediante el método import en los módulos principales.",
      "allAnswers": [
        "a) El enrutamiento con carga diferida (Lazy Loading) carga todos los módulos de la aplicación al inicio, mientras que la carga convencional de módulos retrasa la carga hasta que se necesiten.",
        "b) Lazy Loading no se utiliza en Angular, en su lugar, todos los módulos se cargan al inicio de la aplicación.",
        "c) Lazy Loading se configura en las rutas del enrutador utilizando el método loadChildren, mientras que la carga convencional se realiza mediante el método import en los módulos principales.",
        "d) No hay diferencia entre Lazy Loading y la carga convencional de módulos en Angular."
      ]
    },
    {
      "id": 20,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es AOT (Ahead-of-Time) en Angular y cuáles son sus ventajas sobre JIT (Just-in-Time) en la compilación de plantillas?",
      "answer": " AOT (Ahead-of-Time) es una técnica de compilación utilizada en Angular que compila las plantillas y los componentes en código JavaScript antes de que la aplicación se ejecute en el navegador. Las ventajas de AOT sobre JIT (Just-in-Time) incluyen 1- Mejor rendimiento: La compilación AOT reduce el tiempo de inicio de la aplicación y mejora la velocidad de carga, ya que no es necesario compilar plantillas en el navegador en tiempo de ejecución. 2- Errores de plantillas en tiempo de compilación: AOT detecta errores de plantillas en tiempo de compilación, lo que permite identificar y solucionar problemas antes de que la aplicación se ejecute. 3- Tamaño de archivo más pequeño: AOT elimina el compilador de plantillas de la carga útil del cliente, lo que reduce el tamaño del paquete JavaScript que se envía al navegador.",
      "correctAnswer": "b) La carga diferida retrasa la carga de módulos hasta que se necesitan, mientras que la carga convencional carga todos los módulos al inicio.",
      "allAnswers": [
        "a) La carga convencional es más eficiente que la carga diferida en Angular.",
        "b) La carga diferida retrasa la carga de módulos hasta que se necesitan, mientras que la carga convencional carga todos los módulos al inicio.",
        "c) La carga diferida y la carga convencional son técnicas idénticas en Angular.",
        "d) La carga convencional se configura en las rutas del enrutador utilizando el método loadChildren."
      ]
    },
    {
      "id": 21,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Cuál es el propósito del servicio en Angular?",
      "answer": "En Angular, un servicio es una clase que se utiliza para organizar y compartir la lógica y los datos comunes entre diferentes componentes. Los servicios se utilizan para separar la lógica de negocio de los componentes y permiten la reutilización de código en toda la aplicación.",
      "correctAnswer": "d) Los servicios en Angular se utilizan para organizar y compartir la lógica y los datos comunes entre diferentes componentes y permiten la reutilización de código en toda la aplicación.",
      "allAnswers": [
        "a) Los servicios en Angular solo se utilizan para definir la interfaz de usuario.",
        "b) Los servicios en Angular se utilizan para encapsular componentes individuales.",
        "c) Los servicios en Angular son exclusivamente para manejar la interfaz de usuario de la aplicación.",
        "d) Los servicios en Angular se utilizan para organizar y compartir la lógica y los datos comunes entre diferentes componentes y permiten la reutilización de código en toda la aplicación."
      ]
    },
    {
      "id": 22,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es un servicio compartido en Angular y cómo se crea?",
      "answer": "Un servicio compartido en Angular es una clase que se utiliza para compartir datos y lógica entre componentes de toda la aplicación. Se crea mediante el comando 'ng generate service' o manualmente como una clase TypeScript con el decorador '@Injectable'. Los servicios compartidos son inyectables y se registran en el módulo raíz para estar disponibles en toda la aplicación.",
      "correctAnswer": "d) Un servicio compartido en Angular es una clase que facilita el intercambio de datos y lógica entre componentes de toda la aplicación. Se crea con el comando 'ng generate service' o manualmente con el decorador '@Injectable'. Estos servicios se registran en el módulo principal para su disponibilidad en toda la aplicación.",
      "allAnswers": [
        "a) Un servicio compartido en Angular es un componente especial que solo puede usarse en el módulo raíz.",
        "b) Un servicio compartido en Angular es un componente que solo puede utilizarse en el módulo en el que se crea.",
        "c) Un servicio compartido en Angular es una característica de Angular que no permite compartir datos y lógica entre componentes.",
        "d) Un servicio compartido en Angular es una clase que facilita el intercambio de datos y lógica entre componentes de toda la aplicación. Se crea con el comando 'ng generate service' o manualmente con el decorador '@Injectable'. Estos servicios se registran en el módulo principal para su disponibilidad en toda la aplicación."
      ]
    },
    {
      "id": 23,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es Angular?",
      "answer": "Angular es un framework de desarrollo de aplicaciones web desarrollado por Google. Se utiliza para crear aplicaciones web dinámicas y de una sola página (SPA) y facilita la creación de interfaces de usuario interactivas y reactivas.",
      "correctAnswer": "c) Angular es un framework de desarrollo de aplicaciones web desarrollado por Google",
      "allAnswers": [
        "a) Angular es un lenguaje de programación",
        "b) Angular es un sistema operativo",
        "c) Angular es un framework de desarrollo de aplicaciones web desarrollado por Google",
        "d) Angular es un servicio de música en streaming"
      ]
    },
    {
      "id": 24,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Cuáles son las ventajas de usar Angular?",
      "answer": "Algunas de las ventajas de usar Angular incluyen una estructura de proyecto organizada, vinculación de datos bidireccional, inyección de dependencias, y una amplia comunidad de desarrollo que proporciona herramientas y bibliotecas adicionales.",
      "correctAnswer": "b) Vinculación de datos bidireccional,",
      "allAnswers": [
        "a) Estructura de proyecto organizada,",
        "b) Vinculación de datos bidireccional,",
        "c) Inyección de dependencias,",
        "d) Amplia comunidad de desarrollo y herramientas adicionales,"
      ]
    },
    {
      "id": 25,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es TypeScript y por qué se utiliza en Angular?",
      "answer": "TypeScript es un lenguaje de programación desarrollado por Microsoft que se utiliza en Angular porque añade tipos estáticos y otras características a JavaScript, lo que facilita la detección de errores y el desarrollo de aplicaciones más robustas.",
      "correctAnswer": "a) Un lenguaje de programación desarrollado por Microsoft que añade tipos estáticos y otras características a JavaScript,",
      "allAnswers": [
        "a) Un lenguaje de programación desarrollado por Microsoft que añade tipos estáticos y otras características a JavaScript,",
        "b) Un framework de desarrollo de aplicaciones web desarrollado por Google,",
        "c) Una base de datos no relacional utilizada en Angular,",
        "d) Un preprocesador de CSS utilizado en Angular."
      ]
    },
    {
      "id": 26,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es una directiva en Angular?",
      "answer": "En Angular, una directiva es una instrucción en el DOM (Document Object Model) que le dice al framework Angular cómo manipular el comportamiento de un elemento HTML o cambiar su apariencia.",
      "correctAnswer": "a) Una instrucción en el DOM (Document Object Model) que le dice al framework Angular cómo manipular el comportamiento de un elemento HTML o cambiar su apariencia,",
      "allAnswers": [
        "a) Una instrucción en el DOM (Document Object Model) que le dice al framework Angular cómo manipular el comportamiento de un elemento HTML o cambiar su apariencia,",
        "b) Un módulo de Angular que gestiona la lógica de enrutamiento de una aplicación,",
        "c) Una función en JavaScript utilizada para consultar bases de datos en Angular,",
        "d) Un lenguaje de marcado para la creación de interfaces gráficas en Angular."
      ]
    },
    {
      "id": 27,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Cómo se realiza la inyección de dependencias en Angular?",
      "answer": "La inyección de dependencias en Angular se realiza mediante la creación de una instancia de una clase y su inyección en el constructor de otro componente, servicio o clase que la necesite. Angular utiliza el sistema de inyección de dependencias para administrar las dependencias y proporcionarlas de manera eficiente.Podemos hacerlo mediante el constructor o usando inject()",
      "correctAnswer": "b) Mediante la creación de una instancia de una clase y su inyección en el constructor de otro componente, servicio o clase que la necesite,",
      "allAnswers": [
        "a) Al importar manualmente las dependencias en el archivo 'app.module' de Angular,",
        "b) Mediante la creación de una instancia de una clase y su inyección en el constructor de otro componente, servicio o clase que la necesite,",
        "c) Utilizando el sistema de importación de TypeScript para agregar dependencias,",
        "d) Al llamar explícitamente a las funciones de dependencia en los componentes."
      ]
    },
    {
      "id": 28,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es un módulo en Angular?",
      "answer": "Un módulo en Angular es un mecanismo para organizar la aplicación en bloques funcionales. Contiene componentes, servicios y otras características relacionadas, y se utiliza para definir cómo se ensamblan estas partes en la aplicación.",
      "correctAnswer": "b) Contiene componentes, servicios y otras características relacionadas, y se utiliza para definir cómo se ensamblan estas partes en la aplicación,",
      "allAnswers": [
        "a) Es una biblioteca de JavaScript utilizada en Angular,",
        "b) Contiene componentes, servicios y otras características relacionadas, y se utiliza para definir cómo se ensamblan estas partes en la aplicación,",
        "c) Es una extensión de TypeScript creada por Microsoft,",
        "d) Se utiliza para diseñar la interfaz de usuario en Angular."
      ]
    },
    {
      "id": 29,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre ngOnChanges y ngOnInit?",
      "answer": "ngOnChanges es un gancho de ciclo de vida en Angular que se dispara cuando las propiedades de entrada de un componente cambian. ngOnInit se dispara una vez después de que se haya inicializado el componente.",
      "correctAnswer": "c) ngOnChanges es un gancho de ciclo de vida en Angular que se dispara cuando las propiedades de entrada de un componente cambian. ngOnInit se dispara una vez después de que se haya inicializado el componente.",
      "allAnswers": [
        "a) ngOnChanges se dispara una vez después de que se haya inicializado el componente. ngOnInit se dispara cuando las propiedades de entrada cambian.",
        "b) ngOnChanges se utiliza para inicializar las propiedades de entrada de un componente, mientras que ngOnInit se dispara cuando el componente se destruye.",
        "c) ngOnChanges es un gancho de ciclo de vida en Angular que se dispara cuando las propiedades de entrada de un componente cambian. ngOnInit se dispara una vez después de que se haya inicializado el componente.",
        "d) ngOnChanges se utiliza para realizar cambios en las plantillas HTML, mientras que ngOnInit se utiliza para gestionar eventos de usuario."
      ]
    },
    {
      "id": 30,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué son las rutas en Angular?",
      "answer": "En Angular, las rutas son un mecanismo para definir la navegación y las vistas de una aplicación. Permiten que diferentes URL se correspondan con diferentes componentes y vistas.",
      "correctAnswer": "a) ngOnChanges es un gancho de ciclo de vida en Angular que se dispara cuando las propiedades de entrada de un componente cambian,",
      "allAnswers": [
        "a) ngOnChanges es un gancho de ciclo de vida en Angular que se dispara cuando las propiedades de entrada de un componente cambian,",
        "b) ngOnInit se dispara una vez después de que se haya inicializado el componente,",
        "c) ngOnChanges se utiliza para realizar solicitudes HTTP en Angular,",
        "d) ngOnInit es un método que se llama antes de que se inicie cualquier componente en Angular."
      ]
    },
    {
      "id": 31,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es un interceptor HTTP en Angular?",
      "answer": "Un interceptor HTTP en Angular es un servicio que permite interceptar y modificar las solicitudes HTTP y las respuestas antes de que lleguen al servidor o después de que vuelvan del servidor. Se utiliza para realizar tareas comunes, como agregar encabezados o manejar errores de manera centralizada.",
      "correctAnswer": "b) Un interceptor HTTP en Angular es un servicio que permite interceptar y modificar las solicitudes HTTP y las respuestas antes de que lleguen al servidor o después de que vuelvan del servidor,",
      "allAnswers": [
        "a) Un interceptor HTTP en Angular es una directiva que se aplica a elementos HTML,",
        "b) Un interceptor HTTP en Angular es un servicio que permite interceptar y modificar las solicitudes HTTP y las respuestas antes de que lleguen al servidor o después de que vuelvan del servidor,",
        "c) Un interceptor HTTP en Angular es un componente que se utiliza para crear formularios reactivos,",
        "d) Un interceptor HTTP en Angular es una característica de Angular que permite cargar módulos de manera diferida."
      ]
    },
    {
      "id": 32,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Cómo se realiza la validación de formularios en Angular?",
      "answer": "En Angular, la validación de formularios se realiza mediante la creación de directivas personalizadas y el uso de clases y métodos proporcionados por el módulo '@angular/forms'. Esto permite validar campos de entrada y formularios de manera efectiva.",
      "correctAnswer": "c) En Angular, la validación de formularios se realiza mediante la creación de directivas personalizadas y el uso de clases y métodos proporcionados por el módulo '@angular/forms'. Esto permite validar campos de entrada y formularios de manera efectiva.",
      "allAnswers": [
        "a) En Angular, la validación de formularios se realiza automáticamente y no requiere ninguna configuración adicional.",
        "b) En Angular, la validación de formularios se realiza mediante el uso de JavaScript puro sin necesidad de módulos adicionales.",
        "c) En Angular, la validación de formularios se realiza mediante la creación de directivas personalizadas y el uso de clases y métodos proporcionados por el módulo '@angular/forms'. Esto permite validar campos de entrada y formularios de manera efectiva.",
        "d) En Angular, la validación de formularios se realiza únicamente en el lado del servidor y no se puede realizar en el lado del cliente."
      ]
    },
    {
      "id": 33,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la detección de cambios en Angular?",
      "answer": "La detección de cambios en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente. Angular utiliza una estrategia de detección de cambios para mejorar el rendimiento y la eficiencia de las actualizaciones de la interfaz de usuario.",
      "correctAnswer": "b) La detección de cambios en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente.",
      "allAnswers": [
        "a) La detección de cambios en Angular es el proceso por el cual el framework verifica y actualiza los datos en el componente cuando cambia la vista.",
        "b) La detección de cambios en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente.",
        "c) La detección de cambios en Angular es el proceso por el cual el framework verifica y actualiza tanto la vista como los datos en el componente de forma independiente.",
        "d) La detección de cambios en Angular es el proceso por el cual el framework compila y ejecuta el código del componente para garantizar que la vista y los datos estén sincronizados."
      ]
    },
    {
      "id": 34,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué son las pruebas unitarias en Angular?",
      "answer": "Las pruebas unitarias en Angular son pruebas que se realizan en unidades individuales de código, como componentes o servicios, para garantizar que funcionen correctamente de manera aislada. Angular proporciona herramientas y bibliotecas para escribir y ejecutar pruebas unitarias eficaces.",
      "correctAnswer": "a) Las pruebas unitarias en Angular son pruebas que se realizan en unidades individuales de código, como componentes o servicios, para garantizar que funcionen correctamente de manera aislada.",
      "allAnswers": [
        "a) Las pruebas unitarias en Angular son pruebas que se realizan en unidades individuales de código, como componentes o servicios, para garantizar que funcionen correctamente de manera aislada.",
        "b) Las pruebas unitarias en Angular son pruebas que se realizan en la aplicación completa para garantizar su funcionalidad global.",
        "c) Las pruebas unitarias en Angular son pruebas de rendimiento para medir la velocidad de la aplicación.",
        "d) Las pruebas unitarias en Angular son pruebas manuales realizadas por usuarios finales."
      ]
    },
    {
      "id": 35,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es la optimización de rendimiento en aplicaciones Angular?",
      "answer": "La optimización de rendimiento en aplicaciones Angular implica una serie de prácticas y técnicas destinadas a mejorar la velocidad de carga, la velocidad de ejecución y la eficiencia general de una aplicación Angular. Esto incluye técnicas de carga diferida, compresión de recursos y optimización de renderizado.",
      "correctAnswer": "a) La optimización de rendimiento en aplicaciones Angular implica una serie de prácticas y técnicas destinadas a mejorar la velocidad de carga, la velocidad de ejecución y la eficiencia general de una aplicación Angular.",
      "allAnswers": [
        "a) La optimización de rendimiento en aplicaciones Angular implica una serie de prácticas y técnicas destinadas a mejorar la velocidad de carga, la velocidad de ejecución y la eficiencia general de una aplicación Angular.",
        "b) La optimización de rendimiento en aplicaciones Angular se refiere a la mejora de la interfaz de usuario sin afectar la velocidad de carga.",
        "c) La optimización de rendimiento en aplicaciones Angular se enfoca en aumentar la seguridad de la aplicación.",
        "d) La optimización de rendimiento en aplicaciones Angular solo se aplica a aplicaciones móviles."
      ]
    },
    {
      "id": 36,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la internacionalización (i18n) en Angular?",
      "answer": "La internacionalización (i18n) en Angular es el proceso de adaptar una aplicación para que sea compatible con múltiples idiomas y regiones. Angular proporciona herramientas y directivas para facilitar la traducción de textos y la adaptación de formatos de fecha, hora y números en la aplicación.",
      "correctAnswer": "c) La internacionalización (i18n) en Angular es el proceso de adaptar una aplicación para que sea compatible con múltiples idiomas y regiones. Angular proporciona herramientas y directivas para facilitar la traducción de textos y la adaptación de formatos de fecha, hora y números en la aplicación.",
      "allAnswers": [
        "a) La internacionalización (i18n) en Angular se refiere a la optimización del rendimiento de la aplicación en diferentes regiones.",
        "b) La internacionalización (i18n) en Angular se enfoca en la adaptación de la interfaz de usuario solo para un idioma.",
        "c) La internacionalización (i18n) en Angular es el proceso de adaptar una aplicación para que sea compatible con múltiples idiomas y regiones. Angular proporciona herramientas y directivas para facilitar la traducción de textos y la adaptación de formatos de fecha, hora y números en la aplicación.",
        "d) La internacionalización (i18n) en Angular se refiere a la internacionalización de empresas que utilizan esta tecnología."
      ]
    },
    {
      "id": 37,
      "category": "Angular Standalone",
      "level": "Middle",
      "question": "¿Qué es el modo Standalone en Angular y cuál es su propósito?",
      "answer": "El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular independiente de un servidor web tradicional. Su propósito es proporcionar a los desarrolladores una forma de crear aplicaciones Angular que se puedan ejecutar localmente o empaquetar como aplicaciones de escritorio sin depender de un servidor backend.",
      "correctAnswer": "b) El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular independiente de un servidor web tradicional.",
      "allAnswers": [
        "a) El modo Standalone en Angular es una característica que permite ejecutar aplicaciones web sin conexión a Internet.",
        "b) El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular independiente de un servidor web tradicional.",
        "c) El modo Standalone en Angular es una característica que solo está disponible en aplicaciones de servidor, no en aplicaciones independientes.",
        "d) El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular en un servidor dedicado."
      ]
    },
    {
      "id": 38,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Cuál es el flujo típico de un Observable en Angular y cómo funciona?",
      "answer": "Un Observable en Angular sigue un flujo típico de emisión, suscripción y manejo de eventos asíncronos. Comienza con la creación de un Observable que puede emitir datos o eventos en el futuro. Luego, se suscribe un observador para escuchar esas emisiones. Cuando ocurre un evento, el observador recibe y maneja los datos. El flujo puede incluir operaciones de transformación, filtrado o combinación de datos antes de que lleguen al observador.",
      "correctAnswer": "c) El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular independiente de un servidor web tradicional. Su propósito es proporcionar a los desarrolladores una forma de crear aplicaciones Angular que se puedan ejecutar localmente o empaquetar como aplicaciones de escritorio sin depender de un servidor backend.",
      "allAnswers": [
        "a) El modo Standalone en Angular se refiere a la ejecución de aplicaciones Angular en servidores tradicionales.",
        "b) El modo Standalone en Angular es una característica que permite la ejecución de aplicaciones Angular únicamente en servidores de nube.",
        "c) El modo Standalone en Angular es una característica que permite compilar y ejecutar una aplicación Angular independiente de un servidor web tradicional. Su propósito es proporcionar a los desarrolladores una forma de crear aplicaciones Angular que se puedan ejecutar localmente o empaquetar como aplicaciones de escritorio sin depender de un servidor backend.",
        "d) El modo Standalone en Angular se refiere a la ejecución de aplicaciones Angular únicamente en servidores frontend."
      ]
    },
    {
      "id": 39,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la detección de cambios OnPush en Angular y cuándo se debe utilizar?",
      "answer": "La detección de cambios OnPush es una estrategia de detección de cambios en Angular que se basa en cambios en las referencias de entrada y eventos de salida. Se debe utilizar cuando se desea mejorar el rendimiento de la aplicación al reducir la frecuencia de las verificaciones de cambio. Al configurar un componente con OnPush, Angular solo volverá a renderizar el componente cuando las entradas cambien o se dispare un evento de salida, en lugar de verificar continuamente las propiedades internas.",
      "correctAnswer": "c) La detección de cambios OnPush es una estrategia de detección de cambios en Angular que se basa en cambios en las referencias de entrada y eventos de salida. Se debe utilizar cuando se desea mejorar el rendimiento de la aplicación al reducir la frecuencia de las verificaciones de cambio. Al configurar un componente con OnPush, Angular solo volverá a renderizar el componente cuando las entradas cambien o se dispare un evento de salida, en lugar de verificar continuamente las propiedades internas.",
      "allAnswers": [
        "a) La detección de cambios OnPush es una estrategia de detección de cambios en Angular que se basa en cambios en las propiedades internas de un componente.",
        "b) La detección de cambios OnPush es una estrategia de detección de cambios en Angular que siempre vuelve a renderizar el componente independientemente de los cambios.",
        "c) La detección de cambios OnPush es una estrategia de detección de cambios en Angular que se basa en cambios en las referencias de entrada y eventos de salida. Se debe utilizar cuando se desea mejorar el rendimiento de la aplicación al reducir la frecuencia de las verificaciones de cambio. Al configurar un componente con OnPush, Angular solo volverá a renderizar el componente cuando las entradas cambien o se dispare un evento de salida, en lugar de verificar continuamente las propiedades internas.",
        "d) La detección de cambios OnPush es una estrategia de detección de cambios en Angular que se usa solo para componentes de nivel superior."
      ]
    },
    {
      "id": 40,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué son los efectos (Effects) en la gestión de estado de Angular (por ejemplo, con NgRx) y cuál es su propósito?",
      "answer": "Los efectos (Effects) en la gestión de estado de Angular, como NgRx, son funciones que manejan efectos secundarios en una aplicación, como llamadas a APIs o tareas asíncronas. Su propósito es aislar la lógica de efectos secundarios y garantizar que la gestión de estado sea predecible y consistente. Los efectos reciben acciones y pueden despachar nuevas acciones en función de los resultados de las tareas asíncronas.",
      "correctAnswer": "a) Los efectos (Effects) en la gestión de estado de Angular, como NgRx, son funciones que manejan efectos secundarios en una aplicación, como llamadas a APIs o tareas asíncronas. Su propósito es aislar la lógica de efectos secundarios y garantizar que la gestión de estado sea predecible y consistente. Los efectos reciben acciones y pueden despachar nuevas acciones en función de los resultados de las tareas asíncronas.",
      "allAnswers": [
        "a) Los efectos (Effects) en la gestión de estado de Angular, como NgRx, son funciones que manejan efectos secundarios en una aplicación, como llamadas a APIs o tareas asíncronas. Su propósito es aislar la lógica de efectos secundarios y garantizar que la gestión de estado sea predecible y consistente. Los efectos reciben acciones y pueden despachar nuevas acciones en función de los resultados de las tareas asíncronas.",
        "b) Los efectos (Effects) en la gestión de estado de Angular son componentes visuales en la interfaz de usuario de la aplicación.",
        "c) Los efectos (Effects) en Angular se utilizan para aplicar efectos visuales en los elementos de la interfaz de usuario.",
        "d) Los efectos (Effects) en la gestión de estado de Angular se utilizan para realizar cálculos matemáticos en los datos de la aplicación."
      ]
    },
    {
      "id": 41,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la interpolación de atributos (Attribute Interpolation) en Angular y cuándo se utiliza?",
      "answer": "La interpolación de atributos en Angular es una técnica que permite asignar valores dinámicos a atributos de elementos HTML. Se utiliza cuando se necesita cambiar dinámicamente el valor de un atributo, como un atributo de 'src' de una imagen o 'href' de un enlace, utilizando expresiones del componente.",
      "correctAnswer": "a) La interpolación de atributos en Angular es una técnica que permite asignar valores dinámicos a atributos de elementos HTML. Se utiliza cuando se necesita cambiar dinámicamente el valor de un atributo, como un atributo de 'src' de una imagen o 'href' de un enlace, utilizando expresiones del componente.",
      "allAnswers": [
        "a) La interpolación de atributos en Angular es una técnica que permite asignar valores dinámicos a atributos de elementos HTML. Se utiliza cuando se necesita cambiar dinámicamente el valor de un atributo, como un atributo de 'src' de una imagen o 'href' de un enlace, utilizando expresiones del componente.",
        "b) La interpolación de atributos en Angular se utiliza para aplicar efectos visuales en la interfaz de usuario.",
        "c) La interpolación de atributos en Angular es una técnica para declarar variables en los componentes.",
        "d) La interpolación de atributos en Angular se utiliza para gestionar rutas de navegación en la aplicación."
      ]
    },
    {
      "id": 42,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre 'ViewChild' y 'ContentChild' en Angular y cuándo se utilizan?",
      "answer": "ViewChild y ContentChild son decoradores utilizados para acceder a elementos o componentes hijos en Angular. La diferencia clave radica en dónde se busca el elemento o componente: ViewChild se utiliza para elementos o componentes que están dentro del componente actual, mientras que ContentChild se utiliza para elementos o componentes proyectados en el contenido de un componente.",
      "correctAnswer": "a) ViewChild y ContentChild son decoradores utilizados para acceder a elementos o componentes hijos en Angular. La diferencia clave radica en dónde se busca el elemento o componente: ViewChild se utiliza para elementos o componentes que están dentro del componente actual, mientras que ContentChild se utiliza para elementos o componentes proyectados en el contenido de un componente.",
      "allAnswers": [
        "a) ViewChild y ContentChild son decoradores utilizados para acceder a elementos o componentes hijos en Angular. La diferencia clave radica en dónde se busca el elemento o componente: ViewChild se utiliza para elementos o componentes que están dentro del componente actual, mientras que ContentChild se utiliza para elementos o componentes proyectados en el contenido de un componente.",
        "b) ViewChild y ContentChild son dos formas de acceder a elementos del DOM en Angular.",
        "c) ViewChild se utiliza para acceder a elementos hijos directos, mientras que ContentChild se utiliza para acceder a elementos en el contenido proyectado.",
        "d) ViewChild y ContentChild son sinónimos y se pueden utilizar indistintamente."
      ]
    },
    {
      "id": 43,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es el propósito de la detección de cambios en Angular y cómo se optimiza para aplicaciones de gran escala?",
      "answer": "La detección de cambios en Angular permite actualizar la vista cuando los datos cambian en el componente. Para aplicaciones de gran escala, la optimización se logra utilizando estrategias como ChangeDetectionStrategy.OnPush, empleando bibliotecas de administración de estado (como NgRx), y minimizando las operaciones costosas en el ciclo de detección de cambios.",
      "correctAnswer": "b) La detección de cambios en Angular permite actualizar la vista cuando los datos cambian en el componente. Para aplicaciones de gran escala, la optimización se logra utilizando estrategias como ChangeDetectionStrategy.OnPush, empleando bibliotecas de administración de estado (como NgRx), y minimizando las operaciones costosas en el ciclo de detección de cambios.",
      "allAnswers": [
        "a) La detección de cambios en Angular es un proceso automático y no se puede optimizar.",
        "b) La detección de cambios en Angular permite actualizar la vista cuando los datos cambian en el componente. Para aplicaciones de gran escala, la optimización se logra utilizando estrategias como ChangeDetectionStrategy.OnPush, empleando bibliotecas de administración de estado (como NgRx), y minimizando las operaciones costosas en el ciclo de detección de cambios.",
        "c) La detección de cambios en Angular es exclusivamente para aplicaciones pequeñas y no es adecuada para aplicaciones de gran escala.",
        "d) La detección de cambios en Angular solo se utiliza para el manejo de formularios y entradas de usuario."
      ]
    },
    {
      "id": 44,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cómo se puede mejorar el rendimiento de una aplicación Angular y cuáles son las mejores prácticas en este sentido?",
      "answer": "Para mejorar el rendimiento en Angular, se pueden aplicar técnicas como la carga diferida de módulos, la compresión de recursos, la reducción del tamaño del paquete, el uso de ChangeDetectionStrategy.OnPush, la optimización de imágenes y la implementación de estrategias de almacenamiento en caché.",
      "correctAnswer": "a) Para mejorar el rendimiento en Angular, se pueden aplicar técnicas como la carga diferida de módulos, la compresión de recursos, la reducción del tamaño del paquete, el uso de ChangeDetectionStrategy.OnPush, la optimización de imágenes y la implementación de estrategias de almacenamiento en caché.",
      "allAnswers": [
        "a) Para mejorar el rendimiento en Angular, se pueden aplicar técnicas como la carga diferida de módulos, la compresión de recursos, la reducción del tamaño del paquete, el uso de ChangeDetectionStrategy.OnPush, la optimización de imágenes y la implementación de estrategias de almacenamiento en caché.",
        "b) No es posible mejorar el rendimiento de las aplicaciones Angular.",
        "c) Solo se necesita mejorar el rendimiento en aplicaciones muy pequeñas.",
        "d) La única forma de mejorar el rendimiento en Angular es mediante el uso de hardware más rápido."
      ]
    },
    {
      "id": 45,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique la arquitectura de una aplicación Angular escalable y cómo se organizan los módulos, componentes y servicios en ella.",
      "answer": "Una aplicación Angular escalable se organiza en módulos funcionales que contienen componentes relacionados y servicios compartidos. Se siguen patrones como 'Smart vs. Dumb Components', se utiliza inyección de dependencias para la comunicación entre componentes y se centraliza la gestión de estado mediante bibliotecas como NgRx o Redux.",
      "correctAnswer": "a) Una aplicación Angular escalable se organiza en módulos funcionales que contienen componentes relacionados y servicios compartidos. Se siguen patrones como 'Smart vs. Dumb Components', se utiliza inyección de dependencias para la comunicación entre componentes y se centraliza la gestión de estado mediante bibliotecas como NgRx o Redux.",
      "allAnswers": [
        "a) Una aplicación Angular escalable se organiza en módulos funcionales que contienen componentes relacionados y servicios compartidos. Se siguen patrones como 'Smart vs. Dumb Components', se utiliza inyección de dependencias para la comunicación entre componentes y se centraliza la gestión de estado mediante bibliotecas como NgRx o Redux.",
        "b) Una aplicación Angular escalable debe colocar todos los componentes en un único módulo para facilitar la gestión.",
        "c) No es necesario organizar una aplicación Angular escalable, ya que Angular se encargará de ello automáticamente.",
        "d) En una aplicación Angular escalable, los componentes deben comunicarse directamente sin utilizar inyección de dependencias."
      ]
    },
    {
      "id": 46,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cómo se realiza la optimización de rendimiento en una aplicación Angular y cuáles son las estrategias clave para lograrlo?",
      "answer": "La optimización de rendimiento en Angular involucra prácticas como la carga diferida de módulos, la reducción del tamaño del paquete, la eliminación de código no utilizado, la compresión de recursos y la implementación de técnicas de renderizado eficiente, como el pre-renderizado y el lazy loading.",
      "correctAnswer": "a) La optimización de rendimiento en Angular involucra prácticas como la carga diferida de módulos, la reducción del tamaño del paquete, la eliminación de código no utilizado, la compresión de recursos y la implementación de técnicas de renderizado eficiente, como el pre-renderizado y el lazy loading.",
      "allAnswers": [
        "a) La optimización de rendimiento en Angular involucra prácticas como la carga diferida de módulos, la reducción del tamaño del paquete, la eliminación de código no utilizado, la compresión de recursos y la implementación de técnicas de renderizado eficiente, como el pre-renderizado y el lazy loading.",
        "b) La optimización de rendimiento en Angular se logra principalmente mediante la mejora de los algoritmos de clasificación de datos en las consultas.",
        "c) La optimización de rendimiento en Angular no es posible y no es necesario preocuparse por ella.",
        "d) La optimización de rendimiento en Angular implica solo la compresión de recursos estáticos."
      ]
    },
    {
      "id": 47,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique el concepto de 'Change Detection' en Angular y cómo se puede personalizar o desactivar para aplicaciones específicas.",
      "answer": "El 'Change Detection' en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente. Se puede personalizar mediante la estrategia ChangeDetectionStrategy y desactivar selectivamente utilizando el método markForCheck en combinación con ChangeDetectorRef para mejorar el rendimiento en aplicaciones complejas.",
      "correctAnswer": "c) El 'Change Detection' en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente. Se puede personalizar mediante la estrategia ChangeDetectionStrategy y desactivar selectivamente utilizando el método markForCheck en combinación con ChangeDetectorRef para mejorar el rendimiento en aplicaciones complejas.",
      "allAnswers": [
        "a) El 'Change Detection' en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente. Se personaliza mediante el ajuste manual de las propiedades internas del componente.",
        "b) El 'Change Detection' en Angular es un proceso de transformación de imágenes en la vista del componente.",
        "c) El 'Change Detection' en Angular es el proceso por el cual el framework verifica y actualiza la vista cuando cambian los datos en el componente. Se puede personalizar mediante la estrategia ChangeDetectionStrategy y desactivar selectivamente utilizando el método markForCheck en combinación con ChangeDetectorRef para mejorar el rendimiento en aplicaciones complejas.",
        "d) El 'Change Detection' en Angular es un proceso de seguridad utilizado para detectar cambios en la configuración de la aplicación y prevenir posibles vulnerabilidades."
      ]
    },
    {
      "id": 48,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es el papel de los 'Pipes' en Angular y cuáles son ejemplos comunes de su uso?",
      "answer": "Los 'Pipes' en Angular son funciones que transforman datos en la plantilla HTML. Se utilizan para formatear fechas, números, cadenas, y aplicar filtros y transformaciones personalizadas a los datos que se muestran en la vista. Ejemplos comunes incluyen 'DatePipe', 'CurrencyPipe' y 'CustomPipe' para transformaciones específicas.",
      "correctAnswer": "b) Los 'Pipes' en Angular son funciones que transforman datos en la plantilla HTML. Se utilizan para formatear fechas, números, cadenas, y aplicar filtros y transformaciones personalizadas a los datos que se muestran en la vista. Ejemplos comunes incluyen 'DatePipe', 'CurrencyPipe' y 'CustomPipe' para transformaciones específicas.",
      "allAnswers": [
        "a) Los 'Pipes' en Angular son conductos que conectan componentes entre sí y permiten el flujo de datos.",
        "b) Los 'Pipes' en Angular son funciones que transforman datos en la plantilla HTML. Se utilizan para formatear fechas, números, cadenas, y aplicar filtros y transformaciones personalizadas a los datos que se muestran en la vista. Ejemplos comunes incluyen 'DatePipe', 'CurrencyPipe' y 'CustomPipe' para transformaciones específicas.",
        "c) Los 'Pipes' en Angular son tuberías utilizadas en la construcción de redes de agua.",
        "d) Los 'Pipes' en Angular son dispositivos de entrada y salida utilizados en la programación de aplicaciones."
      ]
    },
    {
      "id": 49,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cómo se abordan los problemas de seguridad en una aplicación Angular y cuáles son las mejores prácticas para protegerla contra amenazas comunes?",
      "answer": "Para abordar problemas de seguridad en Angular, se deben implementar medidas como la prevención de ataques XSS y CSRF, la autenticación y autorización robustas, la validación de entrada y el uso de bibliotecas de seguridad de confianza. Se recomienda seguir las mejores prácticas de seguridad web y mantener las dependencias actualizadas.",
      "correctAnswer": "b) Para abordar problemas de seguridad en Angular, se deben implementar medidas como la prevención de ataques XSS y CSRF, la autenticación y autorización robustas, la validación de entrada y el uso de bibliotecas de seguridad de confianza. Mantener las mejores prácticas de seguridad web y las dependencias actualizadas.",
      "allAnswers": [
        "a) Para abordar problemas de seguridad en Angular, se deben instalar antivirus en los servidores.",
        "b) Para abordar problemas de seguridad en Angular, se deben implementar medidas como la prevención de ataques XSS y CSRF, la autenticación y autorización robustas, la validación de entrada y el uso de bibliotecas de seguridad de confianza. Mantener las mejores prácticas de seguridad web y las dependencias actualizadas.",
        "c) Para abordar problemas de seguridad en Angular, se deben ignorar las actualizaciones de seguridad y confiar en la seguridad por defecto.",
        "d) Para abordar problemas de seguridad en Angular, se debe proporcionar acceso irrestricto a todos los usuarios sin autenticación."
      ]
    },
    {
      "id": 50,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es el servidor de renderizado (Server-Side Rendering - SSR) en Angular y cuáles son sus beneficios y desafíos?",
      "answer": "El servidor de renderizado en Angular permite renderizar la aplicación en el servidor antes de enviarla al navegador del cliente. Sus beneficios incluyen una carga inicial más rápida y una mejor indexación por parte de motores de búsqueda. Sin embargo, presenta desafíos como la configuración y el manejo de estado.",
      "correctAnswer": "b) El servidor de renderizado en Angular permite renderizar la aplicación en el servidor antes de enviarla al navegador del cliente. Sus beneficios incluyen una carga inicial más rápida y una mejor indexación por parte de motores de búsqueda. Sin embargo, presenta desafíos como la configuración y el manejo de estado.",
      "allAnswers": [
        "a) El servidor de renderizado en Angular se utiliza para renderizar la aplicación únicamente en el lado del cliente.",
        "b) El servidor de renderizado en Angular permite renderizar la aplicación en el servidor antes de enviarla al navegador del cliente. Sus beneficios incluyen una carga inicial más rápida y una mejor indexación por parte de motores de búsqueda. Sin embargo, presenta desafíos como la configuración y el manejo de estado.",
        "c) El servidor de renderizado en Angular solo se utiliza en aplicaciones pequeñas.",
        "d) El servidor de renderizado en Angular es una técnica obsoleta y no tiene beneficios significativos."
      ]
    },
    {
      "id": 51,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique cómo se implementa la autenticación y autorización en una aplicación Angular y mencione las técnicas y bibliotecas recomendadas.",
      "answer": "La autenticación y autorización en Angular se implementa mediante técnicas como el uso de tokens JWT, el almacenamiento seguro de credenciales, la protección de rutas y el uso de bibliotecas como Angular AuthGuard y AngularFire para Firebase. Además, se deben seguir las prácticas recomendadas para proteger recursos y datos sensibles.",
      "correctAnswer": "c) La autenticación y autorización en Angular se implementa mediante técnicas como el uso de tokens JWT, el almacenamiento seguro de credenciales, la protección de rutas y el uso de bibliotecas como Angular AuthGuard y AngularFire para Firebase.",
      "allAnswers": [
        "a) La autenticación en Angular se logra únicamente mediante el uso de cookies.",
        "b) La autenticación en Angular se basa en el almacenamiento inseguro de credenciales y no es necesario proteger rutas.",
        "c) La autenticación y autorización en Angular se implementa mediante técnicas como el uso de tokens JWT, el almacenamiento seguro de credenciales, la protección de rutas y el uso de bibliotecas como Angular AuthGuard y AngularFire para Firebase.",
        "d) Angular no admite técnicas de autenticación y autorización."
      ]
    },
    {
      "id": 52,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique la gestión de estado en aplicaciones Angular y mencione las bibliotecas y patrones comunes utilizados para implementarla.",
      "answer": "La gestión de estado en aplicaciones Angular se refiere a cómo se almacenan y gestionan los datos de la aplicación. Se implementa utilizando bibliotecas como NgRx, Redux y MobX, así como patrones como el patrón Redux. La gestión de estado es crucial para aplicaciones escalables y complejas.",
      "correctAnswer": "a) La gestión de estado en aplicaciones Angular se refiere a cómo se almacenan y gestionan los datos de la aplicación. Se implementa utilizando bibliotecas como NgRx, Redux y MobX, así como patrones como el patrón Redux. La gestión de estado es crucial para aplicaciones escalables y complejas.",
      "allAnswers": [
        "a) La gestión de estado en aplicaciones Angular se refiere a cómo se almacenan y gestionan los datos de la aplicación. Se implementa utilizando bibliotecas como NgRx, Redux y MobX, así como patrones como el patrón Redux. La gestión de estado es crucial para aplicaciones escalables y complejas.",
        "b) La gestión de estado en Angular se realiza únicamente a través de servicios y no requiere el uso de bibliotecas adicionales.",
        "c) Angular no admite la gestión de estado en aplicaciones.",
        "d) La gestión de estado en Angular se basa en el almacenamiento de datos en variables globales."
      ]
    },
    {
      "id": 53,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuáles son las consideraciones clave al diseñar una arquitectura de microfrontend en Angular y cómo se logra la integración entre múltiples microfrontends?",
      "answer": "Al diseñar una arquitectura de microfrontend en Angular, es importante considerar la compartimentalización, la comunicación entre microfrontends y la carga dinámica de módulos. La integración se logra a través de técnicas como iframes, Web Components y la coordinación de eventos y datos entre microfrontends.",
      "correctAnswer": "a) Al diseñar una arquitectura de microfrontend en Angular, es importante considerar la compartimentalización, la comunicación entre microfrontends y la carga dinámica de módulos. La integración se logra a través de técnicas como iframes, Web Components y la coordinación de eventos y datos entre microfrontends.",
      "allAnswers": [
        "a) Al diseñar una arquitectura de microfrontend en Angular, es importante considerar la compartimentalización, la comunicación entre microfrontends y la carga dinámica de módulos. La integración se logra a través de técnicas como iframes, Web Components y la coordinación de eventos y datos entre microfrontends.",
        "b) En una arquitectura de microfrontend en Angular, todos los microfrontends deben compartir un único y gran módulo raíz.",
        "c) La comunicación entre microfrontends no es necesaria en una arquitectura de microfrontend en Angular.",
        "d) La integración en una arquitectura de microfrontend en Angular se logra únicamente a través del uso de bibliotecas compartidas."
      ]
    },
    {
      "id": 54,
      "category": "Angular",
      "level": "Senior",
      "question": "Explique cómo se pueden realizar pruebas unitarias y de integración efectivas en una aplicación Angular y mencione las herramientas y enfoques comunes utilizados.",
      "answer": "Las pruebas unitarias y de integración en Angular se realizan utilizando herramientas como Jasmine, Karma y Protractor. Se deben escribir pruebas para componentes, servicios y rutas, y se pueden simular servicios y eventos para probar el comportamiento. Las pruebas efectivas son esenciales para garantizar la calidad y estabilidad de la aplicación.",
      "correctAnswer": "a) Las pruebas unitarias y de integración en Angular se realizan utilizando herramientas como Jasmine, Karma y Protractor. Se deben escribir pruebas para componentes, servicios y rutas, y se pueden simular servicios y eventos para probar el comportamiento. Las pruebas efectivas son esenciales para garantizar la calidad y estabilidad de la aplicación.",
      "allAnswers": [
        "a) Las pruebas unitarias y de integración en Angular se realizan utilizando herramientas como Jasmine, Karma y Protractor. Se deben escribir pruebas para componentes, servicios y rutas, y se pueden simular servicios y eventos para probar el comportamiento. Las pruebas efectivas son esenciales para garantizar la calidad y estabilidad de la aplicación.",
        "b) Las pruebas unitarias en Angular solo se aplican a componentes, mientras que las pruebas de integración se aplican solo a servicios.",
        "c) No es necesario realizar pruebas en una aplicación Angular, ya que el framework garantiza automáticamente la calidad del código.",
        "d) Las pruebas en Angular solo se realizan de forma manual y no se pueden automatizar."
      ]
    },
    {
      "id": 55,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cómo se puede mejorar la experiencia del usuario (UX) en una aplicación Angular y cuáles son las estrategias comunes para lograrlo?",
      "answer": "Mejorar la experiencia del usuario en una aplicación Angular implica la optimización del rendimiento, la usabilidad, la accesibilidad y el diseño. Estrategias comunes incluyen la carga progresiva, la navegación rápida, la respuesta táctil, el diseño receptivo, la accesibilidad y la retroalimentación visual para acciones del usuario.",
      "correctAnswer": "b) Para mejorar la experiencia del usuario en una aplicación Angular implica la optimización del rendimiento, la usabilidad, la accesibilidad y el diseño. Estrategias comunes incluyen la carga progresiva, la navegación rápida, la respuesta táctil, el diseño receptivo, la accesibilidad y la retroalimentación visual para acciones del usuario.",
      "allAnswers": [
        "a) No es posible mejorar la experiencia del usuario en una aplicación Angular.",
        "b) Para mejorar la experiencia del usuario en una aplicación Angular implica la optimización del rendimiento, la usabilidad, la accesibilidad y el diseño. Estrategias comunes incluyen la carga progresiva, la navegación rápida, la respuesta táctil, el diseño receptivo, la accesibilidad y la retroalimentación visual para acciones del usuario.",
        "c) Una estrategia común para mejorar la experiencia del usuario en Angular es la implementación de animaciones llamativas.",
        "d) La única forma de mejorar la experiencia del usuario en Angular es aumentar el uso de bibliotecas de terceros."
      ]
    },
    {
      "id": 56,
      "category": "Angular",
      "level": "Middle",
      "question": "Explique el ciclo de vida de un componente en Angular y mencione los principales ganchos de ciclo de vida.",
      "answer": "El ciclo de vida de un componente en Angular se compone de varios ganchos que se ejecutan en diferentes etapas, como 'ngOnInit', 'ngOnChanges', 'ngAfterViewInit' y 'ngOnDestroy'. Estos ganchos permiten realizar acciones específicas en momentos clave durante la vida de un componente.",
      "correctAnswer": "c) El ciclo de vida de un componente en Angular se compone de varios ganchos que se ejecutan en diferentes etapas, como 'ngOnInit', 'ngOnChanges', 'ngAfterViewInit' y 'ngOnDestroy'. Estos ganchos permiten realizar acciones específicas en momentos clave durante la vida de un componente.",
      "allAnswers": [
        "a) No existen ganchos de ciclo de vida en Angular.",
        "b) El ciclo de vida de un componente en Angular solo incluye el gancho 'ngOnChanges'.",
        "c) El ciclo de vida de un componente en Angular se compone de varios ganchos que se ejecutan en diferentes etapas, como 'ngOnInit', 'ngOnChanges', 'ngAfterViewInit' y 'ngOnDestroy'. Estos ganchos permiten realizar acciones específicas en momentos clave durante la vida de un componente.",
        "d) Angular no utiliza un ciclo de vida para sus componentes."
      ]
    },
    {
      "id": 57,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué son las animaciones en Angular y cómo se pueden aplicar a elementos HTML?",
      "answer": "Las animaciones en Angular son una forma de agregar transiciones y animaciones a elementos HTML en una aplicación. Se pueden aplicar mediante el uso de directivas como 'ngIf', 'ngFor' y 'ngStyle', así como mediante la creación de animaciones personalizadas con Angular's Animation DSL (lenguaje específico de dominio para animaciones).",
      "correctAnswer": "c) Las animaciones en Angular son una forma de agregar transiciones y animaciones a elementos HTML en una aplicación. Se pueden aplicar mediante el uso de directivas como 'ngIf', 'ngFor' y 'ngStyle', así como mediante la creación de animaciones personalizadas con Angular's Animation DSL (lenguaje específico de dominio para animaciones).",
      "allAnswers": [
        "a) Las animaciones en Angular solo se pueden aplicar a través de JavaScript personalizado.",
        "b) Las animaciones en Angular se aplican solo a elementos SVG.",
        "c) Las animaciones en Angular son una forma de agregar transiciones y animaciones a elementos HTML en una aplicación. Se pueden aplicar mediante el uso de directivas como 'ngIf', 'ngFor' y 'ngStyle', así como mediante la creación de animaciones personalizadas con Angular's Animation DSL (lenguaje específico de dominio para animaciones).",
        "d) Angular no admite animaciones en elementos HTML."
      ]
    },
    {
      "id": 58,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué son las pruebas end-to-end (E2E) en Angular y cómo se pueden realizar utilizando herramientas como Protractor?",
      "answer": "Las pruebas end-to-end (E2E) en Angular son pruebas que verifican el flujo de una aplicación desde la perspectiva del usuario, simulando acciones y eventos en la interfaz. Se pueden realizar utilizando herramientas como Protractor, que automatiza la interacción con la aplicación y realiza comprobaciones en la interfaz de usuario.",
      "correctAnswer": "a) Las pruebas end-to-end (E2E) en Angular son pruebas que verifican el flujo de una aplicación desde la perspectiva del usuario, simulando acciones y eventos en la interfaz. Se pueden realizar utilizando herramientas como Protractor, que automatiza la interacción con la aplicación y realiza comprobaciones en la interfaz de usuario.",
      "allAnswers": [
        "a) Las pruebas end-to-end (E2E) en Angular son pruebas que verifican el flujo de una aplicación desde la perspectiva del usuario, simulando acciones y eventos en la interfaz. Se pueden realizar utilizando herramientas como Protractor, que automatiza la interacción con la aplicación y realiza comprobaciones en la interfaz de usuario.",
        "b) Las pruebas end-to-end (E2E) en Angular son pruebas de unidad que verifican componentes individuales de la aplicación.",
        "c) Las pruebas end-to-end (E2E) en Angular son pruebas que se realizan al final del desarrollo para verificar la estabilidad del código fuente.",
        "d) Las pruebas end-to-end (E2E) en Angular son pruebas que se realizan manualmente para detectar errores en la interfaz de usuario."
      ]
    },
    {
      "id": 59,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Cuál es el papel de las promesas (Promises) en Angular y cómo se utilizan para manejar operaciones asíncronas?",
      "answer": "Las promesas en Angular se utilizan para manejar operaciones asíncronas y devolver resultados en el futuro. Se crean con el constructor 'Promise' y se resuelven o rechazan cuando la operación se completa o falla. Las promesas son útiles para simplificar el manejo de solicitudes HTTP y otras tareas asíncronas en la aplicación.",
      "correctAnswer": "c) Las promesas en Angular se utilizan para manejar operaciones asíncronas y devolver resultados en el futuro. Se crean con el constructor 'Promise' y se resuelven o rechazan cuando la operación se completa o falla. Las promesas son útiles para simplificar el manejo de solicitudes HTTP y otras tareas asíncronas en la aplicación.",
      "allAnswers": [
        "a) Las promesas en Angular se utilizan para ejecutar código sincrónico.",
        "b) Las promesas en Angular se utilizan para gestionar operaciones de entrada y salida en tiempo real.",
        "c) Las promesas en Angular se utilizan para manejar operaciones asíncronas y devolver resultados en el futuro. Se crean con el constructor 'Promise' y se resuelven o rechazan cuando la operación se completa o falla. Las promesas son útiles para simplificar el manejo de solicitudes HTTP y otras tareas asíncronas en la aplicación.",
        "d) Las promesas en Angular se utilizan para generar documentación y comentarios en el código."
      ]
    },
    {
      "id": 60,
      "category": "Angular",
      "level": "Middle",
      "question": "Explique el concepto de 'Interceptors' en Angular y cómo se utilizan para manejar solicitudes HTTP de manera global.",
      "answer": "Los 'Interceptors' en Angular son clases que permiten interceptar y manipular solicitudes HTTP y respuestas de manera global en una aplicación. Se utilizan para agregar encabezados, manejar errores comunes, autenticar solicitudes y realizar otras tareas de pre y post procesamiento. Los Interceptors se configuran mediante el uso del servicio 'HttpClientModule' y se pueden utilizar para aplicar lógica común en todas las solicitudes HTTP.",
      "correctAnswer": "b) Los 'Interceptors' en Angular son clases que permiten interceptar y manipular solicitudes HTTP y respuestas de manera global en una aplicación. Se utilizan para agregar encabezados, manejar errores comunes, autenticar solicitudes y realizar otras tareas de pre y post procesamiento. Los Interceptors se configuran mediante el uso del servicio 'HttpClientModule' y se pueden utilizar para aplicar lógica común en todas las solicitudes HTTP.",
      "allAnswers": [
        "a) Los 'Interceptors' en Angular son componentes gráficos utilizados para crear interfaces de usuario interactivas.",
        "b) Los 'Interceptors' en Angular son clases que permiten interceptar y manipular solicitudes HTTP y respuestas de manera global en una aplicación. Se utilizan para agregar encabezados, manejar errores comunes, autenticar solicitudes y realizar otras tareas de pre y post procesamiento. Los Interceptors se configuran mediante el uso del servicio 'HttpClientModule' y se pueden utilizar para aplicar lógica común en todas las solicitudes HTTP.",
        "c) Los 'Interceptors' en Angular son bibliotecas de terceros utilizadas para generar gráficos y visualizaciones de datos.",
        "d) Los 'Interceptors' en Angular son componentes de animación utilizados para crear efectos visuales en una aplicación."
      ]
    },
    {
      "id": 61,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa HTML y cuál es su función en el desarrollo web?",
      "answer": "HTML, que significa Lenguaje de Marcado de Hipertexto en inglés (Hypertext Markup Language), es el estándar utilizado para la creación y el diseño de páginas web. Define la estructura básica de una página web mediante el uso de etiquetas y atributos, permitiendo la presentación de texto, imágenes, enlaces y otros elementos multimedia en un navegador web.",
      "correctAnswer": "a) Lenguaje de Marcado de Hipertexto utilizado para la creación y el diseño de páginas web.",
      "allAnswers": [
        "a) Lenguaje de Marcado de Hipertexto utilizado para la creación y el diseño de páginas web.",
        "b) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "c) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "d) Técnica exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 62,
      "category": "Html",
      "level": "Junior",
      "question": "Explique la diferencia entre las etiquetas `<div>` y `<span>` en HTML y cómo se utilizan comúnmente.",
      "answer": "En HTML, la etiqueta `<div>` se utiliza para definir divisiones o secciones de una página web, y generalmente se usa para agrupar otros elementos y aplicar estilos. Por otro lado, la etiqueta `<span>` se utiliza para aplicar estilos o scripts a partes específicas de texto dentro de un elemento, sin afectar la estructura general de la página.",
      "correctAnswer": "b) La etiqueta `<div>` se utiliza para definir divisiones o secciones, mientras que `<span>` se utiliza para aplicar estilos o scripts a partes específicas de texto en HTML.",
      "allAnswers": [
        "a) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "b) La etiqueta `<div>` se utiliza para definir divisiones o secciones, mientras que `<span>` se utiliza para aplicar estilos o scripts a partes específicas de texto en HTML.",
        "c) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "d) Técnica exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 63,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es la función de la etiqueta `<a>` en HTML y cómo se utiliza para crear enlaces?",
      "answer": "La etiqueta `<a>` en HTML se utiliza para crear enlaces o hipervínculos. Permite a los desarrolladores enlazar a otras páginas web, archivos, ubicaciones en la misma página, direcciones de correo electrónico, entre otros. Se utiliza con el atributo `href` para especificar la URL de destino o la ubicación a la que debe dirigir el enlace.",
      "correctAnswer": "c) La etiqueta `<a>` se utiliza para crear enlaces o hipervínculos en HTML.",
      "allAnswers": [
        "a) Técnica que solo se aplica a la manipulación de estilos en HTML.",
        "b) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "c) La etiqueta `<a>` se utiliza para crear enlaces o hipervínculos en HTML.",
        "d) Herramienta exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 64,
      "category": "Html",
      "level": "Junior",
      "question": "Explique la diferencia entre las etiquetas `<header>` y `<h1>` en HTML y cómo se utilizan para estructurar una página web.",
      "answer": "En HTML, la etiqueta `<header>` se utiliza para definir la cabecera de una sección o de toda la página web. Por otro lado, la etiqueta `<h1>` se utiliza para definir el encabezado principal o título de una sección. Mientras `<header>` agrupa elementos relacionados con la cabecera, `<h1>` se utiliza para indicar el título principal.",
      "correctAnswer": "a) La etiqueta `<header>` se utiliza para definir la cabecera de una sección o página, mientras que `<h1>` se utiliza para indicar el título principal en HTML.",
      "allAnswers": [
        "a) La etiqueta `<header>` se utiliza para definir la cabecera de una sección o página, mientras que `<h1>` se utiliza para indicar el título principal en HTML.",
        "b) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "c) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "d) Técnica exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 65,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla HTML5 y cuáles son algunas de sus características principales?",
      "answer": "HTML5 es la quinta versión del Lenguaje de Marcado de Hipertexto (HTML). Algunas de sus características principales incluyen el soporte integrado para audio y video, nuevas etiquetas semánticas como `<article>` y `<section>`, capacidades de almacenamiento local, y mejoras en la accesibilidad y el rendimiento. HTML5 es crucial para el desarrollo de aplicaciones web modernas.",
      "correctAnswer": "b) Quinta versión del Lenguaje de Marcado de Hipertexto con soporte integrado para audio y video, etiquetas semánticas y capacidades de almacenamiento local.",
      "allAnswers": [
        "a) Técnica que solo se aplica a la manipulación de estilos en HTML.",
        "b) Quinta versión del Lenguaje de Marcado de Hipertexto con soporte integrado para audio y video, etiquetas semánticas y capacidades de almacenamiento local.",
        "c) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "d) Herramienta exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 66,
      "category": "Html",
      "level": "Junior",
      "question": "Explique el propósito de las etiquetas `<article>` y `<section>` en HTML y cómo se utilizan para estructurar contenido.",
      "answer": "Las etiquetas `<article>` y `<section>` en HTML se utilizan para estructurar el contenido de una página web. `<article>` se utiliza para encapsular contenido independiente y autónomo, como un artículo de noticias, un blog o un comentario. `<section>`, por otro lado, se utiliza para agrupar contenido temático relacionado dentro de un documento, como capítulos en un libro o secciones en una página.",
      "correctAnswer": "c) `<article>` se utiliza para contenido independiente, mientras que `<section>` se utiliza para agrupar contenido temático relacionado en HTML.",
      "allAnswers": [
        "a) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) `<article>` se utiliza para contenido independiente, mientras que `<section>` se utiliza para agrupar contenido temático relacionado en HTML.",
        "d) Técnica exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 67,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<img>` en HTML y cómo se utiliza para mostrar imágenes?",
      "answer": "La etiqueta `<img>` en HTML se utiliza para incrustar imágenes en una página web. Se utiliza con el atributo `src` para especificar la URL o la ruta de la imagen, y puede incluir atributos adicionales como `alt` para proporcionar texto alternativo y `width` y `height` para definir las dimensiones de la imagen.",
      "correctAnswer": "b) La etiqueta `<img>` se utiliza para incrustar imágenes en una página web en HTML.",
      "allAnswers": [
        "a) Técnica que solo se aplica a la manipulación de estilos en HTML.",
        "b) La etiqueta `<img>` se utiliza para incrustar imágenes en una página web en HTML.",
        "c) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "d) Herramienta exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 68,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea una lista ordenada (`<ol>`) y una lista no ordenada (`<ul>`) en HTML?",
      "answer": "En HTML, una lista ordenada (`<ol>`) se crea envolviendo los elementos de la lista con la etiqueta `<ol>` y cada elemento de la lista con la etiqueta `<li>`. Una lista no ordenada (`<ul>`) se crea de manera similar, pero utilizando la etiqueta `<ul>`. Cada elemento de la lista no ordenada también se envuelve con la etiqueta `<li>`.",
      "correctAnswer": "a) Una lista ordenada se crea con `<ol>` y `<li>`, mientras que una lista no ordenada se crea con `<ul>` y `<li>` en HTML.",
      "allAnswers": [
        "a) Una lista ordenada se crea con `<ol>` y `<li>`, mientras que una lista no ordenada se crea con `<ul>` y `<li>` en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 69,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<form>` en HTML y cómo se utiliza para recopilar datos?",
      "answer": "La etiqueta `<form>` en HTML se utiliza para crear un formulario que permite a los usuarios ingresar y enviar datos. Los elementos de entrada, como campos de texto, casillas de verificación y botones, se colocan dentro de la etiqueta `<form>`. Cuando el usuario envía el formulario, los datos se pueden procesar en el lado del servidor.",
      "correctAnswer": "d) La etiqueta `<form>` se utiliza para crear formularios que permiten a los usuarios ingresar y enviar datos en HTML.",
      "allAnswers": [
        "a) Técnica que solo se aplica a la manipulación de estilos en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "d) La etiqueta `<form>` se utiliza para crear formularios que permiten a los usuarios ingresar y enviar datos en HTML."
      ]
    },
    {
      "id": 70,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla CSS y cuál es su función en el desarrollo web?",
      "answer": "CSS significa Hojas de Estilo en Cascada en inglés (Cascading Style Sheets). Su función en el desarrollo web es controlar el diseño y la presentación de una página HTML. Permite aplicar estilos, como colores, fuentes y márgenes, a elementos específicos, lo que mejora la apariencia y la coherencia visual de una página web.",
      "correctAnswer": "b) Hojas de Estilo en Cascada utilizadas para controlar el diseño y la presentación de una página HTML en el desarrollo web.",
      "allAnswers": [
        "a) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "b) Hojas de Estilo en Cascada utilizadas para controlar el diseño y la presentación de una página HTML en el desarrollo web.",
        "c) Herramienta exclusiva para la creación de interfaces de usuario en HTML.",
        "d) Técnica que solo se aplica a la manipulación de archivos en HTML."
      ]
    },
    {
      "id": 71,
      "category": "Html",
      "level": "Junior",
      "question": "Explique el propósito de la etiqueta `<table>` en HTML y cómo se utiliza para crear tablas.",
      "answer": "La etiqueta `<table>` en HTML se utiliza para crear tablas. Las filas de la tabla se definen con la etiqueta `<tr>`, las celdas de encabezado con `<th>`, y las celdas regulares con `<td>`. Esto permite organizar datos de manera estructurada y presentarlos en un formato tabular en una página web.",
      "correctAnswer": "a) La etiqueta `<table>` se utiliza para crear tablas en HTML.",
      "allAnswers": [
        "a) La etiqueta `<table>` se utiliza para crear tablas en HTML.",
        "b) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "c) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 72,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<head>` en HTML y qué tipo de información se coloca comúnmente dentro de ella?",
      "answer": "La etiqueta `<head>` en HTML se utiliza para contener información meta sobre el documento, como el título de la página, enlaces a hojas de estilo, scripts y metadatos. No se muestra directamente en la página visible para el usuario, pero desempeña un papel crucial en la configuración y presentación de la página.",
      "correctAnswer": "c) La etiqueta `<head>` se utiliza para contener información meta sobre el documento en HTML.",
      "allAnswers": [
        "a) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) La etiqueta `<head>` se utiliza para contener información meta sobre el documento en HTML.",
        "d) Técnica exclusiva para la creación de interfaces de usuario en HTML."
      ]
    },
    {
      "id": 73,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es el atributo `alt` en la etiqueta `<img>` de HTML y por qué es importante?",
      "answer": "El atributo `alt` en la etiqueta `<img>` de HTML se utiliza para proporcionar un texto alternativo que se mostrará si la imagen no se carga correctamente. Además, es crucial para la accesibilidad, ya que las tecnologías de asistencia pueden leer este texto a los usuarios con discapacidades visuales.",
      "correctAnswer": "b) El atributo `alt` se utiliza para proporcionar texto alternativo en la etiqueta `<img>` de HTML y es importante para la accesibilidad.",
      "allAnswers": [
        "a) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "b) El atributo `alt` se utiliza para proporcionar texto alternativo en la etiqueta `<img>` de HTML y es importante para la accesibilidad.",
        "c) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "d) Herramienta que solo se aplica a la manipulación de archivos en HTML."
      ]
    },
    {
      "id": 74,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<footer>` en HTML y cómo se utiliza para estructurar una página web?",
      "answer": "La etiqueta `<footer>` en HTML se utiliza para definir el pie de página de una sección o de toda la página web. Contiene información de contacto, derechos de autor, enlaces a términos y condiciones, y otros elementos que no son parte central del contenido principal. Ayuda a estructurar la información y mejora la navegabilidad.",
      "correctAnswer": "a) La etiqueta `<footer>` se utiliza para definir el pie de página de una sección o página en HTML.",
      "allAnswers": [
        "a) La etiqueta `<footer>` se utiliza para definir el pie de página de una sección o página en HTML.",
        "b) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "c) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "d) Herramienta que solo se aplica a la manipulación de archivos en HTML."
      ]
    },
    {
      "id": 75,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<nav>` en HTML y cómo se utiliza para estructurar la navegación en una página web?",
      "answer": "La etiqueta `<nav>` en HTML se utiliza para definir la sección de navegación de una página web. Contiene enlaces a otras páginas o secciones del sitio. Utilizar `<nav>` ayuda a organizar y estructurar la información, facilitando a los usuarios encontrar y navegar a diferentes partes del sitio.",
      "correctAnswer": "c) La etiqueta `<nav>` se utiliza para definir la sección de navegación de una página web en HTML.",
      "allAnswers": [
        "a) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) La etiqueta `<nav>` se utiliza para definir la sección de navegación de una página web en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 76,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se añade un comentario en HTML y cuál es su propósito?",
      "answer": "Un comentario en HTML se añade encerrando el texto del comentario entre `<!--` y `-->`. Los comentarios son invisibles para los usuarios, pero son útiles para que los desarrolladores documenten el código, hagan anotaciones o desactiven temporalmente partes del código sin eliminarlas.",
      "correctAnswer": "b) Un comentario se añade entre `<!--` y `-->` en HTML, y su propósito es proporcionar información adicional para los desarrolladores.",
      "allAnswers": [
        "a) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "b) Un comentario se añade entre `<!--` y `-->` en HTML, y su propósito es proporcionar información adicional para los desarrolladores.",
        "c) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 77,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea un hipervínculo en HTML utilizando la etiqueta `<a>`?",
      "answer": "Para crear un hipervínculo en HTML, se utiliza la etiqueta `<a>` junto con el atributo `href`, que especifica la URL de destino. Por ejemplo, `<a href='https://www.ejemplo.com'>Enlace</a>` crea un enlace a 'https://www.ejemplo.com' con el texto 'Enlace'.",
      "correctAnswer": "a) Se utiliza la etiqueta `<a>` con el atributo `href` para crear un hipervínculo en HTML.",
      "allAnswers": [
        "a) Se utiliza la etiqueta `<a>` con el atributo `href` para crear un hipervínculo en HTML.",
        "b) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "c) Herramienta exclusiva para la creación de interfaces de usuario en HTML.",
        "d) Técnica que solo se aplica a la manipulación de estilos en HTML."
      ]
    },
    {
      "id": 78,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<aside>` en HTML y cómo se utiliza para estructurar una página web?",
      "answer": "La etiqueta `<aside>` en HTML se utiliza para definir contenido secundario o complementario que está relacionado con el contenido principal, pero que se puede presentar de manera independiente. Se utiliza comúnmente para barras laterales, notas, publicidad o cualquier contenido que no sea esencial para entender el contenido principal de la página.",
      "correctAnswer": "c) La etiqueta `<aside>` se utiliza para definir contenido secundario o complementario en HTML.",
      "allAnswers": [
        "a) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "b) Herramienta que solo se aplica a la manipulación de archivos en HTML.",
        "c) La etiqueta `<aside>` se utiliza para definir contenido secundario o complementario en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 79,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla URL y cómo se compone?",
      "answer": "URL significa Localizador Uniforme de Recursos en inglés (Uniform Resource Locator). Se compone de varios elementos, incluyendo el esquema (por ejemplo, 'https://'), el nombre de dominio (como 'www.ejemplo.com') y la ruta que especifica la ubicación del recurso específico en el servidor.",
      "correctAnswer": "b) URL significa Localizador Uniforme de Recursos y se compone de un esquema, un nombre de dominio y una ruta.",
      "allAnswers": [
        "a) Técnica que solo se aplica a la manipulación de estilos en HTML.",
        "b) URL significa Localizador Uniforme de Recursos y se compone de un esquema, un nombre de dominio y una ruta.",
        "c) Herramienta exclusiva para la creación de interfaces de usuario en HTML.",
        "d) Estrategia que solo se aplica a funciones asíncronas en HTML."
      ]
    },
    {
      "id": 80,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la etiqueta `<main>` en HTML y cómo se utiliza para estructurar una página web?",
      "answer": "La etiqueta `<main>` en HTML se utiliza para definir el contenido principal de una página web. Ayuda a identificar qué parte del código HTML contiene el contenido esencial de la página, excluyendo encabezados, pies de página, barras laterales y otros elementos secundarios. Su uso contribuye a la accesibilidad y a la estructura semántica del documento.",
      "correctAnswer": "a) La etiqueta `<main>` se utiliza para definir el contenido principal de una página web en HTML.",
      "allAnswers": [
        "a) La etiqueta `<main>` se utiliza para definir el contenido principal de una página web en HTML.",
        "b) Técnica exclusiva para la creación de interfaces de usuario en HTML.",
        "c) Estrategia que solo se aplica a funciones asíncronas en HTML.",
        "d) Herramienta que solo se aplica a la manipulación de archivos en HTML."
      ]
    },    
    {
      "id": 81,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es la validación de formularios en HTML y cómo se puede lograr utilizando atributos específicos?",
      "answer": "La validación de formularios en HTML es un proceso que garantiza que los datos ingresados por los usuarios cumplan con ciertos criterios. Se puede lograr utilizando atributos como `required` para campos obligatorios, `pattern` para especificar un patrón de entrada y `maxlength` para limitar la longitud del texto.",
      "correctAnswer": "b) La validación de formularios en HTML es un proceso que garantiza que los datos ingresados cumplan con ciertos criterios.",
      "allAnswers": [
        "a) Para garantizar la coherencia en la presentación de formularios.",
        "b) La validación de formularios en HTML es un proceso que garantiza que los datos ingresados cumplan con ciertos criterios.",
        "c) Para agregar estilos personalizados a un documento HTML.",
        "d) Para definir la estructura de una tabla en HTML."
      ]
    },
    {
      "id": 82,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<progress>` en HTML y cómo se puede utilizar para mostrar el progreso de una tarea.",
      "answer": "La etiqueta `<progress>` en HTML se utiliza para representar la finalización o progreso de una tarea. Se puede utilizar junto con el atributo `value` para indicar el estado actual de la tarea y el atributo `max` para establecer el valor máximo posible.",
      "correctAnswer": "c) Para representar la finalización o progreso de una tarea en HTML.",
      "allAnswers": [
        "a) Para insertar un video en una página HTML.",
        "b) Para definir la estructura de una tabla en HTML.",
        "c) Para representar la finalización o progreso de una tarea en HTML.",
        "d) Para agregar estilos personalizados a un documento HTML."
      ]
    },
    {
      "id": 83,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<header>` en HTML y cómo se diferencia de `<h1>`.",
      "answer": "La etiqueta `<header>` en HTML se utiliza para representar la cabecera de un elemento o sección, como la cabecera de un artículo o una sección de la página. Difieren de `<h1>` en que `<header>` se refiere a la cabecera del contenido, mientras que `<h1>` se utiliza para definir el encabezado principal o el título de la página.",
      "correctAnswer": "a) `<header>` se utiliza para representar la cabecera de un elemento o sección.",
      "allAnswers": [
        "a) `<header>` se utiliza para representar la cabecera de un elemento o sección.",
        "b) `<header>` es equivalente a `<h1>` y se puede usar indistintamente.",
        "c) `<header>` solo se utiliza para encabezados de página.",
        "d) `<header>` y `<h1>` son obsoletas y no se deben usar en HTML moderno."
      ]
    },
    {
      "id": 84,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<mark>` en HTML y en qué contexto se puede utilizar?",
      "answer": "La etiqueta `<mark>` en HTML se utiliza para resaltar partes de texto dentro de un documento. Puede ser útil en situaciones donde se desea destacar o marcar ciertas secciones de contenido para resaltar su importancia o relevancia.",
      "correctAnswer": "c) `<mark>` se utiliza para resaltar partes de texto dentro de un documento.",
      "allAnswers": [
        "a) `<mark>` se utiliza para crear listas de elementos destacados.",
        "b) `<mark>` se utiliza exclusivamente en formularios HTML.",
        "c) `<mark>` se utiliza para resaltar partes de texto dentro de un documento.",
        "d) `<mark>` es una etiqueta obsoleta y no se debe usar en HTML moderno."
      ]
    },
    {
      "id": 85,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<time>` en HTML y proporciona un ejemplo de cómo se puede utilizar.",
      "answer": "La etiqueta `<time>` en HTML se utiliza para representar fechas y horas. Se puede utilizar para marcar el tiempo de publicación de un artículo, la fecha de un evento, etc. Por ejemplo, `<time datetime='2023-10-01'>1 de octubre de 2023</time>`.",
      "correctAnswer": "a) `<time>` se utiliza para representar fechas y horas en HTML.",
      "allAnswers": [
        "a) `<time>` se utiliza para representar fechas y horas en HTML.",
        "b) `<time>` se utiliza para crear temporizadores en páginas web.",
        "c) `<time>` es exclusivamente para indicar la duración de un video.",
        "d) `<time>` y `<date>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 86,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<aside>` en HTML y en qué tipo de contenido se puede utilizar?",
      "answer": "La etiqueta `<aside>` en HTML se utiliza para representar contenido relacionado, pero que está fuera del flujo principal del documento. Se puede utilizar para contenido secundario como barras laterales, notas al margen o publicidad.",
      "correctAnswer": "c) `<aside>` se utiliza para representar contenido relacionado pero fuera del flujo principal del documento.",
      "allAnswers": [
        "a) `<aside>` se utiliza para representar listas de elementos secundarios.",
        "b) `<aside>` es equivalente a `<div>` y se puede usar indistintamente.",
        "c) `<aside>` se utiliza para representar contenido relacionado pero fuera del flujo principal del documento.",
        "d) `<aside>` solo se utiliza en formularios HTML."
      ]
    },
    {
      "id": 87,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre las etiquetas `<datalist>` y `<select>` en HTML y cuándo es apropiado usar cada una?",
      "answer": "La etiqueta `<select>` se utiliza para crear listas desplegables donde el usuario puede seleccionar una opción. `<datalist>`, por otro lado, proporciona una lista de opciones para un campo de entrada, pero permite al usuario ingresar valores que no están en la lista. `<datalist>` es útil cuando se desea proporcionar sugerencias, pero se permite un valor personalizado.",
      "correctAnswer": "b) `<select>` se utiliza para listas desplegables, `<datalist>` para campos de entrada con sugerencias.",
      "allAnswers": [
        "a) Ambas etiquetas son intercambiables y pueden usarse para lo mismo.",
        "b) `<select>` se utiliza para listas desplegables, `<datalist>` para campos de entrada con sugerencias.",
        "c) `<datalist>` se utiliza exclusivamente para crear listas de datos en HTML.",
        "d) `<select>` y `<datalist>` son obsoletas y no se deben usar en HTML moderno."
      ]
    },
    {
      "id": 88,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<figure>` en HTML y proporciona un ejemplo de su uso.",
      "answer": "La etiqueta `<figure>` en HTML se utiliza para encapsular cualquier contenido relacionado, como imágenes o gráficos, junto con su leyenda utilizando la etiqueta `<figcaption>`. Por ejemplo, `<figure><img src='imagen.jpg' alt='Descripción'><figcaption>Figura 1: Descripción de la imagen</figcaption></figure>`.",
      "correctAnswer": "c) `<figure>` se utiliza para encapsular contenido relacionado con su leyenda en HTML.",
      "allAnswers": [
        "a) `<figure>` se utiliza para crear tablas en HTML.",
        "b) `<figure>` se utiliza para marcar el comienzo de un nuevo párrafo en HTML.",
        "c) `<figure>` se utiliza para encapsular contenido relacionado con su leyenda en HTML.",
        "d) `<figure>` y `<figcaption>` son obsoletas y no se deben usar en HTML moderno."
      ]
    },
    {
      "id": 89,
      "category": "Html",
      "level": "Middle",
      "question": "Explique el propósito de la etiqueta `<progress>` en HTML y proporciona un ejemplo de su uso.",
      "answer": "La etiqueta `<progress>` en HTML se utiliza para representar la finalización de una tarea, como la carga de un archivo o una descarga. Se puede utilizar junto con el atributo `value` para indicar el progreso. Por ejemplo, `<progress value='50' max='100'></progress>` representa un progreso del 50%.",
      "correctAnswer": "a) `<progress>` se utiliza para representar la finalización de una tarea en HTML.",
      "allAnswers": [
        "a) `<progress>` se utiliza para representar la finalización de una tarea en HTML.",
        "b) `<progress>` se utiliza para crear barras de navegación en HTML.",
        "c) `<progress>` se utiliza para representar una lista de tareas pendientes en HTML.",
        "d) `<progress>` es obsoleta y no se debe usar en HTML moderno."
      ]
    },
    {
      "id": 90,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<nav>` en HTML y cuándo se debe utilizar?",
      "answer": "La etiqueta `<nav>` en HTML se utiliza para representar una sección de navegación en un documento. Debe envolver los enlaces de navegación, como menús y barras de navegación. Ayuda a los dispositivos de asistencia y los desarrolladores a identificar la sección que contiene los enlaces de navegación.",
      "correctAnswer": "b) `<nav>` se utiliza para representar una sección de navegación en un documento HTML.",
      "allAnswers": [
        "a) `<nav>` se utiliza para crear listas de navegación en HTML.",
        "b) `<nav>` se utiliza para representar una sección de navegación en un documento HTML.",
        "c) `<nav>` se utiliza exclusivamente para crear menús desplegables.",
        "d) `<nav>` y `<menu>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 91,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<footer>` en HTML y cuándo se debe utilizar?",
      "answer": "La etiqueta `<footer>` en HTML se utiliza para representar el pie de una sección o de todo el documento. Contiene información de autoría, derechos de autor, enlaces a políticas y otros elementos relacionados con la parte final del contenido. Debe colocarse dentro del elemento `<body>`.",
      "correctAnswer": "a) `<footer>` se utiliza para representar el pie de una sección o de todo el documento en HTML.",
      "allAnswers": [
        "a) `<footer>` se utiliza para representar el pie de una sección o de todo el documento en HTML.",
        "b) `<footer>` se utiliza exclusivamente para marcar el final de un párrafo.",
        "c) `<footer>` se utiliza para crear secciones con fondos de color en HTML.",
        "d) `<footer>` y `<end>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 92,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<abbr>` en HTML y proporciona un ejemplo de su uso.",
      "answer": "La etiqueta `<abbr>` en HTML se utiliza para definir una abreviatura o acrónimo. Puede incluir el atributo `title` para proporcionar la versión completa cuando el usuario pasa el mouse sobre la abreviatura. Por ejemplo, `<abbr title='Hypertext Markup Language'>HTML</abbr>`.",
      "correctAnswer": "c) `<abbr>` se utiliza para definir abreviaturas o acrónimos en HTML.",
      "allAnswers": [
        "a) `<abbr>` se utiliza para resaltar texto en negrita en HTML.",
        "b) `<abbr>` se utiliza exclusivamente para crear listas de elementos abreviados.",
        "c) `<abbr>` se utiliza para definir abreviaturas o acrónimos en HTML.",
        "d) `<abbr>` y `<acronym>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 93,
      "category": "Html",
      "level": "Middle",
      "question": "Explique el propósito de la etiqueta `<section>` en HTML y cuándo es apropiado utilizarla.",
      "answer": "La etiqueta `<section>` en HTML se utiliza para representar una sección genérica de contenido. Se puede utilizar para dividir el contenido de una página en secciones temáticas o grupos lógicos. Debe contener un encabezado y puede contener otras etiquetas de sección como `<article>` o `<nav>`.",
      "correctAnswer": "a) `<section>` se utiliza para representar una sección genérica de contenido en HTML.",
      "allAnswers": [
        "a) `<section>` se utiliza para representar una sección genérica de contenido en HTML.",
        "b) `<section>` se utiliza exclusivamente para crear listas numeradas en HTML.",
        "c) `<section>` se utiliza para marcar el comienzo de un nuevo párrafo.",
        "d) `<section>` y `<div>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 94,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<cite>` en HTML y cuándo se debe utilizar?",
      "answer": "La etiqueta `<cite>` en HTML se utiliza para referenciar el título de una obra creativa, como libros, películas o canciones. Se debe utilizar cuando se hace referencia a una fuente y se quiere destacar el título. Por ejemplo, `<p>Según el <cite>Manual de Estilo de la Modern Language Association</cite>,...</p>`.",
      "correctAnswer": "c) `<cite>` se utiliza para referenciar el título de una obra creativa en HTML.",
      "allAnswers": [
        "a) `<cite>` se utiliza para crear citas en línea en HTML.",
        "b) `<cite>` se utiliza exclusivamente para citar fragmentos de código fuente.",
        "c) `<cite>` se utiliza para referenciar el título de una obra creativa en HTML.",
        "d) `<cite>` y `<blockquote>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 95,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué significa el atributo `defer` en una etiqueta `<script>` en HTML y cuándo se debe usar?",
      "answer": "El atributo `defer` en una etiqueta `<script>` en HTML indica que el script se ejecutará después de que el documento HTML haya sido completamente analizado. Se debe utilizar cuando el script no afecta la representación inicial de la página y puede cargarse de manera asíncrona sin bloquear la carga de la página.",
      "correctAnswer": "b) `defer` indica que el script se ejecutará después de que el documento HTML se haya analizado completamente.",
      "allAnswers": [
        "a) `defer` indica que el script se ejecutará de inmediato, incluso antes de que el documento HTML se analice.",
        "b) `defer` indica que el script se ejecutará después de que el documento HTML se haya analizado completamente.",
        "c) `defer` solo se aplica a estilos CSS en HTML.",
        "d) `defer` y `async` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 96,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito del atributo `role` en HTML y proporciona un ejemplo de su uso.",
      "answer": "El atributo `role` en HTML se utiliza para describir la función de un elemento para los usuarios de tecnologías de asistencia. Por ejemplo, `<nav role='navigation'>...</nav>` indica que el elemento `<nav>` actúa como una sección de navegación.",
      "correctAnswer": "a) `role` se utiliza para describir la función de un elemento para usuarios de tecnologías de asistencia en HTML.",
      "allAnswers": [
        "a) `role` se utiliza para describir la función de un elemento para usuarios de tecnologías de asistencia en HTML.",
        "b) `role` se utiliza exclusivamente para aplicar estilos adicionales a un elemento.",
        "c) `role` se utiliza para asignar nombres a variables en HTML.",
        "d) `role` y `class` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 97,
      "category": "Html",
      "level": "Middle",
      "question": "Explique el propósito de la etiqueta `<mark>` en HTML y proporcione un ejemplo de su uso.",
      "answer": "La etiqueta `<mark>` en HTML se utiliza para resaltar partes del texto dentro de un documento. Proporciona un marcado semántico para resaltar términos o secciones importantes. Por ejemplo, `<p>Este es un <mark>término importante</mark> en el texto.</p>`.",
      "correctAnswer": "b) `<mark>` se utiliza para resaltar partes del texto dentro de un documento en HTML.",
      "allAnswers": [
        "a) `<mark>` se utiliza para crear listas numeradas en HTML.",
        "b) `<mark>` se utiliza para resaltar partes del texto dentro de un documento en HTML.",
        "c) `<mark>` se utiliza exclusivamente para marcar el final de un párrafo.",
        "d) `<mark>` y `<highlight>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 98,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<canvas>` en HTML y cuándo es apropiado usarla?",
      "answer": "La etiqueta `<canvas>` en HTML se utiliza para dibujar gráficos, imágenes y animaciones usando JavaScript. Es apropiado usarla cuando se necesita realizar gráficos dinámicos o interactuar con elementos visuales en una página web.",
      "correctAnswer": "a) `<canvas>` se utiliza para dibujar gráficos, imágenes y animaciones en HTML.",
      "allAnswers": [
        "a) `<canvas>` se utiliza para dibujar gráficos, imágenes y animaciones en HTML.",
        "b) `<canvas>` se utiliza exclusivamente para incrustar videos en una página web.",
        "c) `<canvas>` solo se utiliza en contextos de formularios HTML.",
        "d) `<canvas>` y `<svg>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 99,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es el propósito de la etiqueta `<time>` en HTML y cuándo es apropiado usarla?",
      "answer": "La etiqueta `<time>` en HTML se utiliza para representar fechas y horas en un formato específico. Es apropiado usarla cuando se desea proporcionar información temporal y se quiere que los motores de búsqueda y las tecnologías de asistencia interpreten la información temporal de manera adecuada.",
      "correctAnswer": "b) `<time>` se utiliza para representar fechas y horas en un formato específico en HTML.",
      "allAnswers": [
        "a) `<time>` se utiliza exclusivamente para incrustar videos en una página web.",
        "b) `<time>` se utiliza para representar fechas y horas en un formato específico en HTML.",
        "c) `<time>` solo se utiliza en contextos de formularios HTML.",
        "d) `<time>` y `<date>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 100,
      "category": "Html",
      "level": "Middle",
      "question": "Explica el propósito de la etiqueta `<details>` en HTML y proporciona un ejemplo de su uso.",
      "answer": "La etiqueta `<details>` en HTML se utiliza para crear un widget de detalles que se puede abrir y cerrar para mostrar u ocultar información adicional. Puede contener elementos como `<summary>` para proporcionar un encabezado. Por ejemplo, `<details><summary>Ver detalles</summary><p>Información adicional...</p></details>`.",
      "correctAnswer": "a) `<details>` se utiliza para crear un widget de detalles que se puede abrir y cerrar en HTML.",
      "allAnswers": [
        "a) `<details>` se utiliza para crear un widget de detalles que se puede abrir y cerrar en HTML.",
        "b) `<details>` se utiliza exclusivamente para marcar el final de un párrafo.",
        "c) `<details>` solo se utiliza en contextos de formularios HTML.",
        "d) `<details>` y `<accordion>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 101,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito de la etiqueta `<iframe>` en HTML y cuándo es apropiado utilizarla.",
      "answer": "La etiqueta `<iframe>` en HTML se utiliza para incrustar documentos o páginas web dentro de una página principal. Es apropiado utilizarla cuando se desea mostrar contenido externo, como mapas de Google, videos de YouTube o widgets de redes sociales, dentro de una página sin necesidad de cargar una página completa.",
      "correctAnswer": "b) `<iframe>` se utiliza para incrustar documentos o páginas web dentro de una página principal en HTML.",
      "allAnswers": [
        "a) `<iframe>` se utiliza exclusivamente para crear listas numeradas en HTML.",
        "b) `<iframe>` se utiliza para incrustar documentos o páginas web dentro de una página principal en HTML.",
        "c) `<iframe>` solo se utiliza en contextos de formularios HTML.",
        "d) `<iframe>` y `<object>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 102,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es el propósito de la etiqueta `<article>` en HTML y cuándo se debe utilizar?",
      "answer": "La etiqueta `<article>` en HTML se utiliza para representar una composición autocontenida, como un artículo de un periódico o una publicación de un blog. Se debe utilizar cuando el contenido dentro de la etiqueta es independiente y puede ser distribuido y reutilizado de manera independiente, por ejemplo, en una página de inicio.",
      "correctAnswer": "a) `<article>` se utiliza para representar una composición autocontenida en HTML.",
      "allAnswers": [
        "a) `<article>` se utiliza para representar una composición autocontenida en HTML.",
        "b) `<article>` se utiliza exclusivamente para crear listas de artículos en línea.",
        "c) `<article>` se utiliza para marcar el comienzo de un nuevo párrafo.",
        "d) `<article>` y `<section>` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 103,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el concepto de 'Web Accessibility' y por qué es importante en el desarrollo web.",
      "answer": "'Web Accessibility' se refiere a la práctica de asegurar que las personas con discapacidades puedan acceder y utilizar sitios web de manera efectiva. Esto incluye garantizar que los sitios sean perceptibles, operables, comprensibles y robustos. Es importante para proporcionar una experiencia inclusiva y equitativa a todos los usuarios, independientemente de sus habilidades o discapacidades.",
      "correctAnswer": "a) 'Web Accessibility' se refiere a la práctica de asegurar que las personas con discapacidades puedan acceder y utilizar sitios web de manera efectiva.",
      "allAnswers": [
        "a) 'Web Accessibility' se refiere a la práctica de asegurar que las personas con discapacidades puedan acceder y utilizar sitios web de manera efectiva.",
        "b) 'Web Accessibility' es exclusivamente una preocupación de diseño gráfico en el desarrollo web.",
        "c) 'Web Accessibility' se aplica solo a sitios web gubernamentales.",
        "d) 'Web Accessibility' y 'Responsive Design' son conceptos intercambiables."
      ]
    },
    {
      "id": 104,
      "category": "Html",
      "level": "Senior",
      "question": "¿Qué es el atributo `aria-hidden` en HTML y cuándo es apropiado utilizarlo?",
      "answer": "El atributo `aria-hidden` en HTML se utiliza para indicar si un elemento debe ser visible o no para tecnologías de asistencia como lectores de pantalla. Se establece en `true` cuando se quiere ocultar un elemento de estas tecnologías y en `false` cuando se quiere que sea accesible. Es apropiado utilizarlo cuando hay elementos visuales que no aportan información relevante para usuarios de lectores de pantalla.",
      "correctAnswer": "b) El atributo `aria-hidden` en HTML se utiliza para indicar si un elemento debe ser visible o no para tecnologías de asistencia como lectores de pantalla.",
      "allAnswers": [
        "a) El atributo `aria-hidden` se utiliza exclusivamente para cambiar el color de fondo de un elemento en HTML.",
        "b) El atributo `aria-hidden` en HTML se utiliza para indicar si un elemento debe ser visible o no para tecnologías de asistencia como lectores de pantalla.",
        "c) El atributo `aria-hidden` solo se aplica a elementos de formulario.",
        "d) El atributo `aria-hidden` y `hidden` son intercambiables y se pueden usar en cualquier contexto."
      ]
    },
    {
      "id": 105,
      "category": "Html",
      "level": "Senior",
      "question": "Explique la diferencia entre `cookie` y `localStorage` en el contexto de almacenamiento web en HTML.",
      "answer": "`cookie` y `localStorage` son mecanismos de almacenamiento en el navegador. La principal diferencia radica en la capacidad y el propósito. `cookie` tiene una capacidad limitada y se envía con cada solicitud al servidor, mientras que `localStorage` puede almacenar más datos y permanece en el lado del cliente, sin enviarse con cada solicitud al servidor.",
      "correctAnswer": "b) `cookie` tiene una capacidad limitada y se envía con cada solicitud al servidor, mientras que `localStorage` puede almacenar más datos y permanece en el lado del cliente.",
      "allAnswers": [
        "a) `cookie` y `localStorage` son términos intercambiables en HTML.",
        "b) `cookie` tiene una capacidad limitada y se envía con cada solicitud al servidor, mientras que `localStorage` puede almacenar más datos y permanece en el lado del cliente.",
        "c) `localStorage` solo se utiliza para almacenar cookies en HTML.",
        "d) `localStorage` es exclusivo para el almacenamiento de datos en servidores externos."
      ]
    },
    {
      "id": 106,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuándo es apropiado utilizar el atributo `defer` en una etiqueta `<script>` en HTML?",
      "answer": "El atributo `defer` en una etiqueta `<script>` en HTML se utiliza para indicar que el script se ejecutará después de que la página se haya analizado completamente. Es apropiado utilizarlo cuando el script no afecta directamente el contenido visual de la página y puede ejecutarse de manera asíncrona sin interrumpir el proceso de carga de la página.",
      "correctAnswer": "a) El atributo `defer` se utiliza cuando se desea que el script se ejecute después de que la página se haya analizado completamente.",
      "allAnswers": [
        "a) El atributo `defer` se utiliza cuando se desea que el script se ejecute después de que la página se haya analizado completamente.",
        "b) El atributo `defer` solo se aplica a scripts ubicados en el encabezado (`<head>`) de la página.",
        "c) El atributo `defer` debe evitarse ya que ralentiza la carga de la página.",
        "d) El atributo `defer` es exclusivo para scripts externos en HTML."
      ]
    },
    {
      "id": 107,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es la importancia del atributo `lang` en la etiqueta `<html>` y cuándo se debe utilizar?",
      "answer": "El atributo `lang` en la etiqueta `<html>` se utiliza para especificar el idioma principal del contenido de la página. Es importante para la accesibilidad y la correcta interpretación del contenido por parte de los motores de búsqueda. Debe utilizarse siempre que el contenido de la página esté en un idioma diferente al predeterminado del navegador.",
      "correctAnswer": "b) El atributo `lang` se utiliza para especificar el idioma principal del contenido de la página y debe utilizarse cuando el contenido está en un idioma diferente al predeterminado del navegador.",
      "allAnswers": [
        "a) El atributo `lang` se utiliza para cambiar el color de fondo de la página en HTML.",
        "b) El atributo `lang` se utiliza para especificar el idioma principal del contenido de la página y debe utilizarse cuando el contenido está en un idioma diferente al predeterminado del navegador.",
        "c) El atributo `lang` solo es relevante para documentos PDF.",
        "d) El atributo `lang` es exclusivo para elementos de formulario en HTML."
      ]
    },
    {
      "id": 108,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `download` en la etiqueta `<a>` y cómo se utiliza correctamente.",
      "answer": "El atributo `download` en la etiqueta `<a>` se utiliza para indicar que el destino del enlace debe descargarse en lugar de navegarse. Puede contener el nombre predeterminado del archivo a descargar. Se utiliza correctamente al proporcionar un nombre de archivo válido y significativo para la descarga.",
      "correctAnswer": "a) El atributo `download` se utiliza para indicar que el destino del enlace debe descargarse en lugar de navegarse y se utiliza correctamente al proporcionar un nombre de archivo válido.",
      "allAnswers": [
        "a) El atributo `download` se utiliza para indicar que el destino del enlace debe descargarse en lugar de navegarse y se utiliza correctamente al proporcionar un nombre de archivo válido.",
        "b) El atributo `download` solo se aplica a imágenes en HTML.",
        "c) El atributo `download` no es compatible con la mayoría de los navegadores.",
        "d) El atributo `download` es exclusivo para enlaces internos en HTML."
      ]
    },
    {
      "id": 109,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es el propósito del atributo `crossorigin` en la etiqueta `<script>` y cuándo se debe utilizar?",
      "answer": "El atributo `crossorigin` en la etiqueta `<script>` se utiliza para indicar si el script debería ser ejecutado si la solicitud de recursos externos no tiene el mismo origen (origin) que la página actual. Debe utilizarse cuando se cargan scripts desde dominios externos y se requiere controlar la política de seguridad del contenido.",
      "correctAnswer": "a) El atributo `crossorigin` se utiliza para controlar si un script debe ser ejecutado si la solicitud de recursos externos no tiene el mismo origen que la página actual.",
      "allAnswers": [
        "a) El atributo `crossorigin` se utiliza para controlar si un script debe ser ejecutado si la solicitud de recursos externos no tiene el mismo origen que la página actual.",
        "b) El atributo `crossorigin` solo se aplica a scripts ubicados en el encabezado (`<head>`) de la página.",
        "c) El atributo `crossorigin` no tiene ninguna relación con scripts en HTML.",
        "d) El atributo `crossorigin` es exclusivo para la carga de imágenes en HTML."
      ]
    },
    {
      "id": 110,
      "category": "Html",
      "level": "Senior",
      "question": "Explique la diferencia entre las etiquetas `<script async>` y `<script defer>` en HTML y cuándo se debe usar cada una.",
      "answer": "Ambas etiquetas `<script async>` y `<script defer>` se utilizan para controlar la ejecución de scripts, pero difieren en el momento en que se descargan y ejecutan. `<script async>` se descarga de manera asíncrona mientras se sigue procesando la página, y se ejecuta tan pronto como esté disponible. `<script defer>` también se descarga de manera asíncrona, pero se ejecuta en orden después de que la página se haya analizado completamente. `<script defer>` es preferible cuando se necesita mantener el orden de ejecución.",
      "correctAnswer": "a) `<script async>` se descarga de manera asíncrona y se ejecuta tan pronto como esté disponible. `<script defer>` se descarga de manera asíncrona y se ejecuta en orden después de que la página se haya analizado completamente.",
      "allAnswers": [
        "a) `<script async>` se descarga de manera asíncrona y se ejecuta tan pronto como esté disponible. `<script defer>` se descarga de manera asíncrona y se ejecuta en orden después de que la página se haya analizado completamente.",
        "b) `<script async>` y `<script defer>` son idénticos y se pueden usar de manera intercambiable.",
        "c) `<script async>` y `<script defer>` solo afectan la carga de imágenes en HTML.",
        "d) `<script async>` y `<script defer>` son obsoletos y no se recomienda su uso en HTML moderno."
      ]
    },
    {
      "id": 111,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el concepto de la especificidad de CSS y cómo afecta la aplicación de estilos en HTML. Proporcione ejemplos para ilustrar su explicación.",
      "answer": "La especificidad en CSS determina qué reglas de estilo son aplicadas cuando hay conflictos. Se basa en la asignación de valores a los selectores. Cuanto más específico sea un selector, mayor será su prioridad. Por ejemplo, un selector que especifique un id (`#elemento`) tiene mayor especificidad que un selector de clase (`.clase`) o un selector de elemento (`p`). Si hay un conflicto, la regla de estilo más específica prevalecerá, incluso si está más abajo en el archivo CSS.",
      "correctAnswer": "a) La especificidad en CSS determina qué reglas de estilo son aplicadas cuando hay conflictos. Cuanto más específico sea un selector, mayor será su prioridad.",
      "allAnswers": [
        "a) La especificidad en CSS determina qué reglas de estilo son aplicadas cuando hay conflictos. Cuanto más específico sea un selector, mayor será su prioridad.",
        "b) Todos los selectores en CSS tienen la misma prioridad y se aplican en el orden en que aparecen en el archivo.",
        "c) La especificidad solo se aplica a los selectores de clase y no a otros tipos de selectores.",
        "d) La especificidad no tiene impacto en la aplicación de estilos en HTML; es un concepto exclusivo de CSS."
      ]
    },
    {
      "id": 112,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `loading` en la etiqueta `<img>` en HTML y cómo puede mejorar el rendimiento de una página web.",
      "answer": "El atributo `loading` en la etiqueta `<img>` se utiliza para controlar cómo se carga la imagen. Puede tener tres valores: `eager` (carga la imagen inmediatamente), `lazy` (carga la imagen cuando está cerca del área visible) y `auto` (se comporta según la configuración predeterminada del navegador). Usar `loading='lazy'` en imágenes no esenciales puede mejorar el rendimiento al diferir su carga hasta que sea necesario, reduciendo así el tiempo de carga inicial de la página.",
      "correctAnswer": "a) El atributo `loading` en la etiqueta `<img>` se utiliza para controlar cómo se carga la imagen y puede mejorar el rendimiento al diferir la carga de imágenes no esenciales.",
      "allAnswers": [
        "a) El atributo `loading` en la etiqueta `<img>` se utiliza para controlar cómo se carga la imagen y puede mejorar el rendimiento al diferir la carga de imágenes no esenciales.",
        "b) El atributo `loading` solo se aplica a imágenes en formato GIF en HTML.",
        "c) El atributo `loading` es obsoleto y no se recomienda su uso en HTML5.",
        "d) El atributo `loading` solo afecta la presentación visual de la imagen y no tiene impacto en el rendimiento de la página."
      ]
    },
    {
      "id": 113,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `contenteditable` en HTML y cómo se puede utilizar para hacer un elemento editable por el usuario.",
      "answer": "El atributo `contenteditable` se utiliza para hacer que un elemento HTML sea editable por el usuario. Puede aplicarse a elementos como `<div>`, `<p>` o cualquier otro elemento que contenga texto. Cuando se establece como `contenteditable='true'`, el usuario puede editar el contenido del elemento directamente en la página. Esto es útil para crear áreas de texto editables, editores de texto enriquecido y otras aplicaciones interactivas.",
      "correctAnswer": "a) El atributo `contenteditable` se utiliza para hacer que un elemento HTML sea editable por el usuario.",
      "allAnswers": [
        "a) El atributo `contenteditable` se utiliza para hacer que un elemento HTML sea editable por el usuario.",
        "b) `contenteditable` solo se aplica a elementos de formulario en HTML.",
        "c) `contenteditable` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `contenteditable` solo afecta la presentación visual del elemento y no su capacidad de edición."
      ]
    },
    {
      "id": 114,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del elemento `<template>` en HTML y cómo se puede utilizar para crear contenido clonable en una página web.",
      "answer": "El elemento `<template>` se utiliza para contener fragmentos de contenido que no deben ser renderizados cuando la página carga, pero que pueden ser clonados y activados con scripts. Esto es útil para situaciones en las que se desea crear elementos dinámicamente mediante JavaScript sin incluirlos directamente en el HTML visible. Por ejemplo, se puede usar para clonar y agregar múltiples elementos idénticos a través de scripts.",
      "correctAnswer": "a) El elemento `<template>` se utiliza para contener fragmentos de contenido que pueden ser clonados y activados con scripts.",
      "allAnswers": [
        "a) El elemento `<template>` se utiliza para contener fragmentos de contenido que pueden ser clonados y activados con scripts.",
        "b) `<template>` solo se aplica a elementos de formulario en HTML.",
        "c) `<template>` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `<template>` solo afecta la presentación visual del contenido y no su capacidad de clonación."
      ]
    },
    {
      "id": 115,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `aria-label` en HTML y cómo puede mejorar la accesibilidad en elementos que no tienen un texto visible.",
      "answer": "El atributo `aria-label` se utiliza para proporcionar una etiqueta descriptiva para elementos que no tienen un texto visible. Esto es crucial para mejorar la accesibilidad, ya que permite a las tecnologías de asistencia, como lectores de pantalla, proporcionar información significativa sobre el propósito o función del elemento. Por ejemplo, se puede usar `aria-label` en un icono sin texto para describir su función a usuarios con discapacidades visuales.",
      "correctAnswer": "a) El atributo `aria-label` se utiliza para proporcionar una etiqueta descriptiva para elementos que no tienen un texto visible, mejorando la accesibilidad.",
      "allAnswers": [
        "a) El atributo `aria-label` se utiliza para proporcionar una etiqueta descriptiva para elementos que no tienen un texto visible, mejorando la accesibilidad.",
        "b) `aria-label` solo se aplica a elementos de formulario en HTML.",
        "c) `aria-label` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `aria-label` solo afecta la presentación visual del elemento y no tiene impacto en la accesibilidad."
      ]
    },
    {
      "id": 116,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `autocomplete` en los elementos de formulario en HTML y cómo puede afectar la experiencia del usuario.",
      "answer": "El atributo `autocomplete` se utiliza para controlar si un navegador debe completar automáticamente los campos de un formulario basándose en el historial del usuario. Puede tener valores como `on` (permitir la autocompletar), `off` (deshabilitar la autocompletar) y otros valores específicos para campos individuales. Utilizar `autocomplete='off'` en campos sensibles, como contraseñas, puede mejorar la seguridad al prevenir la autocompletar no deseada de información confidencial.",
      "correctAnswer": "a) El atributo `autocomplete` en los elementos de formulario se utiliza para controlar si un navegador debe completar automáticamente los campos del formulario, afectando la experiencia del usuario.",
      "allAnswers": [
        "a) El atributo `autocomplete` en los elementos de formulario se utiliza para controlar si un navegador debe completar automáticamente los campos del formulario, afectando la experiencia del usuario.",
        "b) `autocomplete` solo se aplica a campos de entrada de tipo texto en HTML.",
        "c) `autocomplete` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `autocomplete` solo afecta la presentación visual del formulario y no su funcionalidad."
      ]
    },
    {
      "id": 117,
      "category": "Html",
      "level": "Senior",
      "question": "Explique la importancia y el propósito del atributo `role='main'` en HTML y cómo puede mejorar la accesibilidad.",
      "answer": "El atributo `role='main'` se utiliza para identificar el contenido principal de una página web. Esto es crucial para mejorar la accesibilidad, ya que proporciona una indicación clara a las tecnologías de asistencia sobre dónde se encuentra el contenido principal. Esto facilita a los usuarios con discapacidades navegar y entender la estructura de la página, especialmente en documentos HTML extensos con múltiples secciones.",
      "correctAnswer": "a) El atributo `role='main'` se utiliza para identificar el contenido principal de una página web, mejorando la accesibilidad.",
      "allAnswers": [
        "a) El atributo `role='main'` se utiliza para identificar el contenido principal de una página web, mejorando la accesibilidad.",
        "b) `role='main'` solo se aplica a elementos de formulario en HTML.",
        "c) `role='main'` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `role='main'` solo afecta la presentación visual de la página y no tiene impacto en la accesibilidad."
      ]
    },
    {
      "id": 118,
      "category": "Html",
      "level": "Senior",
      "question": "Explique el propósito del atributo `sandbox` en la etiqueta `<iframe>` en HTML y cómo puede ser utilizado para mejorar la seguridad de una página web.",
      "answer": "El atributo `sandbox` en la etiqueta `<iframe>` se utiliza para aplicar un entorno de ejecución restringido al contenido dentro del iframe. Esto mejora la seguridad al prevenir que el contenido dentro del iframe realice acciones potencialmente peligrosas, como ejecutar scripts, abrir ventanas emergentes o enviar formularios. Al establecer `sandbox` con valores específicos, se puede personalizar el nivel de restricciones aplicadas al contenido del iframe.",
      "correctAnswer": "a) El atributo `sandbox` en la etiqueta `<iframe>` se utiliza para aplicar un entorno de ejecución restringido al contenido dentro del iframe, mejorando la seguridad de la página web.",
      "allAnswers": [
        "a) El atributo `sandbox` en la etiqueta `<iframe>` se utiliza para aplicar un entorno de ejecución restringido al contenido dentro del iframe, mejorando la seguridad de la página web.",
        "b) `sandbox` solo se aplica a elementos de formulario en HTML.",
        "c) `sandbox` es obsoleto y no se recomienda su uso en HTML5.",
        "d) `sandbox` solo afecta la presentación visual del iframe y no tiene impacto en la seguridad de la página."
      ]
    },
    {
      "id": 119,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es el propósito de la etiqueta `<picture>` en HTML y cómo se utiliza para proporcionar imágenes responsivas?",
      "answer": "La etiqueta `<picture>` en HTML se utiliza para proporcionar diferentes versiones de una imagen para diferentes tamaños de pantalla y resoluciones. Se combina con las etiquetas `<source>` y `<img>` para ofrecer imágenes responsivas que se adaptan a las características del dispositivo del usuario.",
      "correctAnswer": "a) Proporcionar diferentes versiones de una imagen para diferentes tamaños de pantalla y resoluciones.",
      "allAnswers": [
        "a) Proporcionar diferentes versiones de una imagen para diferentes tamaños de pantalla y resoluciones.",
        "b) Insertar una imagen en una página HTML.",
        "c) Definir un área de mapa interactivo en una imagen en HTML.",
        "d) Proporcionar una descripción de la imagen para accesibilidad."
      ]
    },
    {
      "id": 120,
      "category": "Html",
      "level": "Senior",
      "question": "Explica el concepto de 'Web Components' en HTML y cómo se pueden utilizar para crear componentes reutilizables.",
      "answer": "'Web Components' en HTML son un conjunto de tecnologías que permiten la creación de componentes reutilizables. Incluyen elementos personalizados, sombra DOM y plantillas HTML. Pueden encapsular estilos y lógica, facilitando el desarrollo y mantenimiento de aplicaciones web.",
      "correctAnswer": "c) 'Web Components' en HTML son un conjunto de tecnologías que permiten la creación de componentes reutilizables.",
      "allAnswers": [
        "a) Para solicitar recursos adicionales en una página web.",
        "b) Una técnica para almacenar datos en el cliente de manera persistente.",
        "c) 'Web Components' en HTML son un conjunto de tecnologías que permiten la creación de componentes reutilizables.",
        "d) Un protocolo de transferencia de archivos en el servidor web."
      ]
    },
    {
      "id": 121,
      "category": "Css",
      "level": "Junior",
      "question": "Explique en qué se diferencia un selector de clase de CSS de un selector id",
      "answer": "Un selector de clase en CSS se denota con un punto (por ejemplo, '.mi-clase') y puede aplicarse a múltiples elementos en tu HTML. Múltiples elementos pueden compartir la misma clase y tener estilos similares. Un selector de ID en CSS se denota con un símbolo de almohadilla o numeral (por ejemplo, '#mi-id') y debe ser único en todo tu documento HTML. Solo un elemento puede tener un ID específico, y se utiliza cuando deseas aplicar estilos o manipular ese elemento en particular.",
      "correctAnswer": "a) Un selector de clase en CSS se denota con un punto (por ejemplo, '.mi-clase') y puede aplicarse a múltiples elementos en tu HTML. Múltiples elementos pueden compartir la misma clase y tener estilos similares. Un selector de ID en CSS se denota con un símbolo de almohadilla o numeral (por ejemplo, '#mi-id') y debe ser único en todo tu documento HTML. Solo un elemento puede tener un ID específico, y se utiliza cuando deseas aplicar estilos o manipular ese elemento en particular.",
      "allAnswers": [
        "a) Un selector de clase en CSS se denota con un punto (por ejemplo, '.mi-clase') y puede aplicarse a múltiples elementos en tu HTML. Múltiples elementos pueden compartir la misma clase y tener estilos similares.",
        "b) Un selector de clase en CSS se denota con un símbolo de almohadilla (por ejemplo, '#mi-clase') y puede aplicarse a múltiples elementos.",
        "c) Los selectores de clase y ID son lo mismo en CSS.",
        "d) Un selector de ID en CSS se denota con un punto (por ejemplo, '.mi-id') y puede aplicarse a múltiples elementos en tu HTML. Múltiples elementos pueden compartir el mismo ID y tener estilos similares."
      ]
    },
    {
      "id": 122,
      "category": "Css",
      "level": "Junior",
      "question": "Explica la diferencia entre 'position: relative' y 'position: absolute' en CSS.",
      "answer": "La propiedad 'position: relative' en CSS posiciona un elemento en relación con su posición normal. Puedes desplazar el elemento utilizando las propiedades top, right, bottom, y left. Importante destacar que, a pesar de moverse, el espacio ocupado por el elemento en el flujo normal del documento se mantiene. Por otro lado, 'position: absolute' posiciona un elemento en relación con el primer ancestro posicionado (con 'position: relative', 'position: absolute', o 'position: fixed'). Si no hay un ancestro posicionado, se posicionará en relación con el documento HTML. Los elementos con 'position: absolute' son eliminados del flujo normal del documento, por lo que no afectan al diseño original y pueden superponerse a otros elementos.",
      "correctAnswer": "c) La propiedad 'position: relative' en CSS posiciona un elemento en relación con su posición normal. Puedes desplazar el elemento utilizando las propiedades top, right, bottom, y left. Importante destacar que, a pesar de moverse, el espacio ocupado por el elemento en el flujo normal del documento se mantiene. Por otro lado, 'position: absolute' posiciona un elemento en relación con el primer ancestro posicionado (con 'position: relative', 'position: absolute', o 'position: fixed'). Si no hay un ancestro posicionado, se posicionará en relación con el documento HTML. Los elementos con 'position: absolute' son eliminados del flujo normal del documento, por lo que no afectan al diseño original y pueden superponerse a otros elementos.",
      "allAnswers": [
        "a) 'position: relative' y 'position: absolute' son idénticos y pueden usarse de manera intercambiable en cualquier contexto.",
        "b) 'position: relative' y 'position: absolute' no tienen diferencias; ambos colocan un elemento en la misma posición en la página.",
        "c) 'position: relative' en CSS posiciona un elemento en relación con su posición normal. 'position: absolute' posiciona un elemento en relación con el primer ancestro posicionado (con 'position: relative', 'position: absolute', o 'position: fixed'). Si no hay un ancestro posicionado, se posicionará en relación con el documento HTML. Los elementos con 'position: absolute' son eliminados del flujo normal del documento, por lo que no afectan al diseño original y pueden superponerse a otros elementos.",
        "d) 'position: relative' solo puede usarse en elementos inline, mientras que 'position: absolute' solo puede usarse en elementos block."
      ]
    },    
    {
      "id": 123,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es un selector de tipo en CSS?",
      "answer": "Un selector de tipo en CSS selecciona todos los elementos de un tipo específico en tu HTML. Por ejemplo, 'p' seleccionaría todos los párrafos en tu página y les aplicaría estilos.",
      "correctAnswer": "b) Un selector de tipo en CSS selecciona todos los elementos de un tipo específico en tu HTML. Por ejemplo, 'p' seleccionaría todos los párrafos en tu página y les aplicaría estilos.",
      "allAnswers": [
        "a) Para solicitar recursos adicionales en una página web.",
        "b) Un selector de tipo en CSS selecciona todos los elementos de un tipo específico en tu HTML. Por ejemplo, 'p' seleccionaría todos los párrafos en tu página y les aplicaría estilos.",
        "c) Una técnica para almacenar datos en el cliente de manera persistente.",        
        "d) Un protocolo de transferencia de archivos en el servidor web."
      ]
    },
    {
      "id": 124,
      "category": "Css",
      "level": "Junior",
      "question": "En CSS, ¿qué significa el término 'cascading' y cómo influye en la aplicación de estilos?",
      "answer": "En CSS, 'cascading' se refiere a la forma en que se aplican y priorizan los estilos. La cascada determina cómo los estilos se heredan y sobrescriben entre los diferentes niveles, como el estilo del elemento, las hojas de estilo externas e internas, así como los estilos del usuario. Los estilos más específicos y cercanos al elemento tienen mayor prioridad en la cascada.",
      "correctAnswer": "c) En CSS, 'cascading' se refiere a la forma en que se aplican y priorizan los estilos. La cascada determina cómo los estilos se heredan y sobrescriben entre los diferentes niveles, como el estilo del elemento, las hojas de estilo externas e internas, así como los estilos del usuario. Los estilos más específicos y cercanos al elemento tienen mayor prioridad en la cascada.",
      "allAnswers": [
        "a) 'Cascading' en CSS describe la animación fluida de elementos en una página web.",
        "b) Se refiere a un método para definir estructuras de datos en CSS.",
        "c) En CSS, 'cascading' se refiere a la forma en que se aplican y priorizan los estilos. La cascada determina cómo los estilos se heredan y sobrescriben entre los diferentes niveles, como el estilo del elemento, las hojas de estilo externas e internas, así como los estilos del usuario. Los estilos más específicos y cercanos al elemento tienen mayor prioridad en la cascada.",
        "d) Es un protocolo para la transmisión segura de datos en la web."
      ]
    },    
    {
      "id": 125,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es un selector de atributo en CSS y cuál es su uso común?",
      "answer": "Un selector de atributo en CSS permite seleccionar elementos HTML en función de los valores de sus atributos. Se denota utilizando corchetes (por ejemplo, 'a[href='https://www.ejemplo.com'] seleccionaría todos los enlaces con el atributo 'href' que tenga el valor 'https://www.ejemplo.com'). Es útil para aplicar estilos a elementos específicos basados en sus atributos.",
      "correctAnswer": "a) Permite seleccionar elementos HTML en función de los valores de sus atributos. Se denota utilizando corchetes.",
      "allAnswers": [
        "a) Permite seleccionar elementos HTML en función de los valores de sus atributos. Se denota utilizando corchetes.",
        "b) Se utiliza para aplicar estilos a todos los elementos de la página web.",
        "c) Solo se puede aplicar a elementos con el atributo 'id'.",
        "d) Sirve para seleccionar elementos basados en su posición en el documento."
      ]
    },    
    {
      "id": 126,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué significa el modelo de caja o 'box model' en CSS y cuáles son sus componentes?",
      "answer": "El 'box model' en CSS es un concepto fundamental que describe cómo se representa un elemento en una página web. Tiene cuatro componentes principales: el contenido (content), el padding, el borde (border) y el margen (margin). Cada uno de estos componentes afecta el tamaño y el diseño de un elemento en la página.",
      "correctAnswer": "d) Es un concepto fundamental que describe cómo se representa un elemento en una página web. Tiene cuatro componentes principales: el contenido, el padding, el borde y el margen.",
      "allAnswers": [
        "a) Define la estructura de una caja en una página web.",
        "b) Solo se aplica a elementos de tipo 'div'.",
        "c) Se utiliza exclusivamente para crear efectos de animación en CSS.",
        "d) Es un concepto fundamental que describe cómo se representa un elemento en una página web. Tiene cuatro componentes principales: el contenido, el padding, el borde y el margen."
      ]
    },    
    {
      "id": 127,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es la propiedad 'color' en CSS y cuál es su propósito?",
      "answer": "La propiedad 'color' en CSS se utiliza para especificar el color del texto en un elemento HTML. Puedes definirlo utilizando nombres de colores, códigos hexadecimales o valores RGB para personalizar la apariencia del texto.",
      "correctAnswer": "a) Es utilizada para especificar el color del texto en un elemento HTML. Puedes definirlo utilizando nombres de colores, códigos hexadecimales o valores RGB para personalizar la apariencia del texto.",
      "allAnswers": [
        "a) Es utilizada para especificar el color del texto en un elemento HTML. Puedes definirlo utilizando nombres de colores, códigos hexadecimales o valores RGB para personalizar la apariencia del texto.",
        "b) Controla el tamaño del texto en un elemento HTML.",
        "c) Define la fuente del texto en una página web.",
        "d) Determina el espaciado entre las letras de un texto."
      ]
    },    
    {
      "id": 128,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es el 'box-sizing' en CSS y cómo afecta al modelo de caja?",
      "answer": "El 'box-sizing' en CSS es una propiedad que determina cómo se calcula el tamaño total de un elemento, incluyendo su contenido, padding y borde. Puede tener dos valores principales: 'content-box' (el tamaño se calcula excluyendo el padding y el borde) y 'border-box' (el tamaño incluye el padding y el borde en el cálculo). Esta propiedad afecta directamente al modelo de caja y cómo se representan los elementos en la página.",
      "correctAnswer": "c) Determina cómo se calcula el tamaño total de un elemento, incluyendo su contenido, padding y borde. Puede tener dos valores principales: 'content-box' y 'border-box'.",
      "allAnswers": [
        "a) Es una propiedad que define el color del borde de un elemento.",
        "b) Se utiliza para establecer el espaciado interno de un elemento.",
        "c) Determina cómo se calcula el tamaño total de un elemento, incluyendo su contenido, padding y borde. Puede tener dos valores principales: 'content-box' y 'border-box'.",
        "d) Controla el tamaño del elemento en la página."
      ]
    },    
    {
      "id": 129,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es el 'float' en CSS y cuál es su propósito?",
      "answer": "El 'float' en CSS es una propiedad que se utiliza para colocar elementos en una página web a la izquierda o la derecha de su contenedor. Esto permite que otros elementos fluyan alrededor de él. Es comúnmente utilizado para crear diseños de columnas y diseños de página más complejos.",
      "correctAnswer": "b) Se utiliza para colocar elementos en una página web a la izquierda o la derecha de su contenedor, permitiendo que otros elementos fluyan alrededor de él. Es comúnmente utilizado para crear diseños de columnas y diseños de página más complejos.",
      "allAnswers": [
        "a) Define el tamaño del texto en un elemento HTML.",
        "b) Se utiliza para colocar elementos en una página web a la izquierda o la derecha de su contenedor, permitiendo que otros elementos fluyan alrededor de él. Es comúnmente utilizado para crear diseños de columnas y diseños de página más complejos.",
        "c) Controla el espaciado interno de un elemento.",        
        "d) Determina la transparencia de un elemento en la página."
      ]
    },    
    {
      "id": 130,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es un pseudo-elemento en CSS y cuál es su sintaxis?",
      "answer": "Un pseudo-elemento en CSS es un selector que permite seleccionar partes específicas de un elemento y aplicar estilos a esas partes. Se denota utilizando dos puntos dobles '::' seguidos de un nombre (por ejemplo, '::before' o '::after'). Los pseudo-elementos se utilizan para crear contenido adicional, como elementos de lista o decoraciones, mediante CSS.",
      "correctAnswer": "d) Es un selector que permite seleccionar partes específicas de un elemento y aplicar estilos a esas partes. Se denota utilizando dos puntos dobles '::' seguidos de un nombre (por ejemplo, '::before' o '::after').",
      "allAnswers": [
        "a) Define el color de fondo de un elemento HTML.",       
        "b) Controla el espaciado interno de un elemento.",
        "c) Se utiliza para posicionar un elemento en la página.",
        "d) Es un selector que permite seleccionar partes específicas de un elemento y aplicar estilos a esas partes. Se denota utilizando dos puntos dobles '::' seguidos de un nombre (por ejemplo, '::before' o '::after')."
      ]
    },    
    {
      "id": 131,
      "category": "Css",
      "level": "Junior",
      "question": "En CSS, ¿qué hace la propiedad 'display' y cuáles son algunos de sus posibles valores?",
      "answer": "La propiedad 'display' en CSS se utiliza para controlar cómo se muestra un elemento en la página. Algunos de sus valores posibles son 'block', 'inline', 'inline-block', 'flex' y 'grid'. Cada valor afecta la disposición y el comportamiento del elemento en el diseño.",
      "correctAnswer": "b) Se utiliza para controlar cómo se muestra un elemento en la página. Algunos de sus valores posibles son 'block', 'inline', 'inline-block', 'flex' y 'grid'. Cada valor afecta la disposición y el comportamiento del elemento en el diseño.",
      "allAnswers": [
        "a) Define el tamaño del elemento en la página.",
        "b) Se utiliza para controlar cómo se muestra un elemento en la página. Algunos de sus valores posibles son 'block', 'inline', 'inline-block', 'flex' y 'grid'. Cada valor afecta la disposición y el comportamiento del elemento en el diseño.",
        "c) Determina el espaciado interno del elemento.",
        "d) Es utilizado para establecer la transparencia del elemento."
      ]
    },    
    {
      "id": 132,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cómo se comenta un bloque de código CSS?",
      "answer": "Para comentar un bloque de código CSS, puedes encerrar el comentario entre '/*' y '*/'. Todo lo que esté dentro de estos delimitadores será tratado como comentario y no afectará el estilo de la página. Esto es útil para incluir notas y explicaciones en tu código CSS.",
      "correctAnswer": "a) Encerrando el comentario entre '/*' y '*/'. Todo lo que esté dentro de estos delimitadores será tratado como comentario y no afectará el estilo de la página.",
      "allAnswers": [
        "a) Encerrando el comentario entre '/*' y '*/'. Todo lo que esté dentro de estos delimitadores será tratado como comentario y no afectará el estilo de la página.",
        "b) Utilizando el símbolo '#' al inicio de la línea.",
        "c) Colocando el comentario entre paréntesis '(' y ')'.",
        "d) Incluyendo el comentario entre corchetes '{' y '}'."
      ]
    },    
    {
      "id": 133,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es la propiedad 'background' en CSS y cuál es su función?",
      "answer": "La propiedad 'background' en CSS se utiliza para definir el fondo de un elemento HTML. Puedes establecer valores como colores de fondo, imágenes de fondo y repetición del fondo. Esta propiedad es esencial para diseñar la apariencia visual de un elemento y su entorno.",
      "correctAnswer": "b) Se utiliza para definir el fondo de un elemento HTML. Puedes establecer valores como colores de fondo, imágenes de fondo y repetición del fondo. Esta propiedad es esencial para diseñar la apariencia visual de un elemento y su entorno.",
      "allAnswers": [
        "a) Controla el tamaño del texto en un elemento HTML.",
        "b) Se utiliza para definir el fondo de un elemento HTML. Puedes establecer valores como colores de fondo, imágenes de fondo y repetición del fondo. Esta propiedad es esencial para diseñar la apariencia visual de un elemento y su entorno.",
        "c) Determina la transparencia de un elemento en la página.",
        "d) Es utilizada para posicionar un elemento en la página."
      ]
    },    
    {
      "id": 134,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre 'margin' y 'padding' en CSS?",
      "answer": "La diferencia principal entre 'margin' y 'padding' en CSS es su función y ubicación relativa en el modelo de caja. 'Margin' es el espacio exterior al borde de un elemento y afecta la distancia entre elementos adyacentes. 'Padding' es el espacio interior al borde y afecta la distancia entre el contenido del elemento y el borde. Ambos se utilizan para controlar el diseño y el espacio en una página web, pero tienen propósitos diferentes.",
      "correctAnswer": "c) 'Margin' es el espacio exterior al borde de un elemento y afecta la distancia entre elementos adyacentes. 'Padding' es el espacio interior al borde y afecta la distancia entre el contenido del elemento y el borde.",
      "allAnswers": [
        "a) 'Margin' y 'padding' son sinónimos y pueden usarse indistintamente.",
        "b) 'Margin' y 'padding' son intercambiables y se utilizan para la misma función.",
        "c) 'Margin' es el espacio exterior al borde de un elemento y afecta la distancia entre elementos adyacentes. 'Padding' es el espacio interior al borde y afecta la distancia entre el contenido del elemento y el borde.",
        "d) 'Margin' afecta el espaciado interno de un elemento, mientras que 'padding' afecta el espaciado externo."
      ]
    },    
    {
      "id": 135,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es un 'media query' en CSS y cuál es su propósito?",
      "answer": "Un 'media query' en CSS es una técnica que permite aplicar estilos diferentes a una página web en función de las características del dispositivo o la ventana del navegador. Se utiliza para crear diseños responsivos y adaptar la presentación de la página a diferentes tamaños de pantalla y dispositivos, como teléfonos móviles y tabletas.",
      "correctAnswer": "d) Una técnica que permite aplicar estilos diferentes a una página web en función de las características del dispositivo o la ventana del navegador. Se utiliza para crear diseños responsivos y adaptar la presentación de la página a diferentes tamaños de pantalla y dispositivos, como teléfonos móviles y tabletas.",
      "allAnswers": [
        "a) Un elemento HTML utilizado para organizar el contenido de una página.",
        "b) Una propiedad que define el tamaño de un elemento en la página.",
        "c) Un tipo de selector que aplica estilos a elementos específicos.",
        "d) Una técnica que permite aplicar estilos diferentes a una página web en función de las características del dispositivo o la ventana del navegador. Se utiliza para crear diseños responsivos y adaptar la presentación de la página a diferentes tamaños de pantalla y dispositivos, como teléfonos móviles y tabletas."
      ]
    },    
    {
      "id": 136,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cómo se centra un div usando CSS?",
      "answer": "Puedes centrar un 'div' horizontalmente y verticalmente utilizando CSS de varias maneras. Aquí te muestro algunas de las técnicas más comunes:\n\n1. Centrado horizontal y vertical con Flexbox (Recomendado):\n\ncss\n.contenedor {\n display: flex;\n justify-content: center; /* Centrado horizontal */\n align-items: center; /* Centrado vertical */\n height: 100vh; /* Ajusta la altura del contenedor según la ventana */\n}\n\n\nEn este ejemplo, '.contenedor' será centrado tanto horizontal como verticalmente dentro de su elemento contenedor. La propiedad 'height: 100vh' asegura que el contenedor tenga al menos el 100% de la altura de la ventana del navegador.\n\n2. Centrado horizontal y vertical con Grid:\n\ncss\n.contenedor {\n display: grid;\n place-items: center; /* Centrado horizontal y vertical */\n height: 100vh;\n}\n\n\nAl igual que con Flexbox, esta técnica también utiliza 'height: 100vh' para asegurarse de que el contenedor ocupe al menos toda la altura de la ventana.\n\n3. Centrado horizontal con margen automático:\n\ncss\n.contenedor {\n margin: 0 auto; /* Centrado horizontal */\n width: fit-content; /* Opcional: ajusta el ancho al contenido */\n}\n\n\nEsto centrará horizontalmente el 'div' dentro de su elemento contenedor, pero no lo centrará verticalmente.\n\nElige la técnica que mejor se adapte a tus necesidades y al diseño de tu sitio web. Las técnicas con Flexbox y Grid son muy versátiles y se utilizan comúnmente para diseños modernos y responsivos.",
      "correctAnswer": "d) Todas las anteriores son formas válidas de centrar un 'div' en CSS pero el recomendado es FLEXBOX:\n\n```css\n.contenedor {\n display: flex;\n justify-content: center; /* Centrado horizontal */\n align-items: center; /* Centrado vertical */\n height: 100vh; /* Ajusta la altura del contenedor según la ventana */\n}```",
      "allAnswers": [
        "a) Centrado horizontal y vertical con Flexbox (Recomendado):\n\n```css\n.contenedor {\n display: flex;\n justify-content: center; /* Centrado horizontal */\n align-items: center; /* Centrado vertical */\n height: 100vh; /* Ajusta la altura del contenedor según la ventana */\n}```",
        "b) Centrado horizontal y vertical con Grid:\n\n```css\n.contenedor {\n display: grid;\n place-items: center; /* Centrado horizontal y vertical */\n height: 100vh;\n}```",
        "c) Centrado horizontal con margen automático:\n\n```css\n.contenedor {\n margin: 0 auto; /* Centrado horizontal */\n width: fit-content; /* Opcional: ajusta el ancho al contenido */\n}```",
        "d) Todas las anteriores son formas válidas de centrar un 'div' en CSS."
      ]
    },    
    {
      "id": 137,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cómo se enlazan el CSS con HTML?",
      "answer": "Agregando una etiqueta <link> en la sección <head> del documento HTML con el atributo 'href' que apunta al archivo CSS.",
      "correctAnswer": "d) Todas las anteriores son formas válidas de aplicar estilos CSS en un documento HTML pero se recomienda la opción b",
      "allAnswers": [
        "a) Agregando estilos directamente en la sección <style> del documento HTML.",
        "b) Agregando una etiqueta <link> en la sección <head> del documento HTML con el atributo 'href' que apunta al archivo CSS.",
        "c) Incluyendo estilos en línea utilizando el atributo 'style' en las etiquetas HTML.",
        "d) Todas las anteriores son formas válidas de aplicar estilos CSS en un documento HTML."
      ]
    },    
    {
      "id": 138,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es la especificidad en CSS y cómo se resuelven los conflictos de estilos?",
      "answer": "La especificidad en CSS es un sistema que determina qué estilo se aplicará cuando existan conflictos entre reglas de estilo. Se basa en cuatro niveles de especificidad: elementos, clases y atributos, IDs y pseudo-clases/pseudo-elementos. Cuando hay conflictos, se aplica la regla con la mayor especificidad. Si la especificidad es igual, se utiliza la regla que aparece más tarde en el código CSS.",
      "correctAnswer": "c) La especificidad en CSS es un sistema que determina qué estilo se aplicará cuando existan conflictos entre reglas de estilo. Se basa en cuatro niveles de especificidad: elementos, clases y atributos, IDs y pseudo-clases/pseudo-elementos. Cuando hay conflictos, se aplica la regla con la mayor especificidad. Si la especificidad es igual, se utiliza la regla que aparece más tarde en el código CSS.",
      "allAnswers": [
        "a) La especificidad en CSS se refiere a la cantidad de estilos aplicados a un elemento.",
        "b) La especificidad en CSS es el orden en que se declaran las propiedades en una regla de estilo.",
        "c) La especificidad en CSS es un sistema que determina qué estilo se aplicará cuando existan conflictos entre reglas de estilo. Se basa en cuatro niveles de especificidad: elementos, clases y atributos, IDs y pseudo-clases/pseudo-elementos. Cuando hay conflictos, se aplica la regla con la mayor especificidad. Si la especificidad es igual, se utiliza la regla que aparece más tarde en el código CSS.",
        "d) La especificidad en CSS no afecta la resolución de conflictos entre reglas de estilo."
      ]
    },    
    {
      "id": 139,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es un selector de descendiente en CSS y cuál es su sintaxis?",
      "answer": "Un selector de descendiente en CSS permite seleccionar un elemento que es descendiente de otro elemento específico. Su sintaxis implica escribir el nombre del elemento padre seguido de un espacio y luego el nombre del elemento descendiente. Por ejemplo, 'div p' seleccionaría todos los elementos 'p' que son descendientes de un elemento 'div'.",
      "correctAnswer": "d) Un selector de descendiente en CSS permite seleccionar un elemento que es descendiente de otro elemento específico. Su sintaxis implica escribir el nombre del elemento padre seguido de un espacio y luego el nombre del elemento descendiente. Por ejemplo, 'div p' seleccionaría todos los elementos 'p' que son descendientes de un elemento 'div'.",
      "allAnswers": [
        "a) Un selector de descendiente en CSS es una forma de seleccionar elementos descendientes utilizando el operador '>' entre el elemento padre y el descendiente.",
        "b) Un selector de descendiente en CSS se utiliza para seleccionar elementos que son hijos directos de otro elemento.",
        "c) Un selector de descendiente en CSS solo se puede aplicar a elementos con la misma etiqueta.",
        "d) Un selector de descendiente en CSS permite seleccionar un elemento que es descendiente de otro elemento específico. Su sintaxis implica escribir el nombre del elemento padre seguido de un espacio y luego el nombre del elemento descendiente. Por ejemplo, 'div p' seleccionaría todos los elementos 'p' que son descendientes de un elemento 'div'."
      ]
    },    
    {
      "id": 140,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es la propiedad 'position' en CSS y cuáles son sus valores principales?",
      "answer": "La propiedad 'position' en CSS se utiliza para controlar la posición de un elemento en la página. Algunos valores principales son 'static' (posición normal de flujo), 'relative' (posición relativa al lugar que ocuparía en el flujo normal), 'absolute' (posición relativa al elemento posicionado más cercano) y 'fixed' (posición fija en relación con la ventana del navegador). Esta propiedad es fundamental para el diseño de diseño y la ubicación de elementos en la página.",
      "correctAnswer": "c) La propiedad 'position' en CSS se utiliza para controlar la posición de un elemento en la página. Algunos valores principales son 'static' (posición normal de flujo), 'relative' (posición relativa al lugar que ocuparía en el flujo normal), 'absolute' (posición relativa al elemento posicionado más cercano) y 'fixed' (posición fija en relación con la ventana del navegador). Esta propiedad es fundamental para el diseño de diseño y la ubicación de elementos en la página.",
      "allAnswers": [
        "a) La propiedad 'position' en CSS solo tiene dos valores: 'relative' y 'absolute'.",
        "b) La propiedad 'position' en CSS se utiliza solo para elementos flotantes.",
        "c) La propiedad 'position' en CSS se utiliza para controlar la posición de un elemento en la página. Algunos valores principales son 'static' (posición normal de flujo), 'relative' (posición relativa al lugar que ocuparía en el flujo normal), 'absolute' (posición relativa al elemento posicionado más cercano) y 'fixed' (posición fija en relación con la ventana del navegador). Esta propiedad es fundamental para el diseño de diseño y la ubicación de elementos en la página.",
        "d) La propiedad 'position' en CSS solo se aplica a elementos con una clase específica."
      ]
    },    
    {
      "id": 141,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es el concepto de 'z-index' en CSS y cómo se utiliza?",
      "answer": "El concepto de 'z-index' en CSS se utiliza para controlar la superposición de elementos en una página. Cada elemento tiene una posición en el eje Z, que determina su profundidad en relación con otros elementos. Un valor mayor de 'z-index' coloca un elemento por encima de otros con un valor menor. Es útil para controlar la superposición de elementos como ventanas emergentes o menús desplegables.",
      "correctAnswer": "c) El concepto de 'z-index' en CSS se utiliza para controlar la superposición de elementos en una página. Cada elemento tiene una posición en el eje Z, que determina su profundidad en relación con otros elementos. Un valor mayor de 'z-index' coloca un elemento por encima de otros con un valor menor. Es útil para controlar la superposición de elementos como ventanas emergentes o menús desplegables.",
      "allAnswers": [
        "a) 'z-index' en CSS solo se utiliza para cambiar el tamaño de texto en una página.",
        "b) 'z-index' en CSS solo se aplica a elementos con posición 'absolute'.",
        "c) El concepto de 'z-index' en CSS se utiliza para controlar la superposición de elementos en una página. Cada elemento tiene una posición en el eje Z, que determina su profundidad en relación con otros elementos. Un valor mayor de 'z-index' coloca un elemento por encima de otros con un valor menor. Es útil para controlar la superposición de elementos como ventanas emergentes o menús desplegables.",
        "d) 'z-index' en CSS solo afecta la transparencia de los elementos."
      ]
    },    
    {
      "id": 142,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es un 'sprite' en CSS y cuál es su ventaja?",
      "answer": "Un 'sprite' en CSS es una imagen que contiene múltiples elementos gráficos (como iconos o botones) combinados en una sola imagen. La ventaja de utilizar sprites es reducir la carga de recursos al cargar una sola imagen en lugar de varias. Esto mejora el rendimiento de la página al reducir el número de solicitudes al servidor y acelerar la carga de la página.",
      "correctAnswer": "c) Un 'sprite' en CSS es una imagen que contiene múltiples elementos gráficos (como iconos o botones) combinados en una sola imagen. La ventaja de utilizar sprites es reducir la carga de recursos al cargar una sola imagen en lugar de varias. Esto mejora el rendimiento de la página al reducir el número de solicitudes al servidor y acelerar la carga de la página.",
      "allAnswers": [
        "a) Un 'sprite' en CSS es un tipo de posición que se aplica a elementos de página.",
        "b) Un 'sprite' en CSS es un efecto de animación aplicado a texto.",
        "c) Un 'sprite' en CSS es una imagen que contiene múltiples elementos gráficos (como iconos o botones) combinados en una sola imagen. La ventaja de utilizar sprites es reducir la carga de recursos al cargar una sola imagen en lugar de varias. Esto mejora el rendimiento de la página al reducir el número de solicitudes al servidor y acelerar la carga de la página.",
        "d) Un 'sprite' en CSS es una técnica para aplicar sombras a elementos de la página."
      ]
    },    
    {
      "id": 143,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es el 'box-shadow' en CSS y cómo se utiliza para agregar sombras a elementos?",
      "answer": "El 'box-shadow' en CSS es una propiedad que permite agregar sombras a elementos en la página. Se utiliza especificando valores para la sombra en términos de desplazamiento horizontal, desplazamiento vertical, desenfoque, propagación y color. Esta propiedad es útil para crear efectos de profundidad y realismo en elementos como cajas y botones.",
      "correctAnswer": "d) El 'box-shadow' en CSS es una propiedad que permite agregar sombras a elementos en la página. Se utiliza especificando valores para la sombra en términos de desplazamiento horizontal, desplazamiento vertical, desenfoque, propagación y color. Esta propiedad es útil para crear efectos de profundidad y realismo en elementos como cajas y botones.",
      "allAnswers": [
        "a) 'box-shadow' en CSS es una propiedad para cambiar el tamaño de las cajas en la página.",
        "b) 'box-shadow' en CSS es una propiedad para aplicar bordes redondeados a elementos.",
        "c) 'box-shadow' en CSS es una propiedad para cambiar el color de fondo de un elemento.",
        "d) El 'box-shadow' en CSS es una propiedad que permite agregar sombras a elementos en la página. Se utiliza especificando valores para la sombra en términos de desplazamiento horizontal, desplazamiento vertical, desenfoque, propagación y color. Esta propiedad es útil para crear efectos de profundidad y realismo en elementos como cajas y botones."       
      ]
    },    
    {
      "id": 144,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es 'flexbox' en CSS y cuál es su propósito?",
      "answer": "El 'flexbox' en CSS es un modelo de diseño que se utiliza para crear diseños flexibles y alineados en una sola dirección (ya sea horizontal o vertical). Permite que los elementos se distribuyan automáticamente en el espacio disponible, lo que facilita la creación de diseños responsivos y complejos. Es especialmente útil para la alineación y distribución de elementos en contenedores.",
      "correctAnswer": "a) El 'flexbox' en CSS es un modelo de diseño que se utiliza para crear diseños flexibles y alineados en una sola dirección (ya sea horizontal o vertical). Permite que los elementos se distribuyan automáticamente en el espacio disponible, lo que facilita la creación de diseños responsivos y complejos. Es especialmente útil para la alineación y distribución de elementos en contenedores.",
      "allAnswers": [
        "a) El 'flexbox' en CSS es un modelo de diseño que se utiliza para crear diseños flexibles y alineados en una sola dirección (ya sea horizontal o vertical). Permite que los elementos se distribuyan automáticamente en el espacio disponible, lo que facilita la creación de diseños responsivos y complejos. Es especialmente útil para la alineación y distribución de elementos en contenedores.",
        "b) 'Flexbox' en CSS es una propiedad para cambiar el tamaño de las cajas en la página.",
        "c) 'Flexbox' en CSS es una propiedad para aplicar bordes redondeados a elementos.",        
        "d) 'Flexbox' en CSS es una propiedad para cambiar el color de fondo de un elemento."
      ]
    },    
    {
      "id": 145,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es el 'grid layout' en CSS y cuál es su ventaja?",
      "answer": "El 'grid layout' en CSS es un sistema de diseño bidimensional que permite crear diseños complejos y alineados en filas y columnas. Permite dividir el diseño de una página en una cuadrícula y colocar elementos en celdas específicas de esa cuadrícula. La ventaja del 'grid layout' es su capacidad para crear diseños complejos con facilidad, controlar la disposición de elementos y lograr diseños adaptables (responsivos) y equilibrados.",
      "correctAnswer": "c) El 'grid layout' en CSS es un sistema de diseño bidimensional que permite crear diseños complejos y alineados en filas y columnas. Permite dividir el diseño de una página en una cuadrícula y colocar elementos en celdas específicas de esa cuadrícula. La ventaja del 'grid layout' es su capacidad para crear diseños complejos con facilidad, controlar la disposición de elementos y lograr diseños adaptables (responsivos) y equilibrados.",
      "allAnswers": [
        "a) 'Grid layout' en CSS es una propiedad para cambiar el tamaño de las cajas en la página.",
        "b) 'Grid layout' en CSS es una propiedad para aplicar bordes redondeados a elementos.",
        "c) El 'grid layout' en CSS es un sistema de diseño bidimensional que permite crear diseños complejos y alineados en filas y columnas. Permite dividir el diseño de una página en una cuadrícula y colocar elementos en celdas específicas de esa cuadrícula. La ventaja del 'grid layout' es su capacidad para crear diseños complejos con facilidad, controlar la disposición de elementos y lograr diseños adaptables (responsivos) y equilibrados.",
        "d) 'Grid layout' en CSS es una propiedad para cambiar el color de fondo de un elemento."
      ]
    },    
    {
      "id": 146,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué son las animaciones CSS y cómo se definen?",
      "answer": "Las animaciones CSS son una forma de agregar efectos de animación a elementos HTML utilizando solo CSS, sin necesidad de JavaScript ni Flash. Se definen utilizando la propiedad 'animation' y se pueden personalizar con duración, temporización y otros valores. Las animaciones CSS son útiles para crear efectos de transición suaves y atractivos en elementos como botones y elementos de navegación.",
      "correctAnswer": "d) Las animaciones CSS son una forma de agregar efectos de animación a elementos HTML utilizando solo CSS, sin necesidad de JavaScript ni Flash. Se definen utilizando la propiedad 'animation' y se pueden personalizar con duración, temporización y otros valores. Las animaciones CSS son útiles para crear efectos de transición suaves y atractivos en elementos como botones y elementos de navegación.",
      "allAnswers": [
        "a) Las animaciones CSS son una función exclusiva de JavaScript para agregar efectos de animación.",
        "b) Las animaciones CSS son una propiedad de Flash para crear efectos visuales en una página web.",
        "c) Las animaciones CSS son una propiedad de jQuery para mejorar la interactividad en sitios web.",   
        "d) Las animaciones CSS son una forma de agregar efectos de animación a elementos HTML utilizando solo CSS, sin necesidad de JavaScript ni Flash. Se definen utilizando la propiedad 'animation' y se pueden personalizar con duración, temporización y otros valores. Las animaciones CSS son útiles para crear efectos de transición suaves y atractivos en elementos como botones y elementos de navegación."
      ]
    },    
    {
      "id": 147,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es el 'gradients' en CSS y cómo se crea un fondo degradado?",
      "answer": "Los 'gradients' en CSS son una técnica que permite crear fondos degradados, es decir, fondos que cambian gradualmente de un color a otro o de un color a la transparencia. Para crear un fondo degradado, se utiliza la propiedad 'background-image' con el valor 'linear-gradient' o 'radial-gradient'. Puedes especificar los colores y la dirección del degradado para personalizar el efecto.",
      "correctAnswer": "c) Los 'gradients' en CSS son una técnica que permite crear fondos degradados, es decir, fondos que cambian gradualmente de un color a otro o de un color a la transparencia. Para crear un fondo degradado, se utiliza la propiedad 'background-image' con el valor 'linear-gradient' o 'radial-gradient'. Puedes especificar los colores y la dirección del degradado para personalizar el efecto.",
      "allAnswers": [
        "a) Los 'gradients' en CSS son una propiedad para aplicar bordes degradados a los elementos HTML.",
        "b) Los 'gradients' en CSS son una técnica exclusiva de JavaScript para cambiar dinámicamente el color de fondo de un elemento.",
        "c) Los 'gradients' en CSS son una técnica que permite crear fondos degradados, es decir, fondos que cambian gradualmente de un color a otro o de un color a la transparencia. Para crear un fondo degradado, se utiliza la propiedad 'background-image' con el valor 'linear-gradient' o 'radial-gradient'. Puedes especificar los colores y la dirección del degradado para personalizar el efecto.",
        "d) Los 'gradients' en CSS son una propiedad de jQuery para crear efectos visuales en el fondo de una página web."
      ]
    },    
    {
      "id": 148,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'transform' en CSS y cuál es su función?",
      "answer": "El 'transform' en CSS es una propiedad que permite aplicar transformaciones geométricas a elementos HTML. Puedes utilizar 'transform' para realizar rotaciones, escalas, sesgos, translaciones y más. Esta propiedad es especialmente útil para crear efectos de animación y manipular la apariencia de elementos en una página web.",
      "correctAnswer": "d) El 'transform' en CSS es una propiedad que permite aplicar transformaciones geométricas a elementos HTML. Puedes utilizar 'transform' para realizar rotaciones, escalas, sesgos, translaciones y más. Esta propiedad es especialmente útil para crear efectos de animación y manipular la apariencia de elementos en una página web.",
      "allAnswers": [
        "a) El 'transform' en CSS es una propiedad exclusiva de JavaScript para manipular elementos HTML.",
        "b) El 'transform' en CSS es una técnica para aplicar filtros de imágenes a elementos HTML.",
        "c) El 'transform' en CSS es una propiedad obsoleta que ya no se utiliza en el desarrollo web moderno.",
        "d) El 'transform' en CSS es una propiedad que permite aplicar transformaciones geométricas a elementos HTML. Puedes utilizar 'transform' para realizar rotaciones, escalas, sesgos, translaciones y más. Esta propiedad es especialmente útil para crear efectos de animación y manipular la apariencia de elementos en una página web."    
      ]
    },
    {
      "id": 149,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'viewport' en CSS y cómo se relaciona con el diseño web responsivo?",
      "answer": "El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el contexto del diseño web responsivo, es fundamental controlar cómo se ajusta y adapta el contenido al tamaño del viewport. Se utiliza la etiqueta 'meta' con el atributo 'viewport' en HTML para definir las propiedades del viewport, como el ancho y la escala. Esto permite que el diseño de la página se adapte a diferentes tamaños de pantalla y dispositivos.",
      "correctAnswer": "a) El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el contexto del diseño web responsivo, es fundamental controlar cómo se ajusta y adapta el contenido al tamaño del viewport. Se utiliza la etiqueta 'meta' con el atributo 'viewport' en HTML para definir las propiedades del viewport, como el ancho y la escala. Esto permite que el diseño de la página se adapte a diferentes tamaños de pantalla y dispositivos.",
      "allAnswers": [       
        "a) El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el contexto del diseño web responsivo, es fundamental controlar cómo se ajusta y adapta el contenido al tamaño del viewport. Se utiliza la etiqueta 'meta' con el atributo 'viewport' en HTML para definir las propiedades del viewport, como el ancho y la escala. Esto permite que el diseño de la página se adapte a diferentes tamaños de pantalla y dispositivos.",
        "b) El 'viewport' en CSS es una propiedad que define la resolución de la pantalla en píxeles.",
        "c) El 'viewport' en CSS es una técnica para ocultar elementos en dispositivos móviles.",
        "d) El 'viewport' en CSS es una propiedad obsoleta que ya no se utiliza en el desarrollo web moderno."
      ]
    },    
    {
      "id": 150,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué son las variables CSS (variables personalizadas) y cómo se declaran?",
      "answer": "Las variables CSS, también conocidas como variables personalizadas, son nombres simbólicos que representan valores en hojas de estilo CSS. Se declaran utilizando la propiedad '--nombre-variable' y se pueden utilizar para almacenar colores, tamaños, márgenes y otros valores. Para utilizar una variable, se utiliza la función 'var(--nombre-variable)' en cualquier propiedad CSS que desees. Las variables CSS son útiles para mantener un código más limpio y reutilizable.",
      "correctAnswer": "c) Las variables CSS, también conocidas como variables personalizadas, son nombres simbólicos que representan valores en hojas de estilo CSS. Se declaran utilizando la propiedad '--nombre-variable' y se pueden utilizar para almacenar colores, tamaños, márgenes y otros valores. Para utilizar una variable, se utiliza la función 'var(--nombre-variable)' en cualquier propiedad CSS que desees. Las variables CSS son útiles para mantener un código más limpio y reutilizable.",
      "allAnswers": [
        "a) Las variables CSS son bloques de código que almacenan información reutilizable en el estilo.",
        "b) Las variables CSS son una forma de almacenar datos en el navegador del usuario.",
        "c) Las variables CSS, también conocidas como variables personalizadas, son nombres simbólicos que representan valores en hojas de estilo CSS. Se declaran utilizando la propiedad '--nombre-variable' y se pueden utilizar para almacenar colores, tamaños, márgenes y otros valores. Para utilizar una variable, se utiliza la función 'var(--nombre-variable)' en cualquier propiedad CSS que desees. Las variables CSS son útiles para mantener un código más limpio y reutilizable.",
        "d) Las variables CSS son solo aplicables a elementos HTML y no se pueden utilizar en estilos globales."
      ]
    },    
    {
      "id": 151,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué son las transiciones CSS y cómo se utilizan?",
      "answer": "Las transiciones CSS permiten controlar cómo se cambian gradualmente los estilos de un elemento en respuesta a eventos como el paso del cursor del mouse sobre el elemento. Se definen utilizando la propiedad 'transition' y se especifican los estilos que deben cambiar y la duración de la transición. Las transiciones CSS son útiles para crear efectos suaves, como cambios de color o movimiento, sin necesidad de JavaScript.",
      "correctAnswer": "b) Las transiciones CSS permiten controlar cómo se cambian gradualmente los estilos de un elemento en respuesta a eventos como el paso del cursor del mouse sobre el elemento. Se definen utilizando la propiedad 'transition' y se especifican los estilos que deben cambiar y la duración de la transición. Las transiciones CSS son útiles para crear efectos suaves, como cambios de color o movimiento, sin necesidad de JavaScript.",
      "allAnswers": [
        "a) Las transiciones CSS son una forma de animación en JavaScript.",
        "b) Las transiciones CSS permiten controlar cómo se cambian gradualmente los estilos de un elemento en respuesta a eventos como el paso del cursor del mouse sobre el elemento. Se definen utilizando la propiedad 'transition' y se especifican los estilos que deben cambiar y la duración de la transición. Las transiciones CSS son útiles para crear efectos suaves, como cambios de color o movimiento, sin necesidad de JavaScript.",
        "c) Las transiciones CSS son solo aplicables a elementos de tipo bloque.",
        "d) Las transiciones CSS solo pueden aplicarse a propiedades de posición y tamaño."
      ]
    },    
    {
      "id": 152,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es la 'transformación 3D' en CSS y cuáles son sus aplicaciones?",
      "answer": "La 'transformación 3D' en CSS es una extensión de las transformaciones 2D que permite realizar transformaciones tridimensionales en elementos HTML. Puedes aplicar rotaciones, escalas y traslaciones en tres dimensiones. Las aplicaciones comunes de las transformaciones 3D incluyen la creación de efectos de rotación en objetos tridimensionales, animaciones de cubos y manipulación de elementos en un espacio 3D simulado.",
      "correctAnswer": "c) La 'transformación 3D' en CSS es una extensión de las transformaciones 2D que permite realizar transformaciones tridimensionales en elementos HTML. Puedes aplicar rotaciones, escalas y traslaciones en tres dimensiones. Las aplicaciones comunes de las transformaciones 3D incluyen la creación de efectos de rotación en objetos tridimensionales, animaciones de cubos y manipulación de elementos en un espacio 3D simulado.",
      "allAnswers": [
        "a) La 'transformación 3D' en CSS solo se aplica a imágenes.",
        "b) La 'transformación 3D' en CSS solo se utiliza para crear efectos visuales avanzados.",
        "c) La 'transformación 3D' en CSS es una extensión de las transformaciones 2D que permite realizar transformaciones tridimensionales en elementos HTML. Puedes aplicar rotaciones, escalas y traslaciones en tres dimensiones. Las aplicaciones comunes de las transformaciones 3D incluyen la creación de efectos de rotación en objetos tridimensionales, animaciones de cubos y manipulación de elementos en un espacio 3D simulado.",
        "d) La 'transformación 3D' en CSS solo se utiliza en dispositivos con capacidades 3D especiales."
      ]
    },    
    {
      "id": 153,
      "category": "CSS",
      "level": "Senior",
      "question": "¿Qué es el 'aspect ratio' en CSS y cómo se controla?",
      "answer": "El 'aspect ratio' en CSS se refiere a la relación entre el ancho y la altura de un elemento, como una imagen o un contenedor. Puedes controlar el 'aspect ratio' utilizando la propiedad 'padding-top' o 'padding-bottom' con un valor expresado como un porcentaje. Esto es útil cuando deseas mantener la proporción de una imagen o un elemento, incluso cuando cambia el tamaño de la ventana del navegador.",
      "correctAnswer": "a) El 'aspect ratio' en CSS se refiere a la relación entre el ancho y la altura de un elemento, como una imagen o un contenedor. Puedes controlar el 'aspect ratio' utilizando la propiedad 'padding-top' o 'padding-bottom' con un valor expresado como un porcentaje. Esto es útil cuando deseas mantener la proporción de una imagen o un elemento, incluso cuando cambia el tamaño de la ventana del navegador.",
      "allAnswers": [
        "a) El 'aspect ratio' en CSS se refiere a la relación entre el ancho y la altura de un elemento, como una imagen o un contenedor. Puedes controlar el 'aspect ratio' utilizando la propiedad 'padding-top' o 'padding-bottom' con un valor expresado como un porcentaje. Esto es útil cuando deseas mantener la proporción de una imagen o un elemento, incluso cuando cambia el tamaño de la ventana del navegador.",
        "b) El 'aspect ratio' en CSS se refiere solo al tamaño de la fuente en un elemento.",
        "c) El 'aspect ratio' en CSS solo se aplica a elementos con dimensiones fijas.",        
        "d) El 'aspect ratio' en CSS solo se aplica a elementos con contenido de video."
      ]
    },    
    {
      "id": 154,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es el 'object-fit' en CSS y para qué se utiliza?",
      "answer": "El 'object-fit' en CSS es una propiedad que se utiliza para controlar cómo se ajusta y escala el contenido (como imágenes o videos) dentro de un elemento contenedor. Algunos valores comunes para 'object-fit' son 'contain' (el contenido se ajusta para caber dentro del contenedor sin distorsión) y 'cover' (el contenido se ajusta para cubrir todo el contenedor, recortando si es necesario). Esta propiedad es útil para controlar el comportamiento de imágenes y videos en un diseño.",
      "correctAnswer": "c) El 'object-fit' en CSS es una propiedad que se utiliza para controlar cómo se ajusta y escala el contenido (como imágenes o videos) dentro de un elemento contenedor. Algunos valores comunes para 'object-fit' son 'contain' (el contenido se ajusta para caber dentro del contenedor sin distorsión) y 'cover' (el contenido se ajusta para cubrir todo el contenedor, recortando si es necesario). Esta propiedad es útil para controlar el comportamiento de imágenes y videos en un diseño.",
      "allAnswers": [
        "a) El 'object-fit' en CSS solo se aplica a elementos de tipo imagen.",
        "b) El 'object-fit' en CSS solo se utiliza para ajustar el tamaño de fuentes en un contenedor.",
        "c) El 'object-fit' en CSS es una propiedad que se utiliza para controlar cómo se ajusta y escala el contenido (como imágenes o videos) dentro de un elemento contenedor. Algunos valores comunes para 'object-fit' son 'contain' (el contenido se ajusta para caber dentro del contenedor sin distorsión) y 'cover' (el contenido se ajusta para cubrir todo el contenedor, recortando si es necesario). Esta propiedad es útil para controlar el comportamiento de imágenes y videos en un diseño.",
        "d) El 'object-fit' en CSS solo se aplica a elementos con dimensiones fijas."
      ]
    },    
    {
      "id": 155,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es la 'customización de elementos' (Shadow DOM) en CSS y cuál es su propósito?",
      "answer": "La 'customización de elementos' (Shadow DOM) en CSS es una técnica que permite encapsular estilos y comportamientos en elementos HTML personalizados. Se utiliza para crear componentes web reutilizables que no se ven afectados por estilos globales y que evitan conflictos con otros estilos en la página. El Shadow DOM se utiliza en la creación de bibliotecas y frameworks de componentes web, como Polymer y Stencil, para mantener la modularidad y la reutilización del código.",
      "correctAnswer": "d) La 'customización de elementos' (Shadow DOM) en CSS es una técnica que permite encapsular estilos y comportamientos en elementos HTML personalizados. Se utiliza para crear componentes web reutilizables que no se ven afectados por estilos globales y que evitan conflictos con otros estilos en la página. El Shadow DOM se utiliza en la creación de bibliotecas y frameworks de componentes web, como Polymer y Stencil, para mantener la modularidad y la reutilización del código.",
      "allAnswers": [
        "a) El Shadow DOM en CSS es solo una característica decorativa sin un propósito específico.",
        "b) El Shadow DOM en CSS se utiliza solo para aplicar estilos a elementos de la interfaz de usuario.",       
        "c) El Shadow DOM en CSS solo se utiliza para la creación de efectos visuales en elementos específicos.",
        "d) La 'customización de elementos' (Shadow DOM) en CSS es una técnica que permite encapsular estilos y comportamientos en elementos HTML personalizados. Se utiliza para crear componentes web reutilizables que no se ven afectados por estilos globales y que evitan conflictos con otros estilos en la página. El Shadow DOM se utiliza en la creación de bibliotecas y frameworks de componentes web, como Polymer y Stencil, para mantener la modularidad y la reutilización del código."
      ]
    },    
    {
      "id": 156,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es el 'mix-blend-mode' en CSS y cuál es su función?",
      "answer": "El 'mix-blend-mode' en CSS es una propiedad que se utiliza para controlar cómo se combinan los colores de un elemento con los colores del elemento subyacente. Puedes utilizar valores como 'multiply', 'screen', 'overlay' y otros para crear efectos de mezcla. Esta propiedad es útil para crear efectos de superposición y fusión de elementos en un diseño, como superposiciones de color y efectos de mezcla de imágenes.",
      "correctAnswer": "c) El 'mix-blend-mode' en CSS es una propiedad que se utiliza para controlar cómo se combinan los colores de un elemento con los colores del elemento subyacente. Puedes utilizar valores como 'multiply', 'screen', 'overlay' y otros para crear efectos de mezcla. Esta propiedad es útil para crear efectos de superposición y fusión de elementos en un diseño, como superposiciones de color y efectos de mezcla de imágenes.",
      "allAnswers": [
        "a) El 'mix-blend-mode' en CSS solo se utiliza para cambiar el color de fondo de un elemento.",
        "b) El 'mix-blend-mode' en CSS es una propiedad obsoleta y no se recomienda su uso.",
        "c) El 'mix-blend-mode' en CSS es una propiedad que se utiliza para controlar cómo se combinan los colores de un elemento con los colores del elemento subyacente. Puedes utilizar valores como 'multiply', 'screen', 'overlay' y otros para crear efectos de mezcla. Esta propiedad es útil para crear efectos de superposición y fusión de elementos en un diseño, como superposiciones de color y efectos de mezcla de imágenes.",
        "d) El 'mix-blend-mode' en CSS solo se utiliza para aplicar efectos de sombra en elementos."
      ]
    },    
    {
      "id": 157,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es la 'función calc()' en CSS y cuándo se utiliza?",
      "answer": "La 'función calc()' en CSS es una función que permite realizar cálculos matemáticos en propiedades CSS. Se utiliza para definir valores numéricos en propiedades como ancho, alto, margen y más. Por ejemplo, puedes usar 'calc(50% - 20px)' para definir un ancho que sea el 50% del contenedor menos 20 píxeles. Esto es útil para crear diseños flexibles y responsivos que se ajusten automáticamente al contenido y al espacio disponible.",
      "correctAnswer": "b) La 'función calc()' en CSS es una función que permite realizar cálculos matemáticos en propiedades CSS. Se utiliza para definir valores numéricos en propiedades como ancho, alto, margen y más. Por ejemplo, puedes usar 'calc(50% - 20px)' para definir un ancho que sea el 50% del contenedor menos 20 píxeles. Esto es útil para crear diseños flexibles y responsivos que se ajusten automáticamente al contenido y al espacio disponible.",
      "allAnswers": [
        "a) La 'función calc()' en CSS solo se utiliza para definir colores en propiedades.",
        "b) La 'función calc()' en CSS es una función que permite realizar cálculos matemáticos en propiedades CSS. Se utiliza para definir valores numéricos en propiedades como ancho, alto, margen y más. Por ejemplo, puedes usar 'calc(50% - 20px)' para definir un ancho que sea el 50% del contenedor menos 20 píxeles. Esto es útil para crear diseños flexibles y responsivos que se ajusten automáticamente al contenido y al espacio disponible.",
        "c) La 'función calc()' en CSS solo se utiliza para crear animaciones en propiedades CSS.",
        "d) La 'función calc()' en CSS es obsoleta y no se recomienda su uso."
      ]
    },    
    {
      "id": 158,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es la 'propiedad clip-path' en CSS y cuál es su propósito?",
      "answer": "La propiedad 'clip-path' en CSS se utiliza para recortar o enmascarar elementos HTML utilizando una forma definida. Puedes especificar una forma personalizada mediante coordenadas o utilizar formas predefinidas como 'circle()' o 'polygon()'. La propiedad 'clip-path' es útil para crear efectos de recorte y enmascaramiento personalizados en imágenes o elementos, lo que permite crear diseños creativos y llamativos.",
      "correctAnswer": "a) La propiedad 'clip-path' en CSS se utiliza para recortar o enmascarar elementos HTML utilizando una forma definida. Puedes especificar una forma personalizada mediante coordenadas o utilizar formas predefinidas como 'circle()' o 'polygon()'. La propiedad 'clip-path' es útil para crear efectos de recorte y enmascaramiento personalizados en imágenes o elementos, lo que permite crear diseños creativos y llamativos.",
      "allAnswers": [
        "a) La propiedad 'clip-path' en CSS se utiliza para recortar o enmascarar elementos HTML utilizando una forma definida. Puedes especificar una forma personalizada mediante coordenadas o utilizar formas predefinidas como 'circle()' o 'polygon()'. La propiedad 'clip-path' es útil para crear efectos de recorte y enmascaramiento personalizados en imágenes o elementos, lo que permite crear diseños creativos y llamativos.",
        "b) La propiedad 'clip-path' en CSS solo se utiliza para cambiar el color de fondo de un elemento.",
        "c) La propiedad 'clip-path' en CSS determina el espaciado entre elementos en un diseño.",
        "d) La propiedad 'clip-path' en CSS se utiliza para animar la entrada y salida de elementos en una página web."
      ]
    },    
    {
      "id": 159,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'object-position' en CSS y cuál es su función?",
      "answer": "'Object-position' en CSS es una propiedad que se utiliza para controlar la posición de un elemento contenido (como una imagen) dentro de su contenedor. Puedes especificar coordenadas para determinar la posición exacta del elemento dentro del contenedor. Esto es útil para ajustar la alineación de imágenes o elementos dentro de un diseño.",
      "correctAnswer": "a) 'Object-position' en CSS es una propiedad que se utiliza para controlar la posición de un elemento contenido (como una imagen) dentro de su contenedor. Puedes especificar coordenadas para determinar la posición exacta del elemento dentro del contenedor. Esto es útil para ajustar la alineación de imágenes o elementos dentro de un diseño.",
      "allAnswers": [
        "a) 'Object-position' en CSS es una propiedad que se utiliza para controlar la posición de un elemento contenido (como una imagen) dentro de su contenedor. Puedes especificar coordenadas para determinar la posición exacta del elemento dentro del contenedor. Esto es útil para ajustar la alineación de imágenes o elementos dentro de un diseño.",
        "b) 'Object-position' en CSS determina el tamaño de un elemento en un diseño.",
        "c) 'Object-position' en CSS define el color de fondo de un elemento en una página web.",
        "d) 'Object-position' en CSS se utiliza para aplicar efectos de animación a elementos HTML."
      ]
    },    
    {
      "id": 160,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es la 'variable de entorno' (env-var) en CSS y cómo se utiliza?",
      "answer": "La 'variable de entorno' (env-var) en CSS es una característica experimental que permite definir variables globales que se pueden utilizar en múltiples hojas de estilo. Se definen en el nivel de documento y se pueden acceder desde cualquier hoja de estilo en ese documento. Esto es útil para definir valores compartidos, como colores o tamaños, en un solo lugar y utilizarlos en todo el proyecto CSS.",
      "correctAnswer": "d) La 'variable de entorno' (env-var) en CSS es una característica experimental que permite definir variables globales que se pueden utilizar en múltiples hojas de estilo. Se definen en el nivel de documento y se pueden acceder desde cualquier hoja de estilo en ese documento. Esto es útil para definir valores compartidos, como colores o tamaños, en un solo lugar y utilizarlos en todo el proyecto CSS.",
      "allAnswers": [        
        "a) La 'variable de entorno' (env-var) en CSS es una propiedad que se utiliza para aplicar estilos diferentes en función del entorno de la aplicación.",
        "b) La 'variable de entorno' (env-var) en CSS es un término utilizado para describir las variables locales en una hoja de estilo específica.",
        "c) La 'variable de entorno' (env-var) en CSS es una característica para definir variables en archivos de configuración de servidor.",
        "d) La 'variable de entorno' (env-var) en CSS es una característica experimental que permite definir variables globales que se pueden utilizar en múltiples hojas de estilo. Se definen en el nivel de documento y se pueden acceder desde cualquier hoja de estilo en ese documento. Esto es útil para definir valores compartidos, como colores o tamaños, en un solo lugar y utilizarlos en todo el proyecto CSS."
      ]
    },    
    {
      "id": 161,
      "category": "Css",
      "level": "Junior",
      "question": "Explique la diferencia entre 'display: block;' y 'display: inline;' en CSS.", 
      "answer": "'display: block;' hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea, mientras que 'display: inline;' hace que el elemento ocupe solo el ancho necesario y permanezca en la misma línea que los elementos vecinos.",
      "correctAnswer": "d) 'display: block;' hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea, mientras que 'display: inline;' hace que el elemento ocupe solo el ancho necesario y permanezca en la misma línea que los elementos vecinos.",
      "allAnswers": [
        "a) 'display: block;' hace que el elemento ocupe solo el ancho necesario y permanezca en la misma línea que los elementos vecinos, mientras que 'display: inline;' hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea.",
        "b) 'display: block;' hace que el elemento permanezca en la misma línea que los elementos vecinos y ocupe solo el ancho necesario, mientras que 'display: inline;' hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea.",
        "c) 'display: block;' y 'display: inline;' son iguales y pueden usarse indistintamente en cualquier situación.",
        "d) 'display: block;' hace que el elemento ocupe todo el ancho disponible y comience en una nueva línea, mientras que 'display: inline;' hace que el elemento ocupe solo el ancho necesario y permanezca en la misma línea que los elementos vecinos."
      ]
    },    
    {
      "id": 162,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué significa 'responsive design' en CSS?",
      "answer": "'Responsive design' en CSS se refiere a la creación de sitios web que se adaptan y responden de manera eficiente a diferentes tamaños de pantalla y dispositivos, utilizando técnicas como 'media queries' y un diseño fluido.",
      "correctAnswer": "a) 'Responsive design' en CSS se refiere a la creación de sitios web que se adaptan y responden de manera eficiente a diferentes tamaños de pantalla y dispositivos, utilizando técnicas como 'media queries' y un diseño fluido.",
      "allAnswers": [
        "a) 'Responsive design' en CSS se refiere a la creación de sitios web que se adaptan y responden de manera eficiente a diferentes tamaños de pantalla y dispositivos, utilizando técnicas como 'media queries' y un diseño fluido.",
        "b) 'Responsive design' en CSS se refiere a la creación de sitios web que solo son accesibles desde dispositivos móviles.",
        "c) 'Responsive design' en CSS es un término utilizado para describir el diseño de sitios web con un solo tamaño fijo que no cambia.",
        "d) 'Responsive design' en CSS se refiere a la creación de sitios web que solo son accesibles desde dispositivos de escritorio."        
      ]
    },    
    {
      "id": 163,
      "category": "Css",
      "level": "Junior",
      "question": "Explica cómo se seleccionan todos los elementos p del documento en CSS.",
      "answer": "Para seleccionar todos los elementos 'p' del documento en CSS, puedes usar el selector de tipo: 'p { /* estilos */ }'. Esto aplicará los estilos a todos los elementos 'p'.",
      "correctAnswer": "d) Para seleccionar todos los elementos 'p' del documento en CSS, puedes usar el selector de tipo: 'p { /* estilos */ }'. Esto aplicará los estilos a todos los elementos 'p'.",
      "allAnswers": [
        "a) Utilizando el selector 'element:p' en CSS.",
        "b) Usando el selector 'all-p' seguido de los estilos deseados.",
        "c) Seleccionando todos los elementos 'p' con el selector 'paragraph' en CSS.",
        "d) Para seleccionar todos los elementos 'p' del documento en CSS, puedes usar el selector de tipo: 'p { /* estilos */ }'. Esto aplicará los estilos a todos los elementos 'p'."
      ]
    },
    {
      "id": 164,
      "category": "Css",
      "level": "Junior",
      "question": "¿Qué es la pseudo-clase :hover en CSS y cómo se utiliza?",
      "answer": "La pseudo-clase ':hover' en CSS se utiliza para seleccionar y aplicar estilos a un elemento cuando el usuario pasa el cursor sobre él. Por ejemplo, 'a:hover { color: red; }' cambiará el color del texto a rojo cuando el usuario pase el cursor sobre un enlace.",
      "correctAnswer": "c) La pseudo-clase ':hover' en CSS se utiliza para seleccionar y aplicar estilos a un elemento cuando el usuario pasa el cursor sobre él. Por ejemplo, 'a:hover { color: red; }' cambiará el color del texto a rojo cuando el usuario pase el cursor sobre un enlace.",
      "allAnswers": [
        "a) La pseudo-clase ':hover' en CSS es utilizada para aplicar estilos a elementos al hacer clic en ellos.",
        "b) La pseudo-clase ':hover' en CSS se utiliza para seleccionar elementos en la parte superior de una jerarquía.",
        "c) La pseudo-clase ':hover' en CSS se utiliza para seleccionar y aplicar estilos a un elemento cuando el usuario pasa el cursor sobre él. Por ejemplo, 'a:hover { color: red; }' cambiará el color del texto a rojo cuando el usuario pase el cursor sobre un enlace.",
        "d) ':hover' es una propiedad de estilo en CSS que se aplica automáticamente a todos los elementos."
      ]
    },    
    {
      "id": 165,
      "category": "Css",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre 'position: relative;' y 'position: fixed;' en CSS?",
      "answer": "'Position: relative;' posiciona un elemento con respecto a su posición original en el flujo del documento, mientras que 'position: fixed;' lo posiciona en relación con la ventana del navegador, haciendo que permanezca fijo incluso al desplazarse.",
      "correctAnswer": "d) 'Position: relative;' posiciona un elemento con respecto a su posición original en el flujo del documento, mientras que 'position: fixed;' lo posiciona en relación con la ventana del navegador, haciendo que permanezca fijo incluso al desplazarse.",
      "allAnswers": [
        "a) 'Position: relative;' y 'position: fixed;' son términos intercambiables y se utilizan de manera similar.",
        "b) 'Position: relative;' y 'position: fixed;' son propiedades que hacen lo mismo y no tienen diferencia.",
        "c) 'Position: relative;' y 'position: fixed;' son propiedades obsoletas en CSS.",
        "d) 'Position: relative;' posiciona un elemento con respecto a su posición original en el flujo del documento, mientras que 'position: fixed;' lo posiciona en relación con la ventana del navegador, haciendo que permanezca fijo incluso al desplazarse."
      ]
    },    
    {
      "id": 166,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es 'BEM' en CSS y cuál es su propósito?",
      "answer": "'BEM' (Block, Element, Modifier) es una convención de nomenclatura para clases en CSS que ayuda a organizar y estructurar el código CSS de manera más mantenible y modular. Divide el código en bloques (componentes), elementos y modificadores, facilitando el entendimiento y la colaboración en proyectos grandes.",
      "correctAnswer": "c) 'BEM' (Block, Element, Modifier) es una convención de nomenclatura para clases en CSS que ayuda a organizar y estructurar el código CSS de manera más mantenible y modular. Divide el código en bloques (componentes), elementos y modificadores, facilitando el entendimiento y la colaboración en proyectos grandes.",
      "allAnswers": [
        "a) 'BEM' es un término coloquial sin significado específico en CSS.",
        "b) 'BEM' (Best Element Method) es una técnica para aplicar estilos solo al mejor elemento de una página.",
        "d) 'BEM' (Block, Element, Modifier) es una convención de nomenclatura para clases en CSS que ayuda a organizar y estructurar el código CSS de manera más mantenible y modular. Divide el código en bloques (componentes), elementos y modificadores, facilitando el entendimiento y la colaboración en proyectos grandes.",
        "d) 'BEM' es una propiedad CSS que controla la visualización de elementos en el modo de impresión."        
      ]
    },    
    {
      "id": 167,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es 'Sass' y cuál es su ventaja sobre CSS?",
      "answer": "'Sass' es un preprocesador de CSS que agrega características como variables, anidamiento, y mixins, facilitando la escritura y el mantenimiento del código CSS. Su ventaja radica en la capacidad de usar funciones y estructuras más avanzadas, lo que mejora la eficiencia y organización del código.",
      "correctAnswer": "d) 'Sass' es un preprocesador de CSS que agrega características como variables, anidamiento, y mixins, facilitando la escritura y el mantenimiento del código CSS. Su ventaja radica en la capacidad de usar funciones y estructuras más avanzadas, lo que mejora la eficiencia y organización del código.",
      "allAnswers": [
        "a) 'Sass' es un lenguaje de programación por sí mismo, independiente de CSS.",
        "b) 'Sass' es un servicio en línea para probar y validar hojas de estilo CSS.",
        "c) 'Sass' es un formato de archivo de imagen utilizado en diseño web.",
        "d) 'Sass' es un preprocesador de CSS que agrega características como variables, anidamiento, y mixins, facilitando la escritura y el mantenimiento del código CSS. Su ventaja radica en la capacidad de usar funciones y estructuras más avanzadas, lo que mejora la eficiencia y organización del código."
      ]
    },    
    {
      "id": 168,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué significa 'mobile-first' en el diseño web y cómo se implementa en CSS?",
      "answer": "'Mobile-first' en el diseño web significa diseñar y desarrollar primero para dispositivos móviles y luego expandirse a pantallas más grandes. Se implementa utilizando 'media queries' para aplicar estilos específicos a dispositivos más grandes, asegurando una experiencia móvil optimizada como base.",
      "correctAnswer": "b) 'Mobile-first' en el diseño web significa diseñar y desarrollar primero para dispositivos móviles y luego expandirse a pantallas más grandes. Se implementa utilizando 'media queries' para aplicar estilos específicos a dispositivos más grandes, asegurando una experiencia móvil optimizada como base.",
      "allAnswers": [
        "a) 'Mobile-first' en el diseño web significa diseñar exclusivamente para dispositivos móviles.",
        "b) 'Mobile-first' en el diseño web significa diseñar y desarrollar primero para dispositivos móviles y luego expandirse a pantallas más grandes. Se implementa utilizando 'media queries' para aplicar estilos específicos a dispositivos más grandes, asegurando una experiencia móvil optimizada como base.",
        "c) 'Mobile-first' en el diseño web significa desarrollar solo para dispositivos de pantalla grande.",
        "d) 'Mobile-first' en el diseño web significa comenzar el desarrollo para dispositivos de pantalla grande y luego adaptarse a dispositivos móviles."
      ]
    },    
    {
      "id": 169,
      "category": "Css",
      "level": "Middle",
      "question": "Explique la propiedad 'position: sticky;' en CSS y su uso.",
      "answer": "'Position: sticky;' en CSS es una propiedad que combina características de 'position: relative;' y 'position: fixed;'. El elemento se comporta como 'relative' hasta que alcanza un punto de desplazamiento específico, momento en el cual se vuelve 'fixed'. Es útil para encabezados que se adhieren en la parte superior de la página al hacer scroll.",
      "correctAnswer": "c) 'Position: sticky;' en CSS es una propiedad que combina características de 'position: relative;' y 'position: fixed;'. El elemento se comporta como 'relative' hasta que alcanza un punto de desplazamiento específico, momento en el cual se vuelve 'fixed'. Es útil para encabezados que se adhieren en la parte superior de la página al hacer scroll.",
      "allAnswers": [
        "a) 'Position: sticky;' en CSS siempre se comporta como 'relative'.",
        "b) 'Position: sticky;' en CSS siempre se comporta como 'fixed'.",
        "c) 'Position: sticky;' en CSS es una propiedad que combina características de 'position: relative;' y 'position: fixed;'. El elemento se comporta como 'relative' hasta que alcanza un punto de desplazamiento específico, momento en el cual se vuelve 'fixed'. Es útil para encabezados que se adhieren en la parte superior de la página al hacer scroll.",
        "d) 'Position: sticky;' en CSS no tiene un comportamiento específico."
      ]
    },    
    {
      "id": 170,
      "category": "Css",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre 'em' y 'rem' en CSS?",
      "answer": "'Em' y 'rem' son unidades de medida en CSS. 'Em' se basa en el tamaño de fuente del elemento padre, mientras que 'rem' se basa en el tamaño de fuente del elemento raíz (generalmente el elemento 'html'). 'Rem' proporciona una forma más predecible de especificar tamaños relativos en relación con el tamaño de fuente de la página.",
      "correctAnswer": "d) 'Em' y 'rem' son unidades de medida en CSS. 'Em' se basa en el tamaño de fuente del elemento padre, mientras que 'rem' se basa en el tamaño de fuente del elemento raíz (generalmente el elemento 'html'). 'Rem' proporciona una forma más predecible de especificar tamaños relativos en relación con el tamaño de fuente de la página.",
      "allAnswers": [
        "a) 'Em' y 'rem' son unidades de medida en CSS que siempre se basan en el tamaño de fuente del elemento padre.",
        "b) 'Em' y 'rem' son unidades de medida en CSS que siempre se basan en el tamaño de fuente del elemento raíz (html).",        
        "c) 'Em' y 'rem' son términos equivalentes para describir la misma unidad de medida en CSS.",
        "d) 'Em' y 'rem' son unidades de medida en CSS. 'Em' se basa en el tamaño de fuente del elemento padre, mientras que 'rem' se basa en el tamaño de fuente del elemento raíz (generalmente el elemento 'html'). 'Rem' proporciona una forma más predecible de especificar tamaños relativos en relación con el tamaño de fuente de la página."
      ]
    },    
    {
      "id": 171,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'CSS-in-JS' y cuál es su propósito en el desarrollo web?",
      "answer": "'CSS-in-JS' es una técnica en la que se escriben estilos CSS directamente en archivos JavaScript. Su propósito es mejorar la modularidad y la portabilidad del código, ya que los estilos están acoplados con los componentes de JavaScript. Bibliotecas como 'Styled-components' son ejemplos de implementación de 'CSS-in-JS'.",
      "correctAnswer": "b) 'CSS-in-JS' es una técnica en la que se escriben estilos CSS directamente en archivos JavaScript. Su propósito es mejorar la modularidad y la portabilidad del código, ya que los estilos están acoplados con los componentes de JavaScript. Bibliotecas como 'Styled-components' son ejemplos de implementación de 'CSS-in-JS'.",
      "allAnswers": [
        "a) 'CSS-in-JS' es un término utilizado para describir la vinculación de archivos CSS y JavaScript en el desarrollo web.",
        "b) 'CSS-in-JS' es una técnica en la que se escriben estilos CSS directamente en archivos JavaScript. Su propósito es mejorar la modularidad y la portabilidad del código, ya que los estilos están acoplados con los componentes de JavaScript. Bibliotecas como 'Styled-components' son ejemplos de implementación de 'CSS-in-JS'.",
        "c) 'CSS-in-JS' se refiere a la práctica de escribir código CSS dentro de archivos JSON en el desarrollo web.",
        "d) 'CSS-in-JS' es una convención de nomenclatura para organizar archivos de estilo en proyectos JavaScript."
      ]
    },    
    {
      "id": 172,
      "category": "Css",
      "level": "Senior",
      "question": "Explica la diferencia entre 'justify-content' y 'align-items' en Flexbox y cómo se aplican.",
      "answer": "'justify-content' y 'align-items' son propiedades de Flexbox. 'justify-content' controla la alineación de los elementos a lo largo del eje principal (horizontal en el caso de filas y vertical en el caso de columnas), mientras que 'align-items' controla la alineación a lo largo del eje transversal. Por ejemplo, 'justify-content: center;' centrará los elementos horizontalmente, y 'align-items: flex-end;' los alineará en la parte inferior del contenedor.",
      "correctAnswer": "d) 'justify-content' y 'align-items' son propiedades de Flexbox. 'justify-content' controla la alineación de los elementos a lo largo del eje principal (horizontal en el caso de filas y vertical en el caso de columnas), mientras que 'align-items' controla la alineación a lo largo del eje transversal. Por ejemplo, 'justify-content: center;' centrará los elementos horizontalmente, y 'align-items: flex-end;' los alineará en la parte inferior del contenedor.",
      "allAnswers": [
        "a) 'justify-content' y 'align-items' son propiedades de Flexbox que controlan el espaciado entre elementos flexibles.",
        "b) 'justify-content' y 'align-items' son propiedades de Flexbox que solo afectan a elementos en filas, no en columnas.",
        "c) 'justify-content' y 'align-items' son términos equivalentes en Flexbox que pueden usarse indistintamente.",
        "d) 'justify-content' y 'align-items' son propiedades de Flexbox. 'justify-content' controla la alineación de los elementos a lo largo del eje principal (horizontal en el caso de filas y vertical en el caso de columnas), mientras que 'align-items' controla la alineación a lo largo del eje transversal. Por ejemplo, 'justify-content: center;' centrará los elementos horizontalmente, y 'align-items: flex-end;' los alineará en la parte inferior del contenedor."
      ]
    },       
    {
      "id": 173,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'critical CSS' y por qué es importante para el rendimiento web?",
      "answer": "'Critical CSS' se refiere a los estilos necesarios para renderizar la parte visible de una página web inicialmente. Es importante para el rendimiento web porque acelera la carga de la página al proporcionar los estilos esenciales primero, permitiendo que la página sea utilizable más rápidamente.",
      "correctAnswer": "a) 'Critical CSS' se refiere a los estilos necesarios para renderizar la parte visible de una página web inicialmente. Es importante para el rendimiento web porque acelera la carga de la página al proporcionar los estilos esenciales primero, permitiendo que la página sea utilizable más rápidamente.",
      "allAnswers": [
        "a) 'Critical CSS' se refiere a los estilos necesarios para renderizar la parte visible de una página web inicialmente. Es importante para el rendimiento web porque acelera la carga de la página al proporcionar los estilos esenciales primero, permitiendo que la página sea utilizable más rápidamente.",
        "b) 'Critical CSS' es una técnica para optimizar estilos específicos en páginas de comercio electrónico.",
        "c) 'Critical CSS' es una propiedad de CSS utilizada para aplicar estilos críticos en elementos visibles.",
        "d) 'Critical CSS' se refiere a los estilos secundarios de una página web y no afecta significativamente al rendimiento."        
      ]
    },    
    {
      "id": 174,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'CSS normalization' y cuál es su propósito?",
      "answer": "'CSS normalization' es el proceso de establecer estilos consistentes en diferentes navegadores. Su propósito es crear una base uniforme para el diseño web, asegurando que los elementos HTML tengan estilos predeterminados consistentes en todos los navegadores, evitando problemas de rendimiento y presentación.",
      "correctAnswer": "b) 'CSS normalization' es el proceso de establecer estilos consistentes en diferentes navegadores. Su propósito es crear una base uniforme para el diseño web, asegurando que los elementos HTML tengan estilos predeterminados consistentes en todos los navegadores, evitando problemas de rendimiento y presentación.",
      "allAnswers": [
        "a) 'CSS normalization' es una técnica avanzada para aplicar estilos específicos en páginas web.",
        "b) 'CSS normalization' es el proceso de establecer estilos consistentes en diferentes navegadores. Su propósito es crear una base uniforme para el diseño web, asegurando que los elementos HTML tengan estilos predeterminados consistentes en todos los navegadores, evitando problemas de rendimiento y presentación.",
        "c) 'CSS normalization' es un método para normalizar el tamaño de texto en todas las secciones de un sitio web.",
        "d) 'CSS normalization' es un término que describe la optimización de estilos para un rendimiento máximo."     
      ]
    },    
    {
      "id": 175,
      "category": "Css",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre 'normalize.css' y 'reset.css'?",
      "answer": "'Normalize.css' y 'reset.css' son ambos estilos utilizados para establecer estilos predeterminados consistentes en diferentes navegadores. La diferencia radica en la filosofía de cada uno: 'reset.css' establece estilos más agresivos para reiniciar completamente los estilos, mientras que 'normalize.css' mantiene algunos estilos predeterminados para elementos comunes y solo normaliza diferencias entre navegadores.",
      "correctAnswer": "d) 'Normalize.css' y 'reset.css' son ambos estilos utilizados para establecer estilos predeterminados consistentes en diferentes navegadores. La diferencia radica en la filosofía de cada uno: 'reset.css' establece estilos más agresivos para reiniciar completamente los estilos, mientras que 'normalize.css' mantiene algunos estilos predeterminados para elementos comunes y solo normaliza diferencias entre navegadores.",
      "allAnswers": [
        "a) 'Normalize.css' es una versión mejorada de 'reset.css' que elimina completamente todos los estilos predeterminados.",
        "b) 'Reset.css' es una alternativa más moderna y completa a 'normalize.css'.",
        "c) 'Normalize.css' y 'reset.css' son términos intercambiables que describen el mismo concepto de normalización de estilos en CSS.",
        "d) 'Normalize.css' y 'reset.css' son ambos estilos utilizados para establecer estilos predeterminados consistentes en diferentes navegadores. La diferencia radica en la filosofía de cada uno: 'reset.css' establece estilos más agresivos para reiniciar completamente los estilos, mientras que 'normalize.css' mantiene algunos estilos predeterminados para elementos comunes y solo normaliza diferencias entre navegadores."
      ]
    },    
    {
      "id": 176,
      "category": "Css",
      "level": "Middle",
      "question": "Explica el propósito de 'flex-grow' en flexbox y cómo se utiliza.",
      "answer": "'flex-grow' en flexbox determina la capacidad de un elemento para crecer en relación con los demás elementos en el contenedor. Si todos los elementos tienen un valor de 'flex-grow' igual a 1, crecerán por igual. Puedes asignar valores mayores a uno de los elementos para que crezca más en comparación con los demás.",
      "correctAnswer": "b) 'flex-grow' en flexbox determina la capacidad de un elemento para crecer en relación con los demás elementos en el contenedor. Si todos los elementos tienen un valor de 'flex-grow' igual a 1, crecerán por igual. Puedes asignar valores mayores a uno de los elementos para que crezca más en comparación con los demás.",
      "allAnswers": [
        "a) 'flex-grow' en flexbox controla la alineación de los elementos en el eje principal.",
        "b) 'flex-grow' en flexbox determina la capacidad de un elemento para crecer en relación con los demás elementos en el contenedor. Si todos los elementos tienen un valor de 'flex-grow' igual a 1, crecerán por igual. Puedes asignar valores mayores a uno de los elementos para que crezca más en comparación con los demás.",
        "c) 'flex-grow' solo se aplica a elementos con un 'display' establecido como 'flex'.",
        "d) 'flex-grow' se utiliza para especificar el tamaño inicial de un elemento flex en el contenedor."
      ]
    },    
    {
      "id": 177,
      "category": "Css",
      "level": "Middle",
      "question": "¿Qué es el 'viewport' en CSS y por qué es crucial en el diseño web móvil?",
      "answer": "El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el diseño web móvil, donde los tamaños de pantalla varían ampliamente, controlar el 'viewport' es crucial. Se utiliza la etiqueta meta viewport en HTML para especificar atributos como el ancho y la escala, asegurando que la página se presente de manera adecuada en dispositivos móviles.",
      "correctAnswer": "d) El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el diseño web móvil, donde los tamaños de pantalla varían ampliamente, controlar el 'viewport' es crucial. Se utiliza la etiqueta meta viewport en HTML para especificar atributos como el ancho y la escala, asegurando que la página se presente de manera adecuada en dispositivos móviles.",
      "allAnswers": [
        "a) El 'viewport' en CSS es una propiedad que define el tamaño de los elementos visibles.",
        "b) El 'viewport' solo es relevante en el diseño web de escritorio.",
        "c) La etiqueta meta viewport en HTML solo se usa en dispositivos de pantalla grande.",
        "d) El 'viewport' en CSS se refiere al área visible de una página web en el navegador. En el diseño web móvil, donde los tamaños de pantalla varían ampliamente, controlar el 'viewport' es crucial. Se utiliza la etiqueta meta viewport en HTML para especificar atributos como el ancho y la escala, asegurando que la página se presente de manera adecuada en dispositivos móviles."
      ]
    },    
    {
      "id": 178,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué son las 'CSS Custom Properties' y cuál es su ventaja?",
      "answer": "Las 'CSS Custom Properties', también conocidas como variables CSS, son variables definidas por el usuario que contienen valores específicos. Su ventaja radica en la capacidad de reutilizar valores en todo el documento y cambiarlos dinámicamente mediante JavaScript. Esto mejora la consistencia y facilita la actualización de estilos en toda la aplicación.",
      "correctAnswer": "d) Las 'CSS Custom Properties', también conocidas como variables CSS, son variables definidas por el usuario que contienen valores específicos. Su ventaja radica en la capacidad de reutilizar valores en todo el documento y cambiarlos dinámicamente mediante JavaScript. Esto mejora la consistencia y facilita la actualización de estilos en toda la aplicación.",
      "allAnswers": [
        "a) Las 'CSS Custom Properties' son propiedades predefinidas en CSS que no se pueden cambiar.",
        "b) Las 'CSS Custom Properties' se utilizan solo para propósitos de animación en CSS.",
        "c) Las 'CSS Custom Properties' son un tipo de variables limitadas a ciertos elementos HTML.",
        "d) Las 'CSS Custom Properties', también conocidas como variables CSS, son variables definidas por el usuario que contienen valores específicos. Su ventaja radica en la capacidad de reutilizar valores en todo el documento y cambiarlos dinámicamente mediante JavaScript. Esto mejora la consistencia y facilita la actualización de estilos en toda la aplicación."
      ]
    },    
    {
      "id": 179,
      "category": "Css",
      "level": "Senior",
      "question": "¿Qué es 'CSS Houdini' y cuál es su papel en el desarrollo web?",
      "answer": "'CSS Houdini' es un conjunto de API que permiten a los desarrolladores extender y mejorar el motor de renderizado CSS del navegador. Su objetivo es dar a los desarrolladores más control sobre el flujo de trabajo de estilo, permitiendo la creación de funciones y mejorando la capacidad de rendimiento del navegador.",
      "correctAnswer": "d) 'CSS Houdini' es un conjunto de API que permiten a los desarrolladores extender y mejorar el motor de renderizado CSS del navegador. Su objetivo es dar a los desarrolladores más control sobre el flujo de trabajo de estilo, permitiendo la creación de funciones y mejorando la capacidad de rendimiento del navegador.",
      "allAnswers": [
        "a) 'CSS Houdini' es una técnica para ocultar estilos CSS específicos.",
        "b) 'CSS Houdini' es una biblioteca de estilos predefinidos en CSS.",
        "c) 'CSS Houdini' es un lenguaje de programación para desarrollo web.",
        "d) 'CSS Houdini' es un conjunto de API que permiten a los desarrolladores extender y mejorar el motor de renderizado CSS del navegador. Su objetivo es dar a los desarrolladores más control sobre el flujo de trabajo de estilo, permitiendo la creación de funciones y mejorando la capacidad de rendimiento del navegador."
      ]
    },    
    {
      "id": 182,
      "category": "Css",
      "level": "Senior",
      "question": "¿Cuándo es apropiado utilizar 'important' en CSS y cuáles son las consideraciones?",
      "answer": "La regla '!important' en CSS se utiliza para dar prioridad a una regla específica y anular otras reglas. Se debe usar con precaución, ya que puede dificultar el mantenimiento y la resolución de conflictos. Es apropiado utilizarlo en casos excepcionales donde se necesita asegurar que una regla prevalezca, pero su uso excesivo puede causar problemas de mantenimiento.",
      "correctAnswer": "b) La regla '!important' en CSS se utiliza para dar prioridad a una regla específica y anular otras reglas. Se debe usar con precaución, ya que puede dificultar el mantenimiento y la resolución de conflictos. Es apropiado utilizarlo en casos excepcionales donde se necesita asegurar que una regla prevalezca, pero su uso excesivo puede causar problemas de mantenimiento.",
      "allAnswers": [
        "a) 'Important' se utiliza en todas las reglas CSS para darles prioridad.",
        "b) La regla '!important' en CSS se utiliza para dar prioridad a una regla específica y anular otras reglas. Se debe usar con precaución, ya que puede dificultar el mantenimiento y la resolución de conflictos. Es apropiado utilizarlo en casos excepcionales donde se necesita asegurar que una regla prevalezca, pero su uso excesivo puede causar problemas de mantenimiento.",
        "c) 'Important' se utiliza solo en casos de estilos de texto.",
        "d) 'Important' se utiliza para indicar que una regla no es relevante."
      ]
    },    
    {
      "id": 181,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es JavaScript y cuál es su propósito principal?",
      "answer": "JavaScript es un lenguaje de programación interpretado que se utiliza principalmente para agregar interactividad a las páginas web. Su propósito principal es permitir a los desarrolladores crear experiencias interactivas para los usuarios, manipulando el contenido y el comportamiento de las páginas web en el navegador.",
      "correctAnswer": "b) Lenguaje de programación interpretado para agregar interactividad a las páginas web.",
      "allAnswers": [
      "a) Sistema operativo para el desarrollo web.",
      "b) Lenguaje de programación interpretado para agregar interactividad a las páginas web.",
      "c) Herramienta de diseño de bases de datos.",
      "d) Framework para el desarrollo de aplicaciones móviles."
      ]
    },
    {
      "id": 182,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cómo se declara una función en JavaScript?",
      "answer": "Una función en JavaScript se declara utilizando la palabra clave 'function', seguida por el nombre de la función y paréntesis que pueden contener parámetros. El cuerpo de la función está encerrado entre llaves. Por ejemplo, 'function miFuncion() { /* código */ }'.",
      "correctAnswer": "c) Utilizando la palabra clave 'function' seguida por el nombre y paréntesis con parámetros opcionales.",
      "allAnswers": [
      "a) Con la palabra clave 'define' y un nombre.",
      "b) Mediante la etiqueta <function> en el HTML.",
      "c) Utilizando la palabra clave 'function' seguida por el nombre y paréntesis con parámetros opcionales.",
      "d) Con la instrucción 'new Function()'."
      ]
    },
    {
      "id": 183,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el concepto de variables en JavaScript.",
      "answer": "En JavaScript, las variables se utilizan para almacenar y representar datos. Se declaran con 'var', 'let' o 'const' y pueden contener diferentes tipos de datos, como números, cadenas de texto o booleanos. Las variables permiten a los desarrolladores almacenar información y manipularla durante la ejecución del programa.",
      "correctAnswer": "a) Almacenan y representan datos en JavaScript.",
      "allAnswers": [
      "a) Almacenan y representan datos en JavaScript.",
      "b) Definen la estructura de una página web.",
      "c) Controlan el flujo de ejecución de un programa.",
      "d) Se utilizan para estilizar elementos HTML."
      ]
    },
    {
      "id": 184,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es el DOM en JavaScript?",
      "answer": "El DOM (Document Object Model) en JavaScript es una representación en forma de árbol de la estructura de un documento HTML. Permite a los desarrolladores acceder y manipular los elementos de una página web de manera dinámica. JavaScript utiliza el DOM para interactuar con la estructura y contenido de la página.",
      "correctAnswer": "b) Representación en forma de árbol de la estructura de un documento HTML.",
      "allAnswers": [
      "a) Estilo de codificación para documentos JavaScript.",
      "b) Representación en forma de árbol de la estructura de un documento HTML.",
      "c) Método de encriptación para datos sensibles.",
      "d) Herramienta para la creación de gráficos en 3D."
      ]
    },
    {
      "id": 185,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el uso de 'if' en JavaScript y proporcione un ejemplo.",
      "answer": "La instrucción 'if' en JavaScript se utiliza para realizar una comprobación condicional. Si la condición especificada es verdadera, se ejecuta un bloque de código. Si es falsa, se puede proporcionar un bloque 'else' opcional que se ejecutará en su lugar. Por ejemplo, 'if (edad >= 18) { /* código para adultos / } else { / código para menores */ }'.",
      "correctAnswer": "a) Realizar una comprobación condicional y ejecutar un bloque de código según el resultado.",
      "allAnswers": [
      "a) Realizar una comprobación condicional y ejecutar un bloque de código según el resultado.",
      "b) Definir una nueva función en JavaScript.",
      "c) Crear un bucle para iterar sobre una lista.",
      "d) Establecer estilos para un elemento HTML."
      ]
    },
    {
      "id": 186,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es una cadena de caracteres en JavaScript?",
      "answer": "Una cadena de caracteres en JavaScript es una secuencia de caracteres alfanuméricos encerrados entre comillas simples, dobles, de vuelta ( backticks). Las cadenas son utilizadas para representar texto en un programa y admiten operaciones como concatenación y manipulación de caracteres.",
      "correctAnswer": "c) Una secuencia de caracteres alfanuméricos encerrados entre comillas simples, dobles o de vuelta.",
      "allAnswers": [
      "a) Un tipo de variable numérica en JavaScript.",
      "b) Un identificador único para un elemento en el DOM.",
      "c) Una secuencia de caracteres alfanuméricos encerrados entre comillas simples, dobles o de vuelta.",
      "d) Un operador para comparar dos valores en JavaScript."
      ]
    },
    {
      "id": 187,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cómo se declara una variable en JavaScript utilizando 'let'?",
      "answer": "Una variable se declara en JavaScript utilizando la palabra clave 'let', seguida por el nombre de la variable. Por ejemplo, 'let miVariable;'.",
      "correctAnswer": "a) Utilizando la palabra clave 'let' seguida por el nombre de la variable.",
      "allAnswers": [
      "a) Utilizando la palabra clave 'let' seguida por el nombre de la variable.",
      "b) Con la palabra clave 'var' y un nombre.",
      "c) Mediante la etiqueta <variable> en el HTML.",
      "d) Utilizando la palabra clave 'const' seguida por el nombre de la variable."
      ]
    },
    {
      "id": 188,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el concepto de bucle 'for' en JavaScript y proporcione un ejemplo.",
      "answer": "El bucle 'for' en JavaScript se utiliza para iterar sobre una secuencia de código varias veces. Se compone de tres partes: la inicialización, la condición y la expresión de iteración. Por ejemplo, 'for (let i = 0; i < 5; i++) { /* código a repetir */ }'.",
      "correctAnswer": "a) Estructura utilizada para iterar sobre una secuencia de código varias veces.",
      "allAnswers": [
      "a) Estructura utilizada para iterar sobre una secuencia de código varias veces.",
      "b) Función para declarar una variable.",
      "c) Método para añadir elementos a un array.",
      "d) Etiqueta HTML para crear tablas."
      ]
    },
    {
      "id": 189,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es una array en JavaScript y cómo se declara?",
      "answer": "Un array en JavaScript es una estructura de datos que permite almacenar múltiples valores en una sola variable. Se declara utilizando corchetes y los valores se separan por comas. Por ejemplo, 'let miArray = [1, 2, 3, 4];'.",
      "correctAnswer": "b) Estructura de datos que permite almacenar múltiples valores en una sola variable.",
      "allAnswers": [
      "a) Función para realizar operaciones matemáticas.",
      "b) Estructura de datos que permite almacenar múltiples valores en una sola variable.",
      "c) Método para seleccionar un elemento del DOM.",
      "d) Sintaxis para comentar el código en JavaScript."
      ]
    },
    {
      "id": 190,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el concepto de 'callback' en JavaScript.",
      "answer": "Un 'callback' en JavaScript es una función que se pasa como argumento a otra función y se ejecuta después de que se complete una operación, como una solicitud de red o una operación asíncrona. Se utiliza para manejar operaciones asíncronas y asegurar que el código se ejecute en el momento adecuado.",
      "correctAnswer": "c) Función que se pasa como argumento y se ejecuta después de completar una operación.",
      "allAnswers": [
      "a) Método para agregar estilos a un elemento HTML.",
      "b) Declaración de una variable con alcance global.",
      "c) Función que se pasa como argumento y se ejecuta después de completar una operación.",
      "d) Operador para realizar comparaciones estrictas en JavaScript."
      ]
    },
    {
      "id": 191,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el concepto de 'hoisting' en JavaScript.",
      "answer": "El 'hoisting' en JavaScript es un comportamiento en el cual las declaraciones de variables y funciones son movidas al inicio de su ámbito antes de que se ejecute el código. Esto significa que puedes utilizar una variable o función antes de haberlas declarado. Sin embargo, solo la declaración se mueve, no la asignación de valor.",
      "correctAnswer": "a) Comportamiento en el cual las declaraciones de variables y funciones se mueven al inicio de su ámbito.",
      "allAnswers": [
      "a) Comportamiento en el cual las declaraciones de variables y funciones se mueven al inicio de su ámbito.",
      "b) Técnica para evitar el 'callback hell' en JavaScript.",
      "c) Método para elevar un elemento en la interfaz de usuario.",
      "d) Técnica para la creación de animaciones en JavaScript."
      ]
    },
    {
      "id": 192,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre 'let', 'const' y 'var' en JavaScript?",
      "answer": "'let', 'const' y 'var' son palabras clave para declarar variables en JavaScript. La diferencia principal es el alcance y la capacidad de reasignación. 'let' y 'const' tienen un alcance de bloque y no pueden ser redeclaradas en el mismo ámbito, mientras que 'var' tiene un alcance de función y puede ser redeclarada.",
      "correctAnswer": "a) Palabras clave para declarar variables con diferencias en alcance y reasignación.",
      "allAnswers": [
      "a) Palabras clave para declarar variables con diferencias en alcance y reasignación.",
      "b) Métodos para crear funciones en JavaScript.",
      "c) Técnicas para crear animaciones en una página web.",
      "d) Elementos para definir estilos en una hoja de estilo CSS."
      ]
    },
    {
      "id": 193,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es 'JSON' y cuál es su relación con JavaScript?",
      "answer": "'JSON' (JavaScript Object Notation) es un formato de intercambio de datos ligero que se utiliza para transmitir datos estructurados entre un servidor y un cliente. Su sintaxis es similar a la notación de objetos en JavaScript, lo que facilita su uso con el lenguaje. 'JSON' es comúnmente utilizado en aplicaciones web para el intercambio de datos.",
      "correctAnswer": "c) Formato de intercambio de datos ligero con una sintaxis similar a la notación de objetos en JavaScript.",
      "allAnswers": [
      "a) Técnica para ejecutar código de forma asíncrona en JavaScript.",
      "b) Framework para el desarrollo de interfaces de usuario en JavaScript.",
      "c) Formato de intercambio de datos ligero con una sintaxis similar a la notación de objetos en JavaScript.",
      "d) Método para realizar animaciones en el navegador."
      ]
    },
    {
      "id": 194,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es el 'scope' en JavaScript?",
      "answer": "El 'scope' en JavaScript se refiere al alcance o contexto en el cual las variables y funciones son accesibles. Existen dos tipos principales de 'scope': el 'scope global' y el 'scope local'. Las variables declaradas fuera de una función tienen un 'scope global', mientras que las declaradas dentro de una función tienen un 'scope local'.",
      "correctAnswer": "b) El 'scope' se refiere al alcance o contexto en el cual las variables y funciones son accesibles.",
      "allAnswers": [
      "a) El 'scope' se refiere a la velocidad de ejecución de un programa en JavaScript.",
      "b) El 'scope' se refiere al alcance o contexto en el cual las variables y funciones son accesibles.",
      "c) El 'scope' es una función específica de JavaScript para crear animaciones.",
      "d) El 'scope' se refiere a la resolución de conflictos en la nomenclatura de variables."
      ]
    },
    {
      "id": 195,
      "category": "Javascript",
      "level": "Junior",
      "question": "Explique el concepto de 'if-else' en JavaScript y proporcione un ejemplo.",
      "answer": "La estructura 'if-else' en JavaScript se utiliza para realizar una comprobación condicional. Si la condición es verdadera, se ejecuta el bloque de código dentro del 'if'. Si es falsa, se ejecuta el bloque 'else'. Por ejemplo, 'if (temperatura > 30) { /* código para calor / } else { / código para frío */ }'.",
      "correctAnswer": "b) Estructura para realizar una comprobación condicional con bloques 'if' y 'else'.",
      "allAnswers": [
      "a) Método para declarar una función en JavaScript.",
      "b) Estructura para realizar una comprobación condicional con bloques 'if' y 'else'.",
      "c) Método para sumar dos números en JavaScript.",
      "d) Etiqueta HTML para crear enlaces."
      ]
    },
    {
      "id": 196,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es un bucle 'while' en JavaScript y cómo se utiliza?",
      "answer": "Un bucle 'while' en JavaScript se utiliza para repetir un bloque de código mientras una condición especificada sea verdadera. La condición se evalúa antes de ejecutar el bloque de código en cada iteración. Por ejemplo, 'let i = 0; while (i < 5) { /* código a repetir */ i++; }'.",
      "correctAnswer": "c) Estructura para repetir un bloque de código mientras una condición sea verdadera.",
      "allAnswers": [
      "a) Método para agregar estilos a un elemento HTML.",
      "b) Declaración de una variable con alcance global.",
      "c) Estructura para repetir un bloque de código mientras una condición sea verdadera.",
      "d) Operador para realizar comparaciones estrictas en JavaScript."
      ]
    },
    {
      "id": 197,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cómo se agrega un elemento al final de un array en JavaScript?",
      "answer": "Para agregar un elemento al final de un array en JavaScript, puedes utilizar el método 'push()'. Por ejemplo, 'miArray.push(nuevoElemento);' añadirá 'nuevoElemento' al final de 'miArray'.",
      "correctAnswer": "a) Utilizando el método 'push()' para agregar un elemento al final del array.",
      "allAnswers": [
      "a) Utilizando el método 'push()' para agregar un elemento al final del array.",
      "b) Con el método 'pop()' para eliminar el último elemento del array.",
      "c) Utilizando el método 'shift()' para agregar un elemento al principio del array.",
      "d) Con el método 'unshift()' para eliminar el primer elemento del array."
      ]
    },
    {
      "id": 198,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cómo se realiza una comparación estricta en JavaScript?",
      "answer": "Una comparación estricta en JavaScript se realiza utilizando el operador '===' (triple igual). Este operador compara tanto el valor como el tipo de dos operandos. Por ejemplo, '5 === '5'' sería falso debido a la diferencia en el tipo de datos.",
      "correctAnswer": "c) Utilizando el operador '===' que compara tanto el valor como el tipo de los operandos.",
      "allAnswers": [
      "a) Con el operador '==' que compara solo el valor de los operandos.",
      "b) Utilizando el operador '=' para asignar valores.",
      "c) Utilizando el operador '===' que compara tanto el valor como el tipo de los operandos.",
      "d) Con el operador '!=' que verifica la desigualdad de valor sin considerar el tipo."
      ]
    },
    {
      "id": 199,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre 'null' y 'undefined' en JavaScript?",
      "answer": "'null' y 'undefined' en JavaScript son valores que indican la ausencia de un valor. 'null' es asignado por el programador para indicar la ausencia intencional de un objeto o valor, mientras que 'undefined' indica que una variable no ha sido inicializada o que una propiedad de un objeto no existe. En términos de tipo, 'null' es un objeto, mientras que 'undefined' es de tipo 'undefined'.",
      "correctAnswer": "c) 'null' es asignado por el programador para indicar la ausencia intencional, mientras que 'undefined' indica que una variable no ha sido inicializada o que una propiedad de un objeto no existe en JavaScript.",
      "allAnswers": [
      "a) 'null' indica la ausencia de un valor, y 'undefined' es asignado por el programador.",
      "b) 'null' y 'undefined' son lo mismo y se pueden usar indistintamente.",
      "c) 'null' es asignado por el programador para indicar la ausencia intencional, mientras que 'undefined' indica que una variable no ha sido inicializada o que una propiedad de un objeto no existe en JavaScript.",
      "d) 'null' es de tipo 'undefined' en JavaScript."
      ]
    },
    {
      "id": 200,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es una función de flecha ('arrow function') en JavaScript y cuándo se utiliza?",
      "answer": "Una función de flecha en JavaScript es una forma más concisa de escribir funciones. Se introdujo en ECMAScript 6. La sintaxis de una función de flecha es más corta y no vincula su propio 'this'. Se utiliza cuando se desea una función anónima o cuando se quiere preservar el valor de 'this' desde el ámbito circundante.",
      "correctAnswer": "a) Una forma más concisa de escribir funciones en JavaScript, introducida en ECMAScript 6.",
      "allAnswers": [
      "a) Una forma más concisa de escribir funciones en JavaScript, introducida en ECMAScript 6.",
      "b) Un tipo de función que solo puede ser llamada desde otras funciones.",
      "c) Una función que siempre vincula su propio 'this'.",
      "d) Un tipo de función obsoleta en JavaScript."
      ]
    },
    {
      "id": 201,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es una 'closure' o cierre en JavaScript y cómo funciona?",
      "answer": "Una 'closure' en JavaScript es una función que tiene acceso a variables fuera de su propio ámbito léxico, incluso después de que la función ha terminado de ejecutarse. Esto se logra capturando las variables en el momento de la creación de la 'closure'. Las 'closures' son útiles para crear funciones que mantienen estado o para implementar conceptos como datos privados.",
      "correctAnswer": "b) Función que tiene acceso a variables fuera de su propio ámbito léxico.",
      "allAnswers": [
      "a) Función que cierra el programa después de ejecutarse.",
      "b) Función que tiene acceso a variables fuera de su propio ámbito léxico.",
      "c) Función que se utiliza para cerrar la conexión de red.",
      "d) Tipo de dato para almacenar valores numéricos con decimales."
      ]
    },
    {
      "id": 202,
      "category": "Javascript",
      "level": "Middle",
      "question": "Explique el concepto de 'Promise' en JavaScript y su propósito.",
      "answer": "Una 'Promise' en JavaScript es un objeto que representa el resultado eventual de una operación asíncrona. Puede estar en uno de los tres estados: pendiente, resuelto (cumplido) o rechazado. Las 'Promise' permiten manejar operaciones asíncronas de manera más estructurada, evitando el anidamiento excesivo de 'callbacks'.",
      "correctAnswer": "c) Objeto que representa el resultado eventual de una operación asíncrona.",
      "allAnswers": [
      "a) Función para declarar variables en JavaScript.",
      "b) Método para gestionar eventos de clic en elementos HTML.",
      "c) Objeto que representa el resultado eventual de una operación asíncrona.",
      "d) Técnica para realizar animaciones suaves en la interfaz de usuario."
      ]
    },
    {
      "id": 203,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es el 'Event Bubbling' y cómo se maneja en JavaScript?",
      "answer": "El 'Event Bubbling' es un mecanismo en el cual un evento se propaga desde el elemento que lo desencadenó hasta la raíz del documento. Puedes manejar el 'Event Bubbling' utilizando 'event.stopPropagation()', que detiene la propagación del evento. Esto permite controlar qué elementos capturan y responden a un evento específico.",
      "correctAnswer": "a) Mecanismo en el cual un evento se propaga desde el elemento que lo desencadenó hasta la raíz del documento, y se maneja con 'event.stopPropagation()'.",
      "allAnswers": [
      "a) Mecanismo en el cual un evento se propaga desde el elemento que lo desencadenó hasta la raíz del documento, y se maneja con 'event.stopPropagation()'.",
      "b) Técnica para animar elementos en una página web.",
      "c) Método para capturar eventos en la fase de burbujeo.",
      "d) Estrategia para gestionar la concurrencia en JavaScript."
      ]
    },
    {
      "id": 204,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es el operador 'typeof' en JavaScript y cuál es su propósito?",
      "answer": "El operador 'typeof' en JavaScript se utiliza para obtener el tipo de datos de una variable u expresión. Puedes usarlo de la siguiente manera: 'typeof miVariable;' devolverá una cadena que indica el tipo de 'miVariable', ya sea 'number', 'string', 'object', entre otros.",
      "correctAnswer": "d) Se utiliza para obtener el tipo de datos de una variable u expresión en JavaScript.",
      "allAnswers": [
      "a) Operador para comparar el tipo y el valor de dos variables.",
      "b) Sintaxis para declarar variables en JavaScript.",
      "c) Método para realizar operaciones matemáticas en JavaScript.",
      "d) Se utiliza para obtener el tipo de datos de una variable u expresión en JavaScript."
      ]
    },
    {
      "id": 205,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es 'this' en JavaScript y cómo funciona?",
      "answer": "En JavaScript, 'this' se refiere al objeto al cual pertenece la función que está siendo ejecutada. El valor de 'this' puede cambiar dependiendo de cómo se llama la función: en el contexto global, 'this' se refiere al objeto global (por ejemplo, 'window' en un navegador), mientras que dentro de un objeto, 'this' se refiere al objeto que contiene la función.",
      "correctAnswer": "d) Se refiere al objeto al cual pertenece la función en ejecución y su valor puede cambiar dependiendo del contexto de la llamada.",
      "allAnswers": [
      "a) Palabra clave para declarar variables en JavaScript.",
      "b) Valor nulo que indica la ausencia de un objeto.",
      "c) Operador utilizado para comparar valores en JavaScript.",
      "d) Se refiere al objeto al cual pertenece la función en ejecución y su valor puede cambiar dependiendo del contexto de la llamada."
      ]
    },
    {
      "id": 206,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Cómo funciona 'async/await' en JavaScript y cuál es su ventaja sobre las 'Promises'?",
      "answer": "'async/await' es una característica de JavaScript que simplifica el manejo de operaciones asíncronas. Permite escribir código asíncrono de manera síncrona, haciéndolo más legible y mantenible. 'async' se utiliza en la definición de funciones, y 'await' se utiliza para esperar la resolución de una 'Promise' dentro de una función asíncrona. Su ventaja sobre las 'Promises' es una sintaxis más limpia y un código más fácil de entender.",
      "correctAnswer": "b) Característica que simplifica el manejo de operaciones asíncronas en JavaScript, con una sintaxis más limpia y legible que las 'Promises'.",
      "allAnswers": [
      "a) Método para declarar variables de manera asíncrona.",
      "b) Característica que simplifica el manejo de operaciones asíncronas en JavaScript, con una sintaxis más limpia y legible que las 'Promises'.",
      "c) Método para ejecutar funciones en paralelo.",
      "d) Técnica para crear animaciones avanzadas en la interfaz de usuario."
      ]
    },
    {
      "id": 207,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es 'NaN' en JavaScript y cómo se verifica si un valor es 'NaN'?",
      "answer": "'NaN' significa 'Not a Number' y representa un valor no numérico. Puedes verificar si un valor es 'NaN' utilizando la función 'isNaN(valor)'. Retorna verdadero si el valor no es un número. Por ejemplo, 'isNaN('abc')' retorna verdadero.",
      "correctAnswer": "c) 'NaN' representa un valor no numérico y se verifica con la función 'isNaN(valor)'.",
      "allAnswers": [
      "a) Valor que indica la ausencia de un objeto en JavaScript.",
      "b) Método para realizar operaciones matemáticas en JavaScript.",
      "c) 'NaN' representa un valor no numérico y se verifica con la función 'isNaN(valor)'.",
      "d) Palabra clave para declarar variables constantes en JavaScript."
      ]
    },
    {
      "id": 208,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es 'destructuring' o desestructuración en JavaScript y cómo se utiliza con arrays?",
      "answer": "'Destructuring' en JavaScript es una forma de extraer valores de arrays o propiedades de objetos y asignarlos a variables. Con arrays, puedes hacer 'const [a, b] = miArray;' para asignar el primer y segundo elemento de 'miArray' a las variables 'a' y 'b', respectivamente.",
      "correctAnswer": "c) Forma de extraer valores de arrays u objetos y asignarlos a variables, y con arrays se realiza con 'const [a, b] = miArray;'.",
      "allAnswers": [
      "a) Método para destruir un objeto en JavaScript.",
      "b) Técnica para evitar la propagación de eventos en JavaScript.",
      "c) Forma de extraer valores de arrays u objetos y asignarlos a variables, y con arrays se realiza con 'const [a, b] = miArray;'.",
      "d) Método para realizar operaciones matemáticas en arrays de JavaScript."
      ]
    },
    {
      "id": 209,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es 'AJAX' y cuál es su papel en el desarrollo web?",
      "answer": "'AJAX' (Asynchronous JavaScript and XML) es una tecnología que permite realizar solicitudes asíncronas al servidor desde una página web sin tener que recargarla. Su papel en el desarrollo web es mejorar la experiencia del usuario al permitir la actualización de contenido sin recargar la página completa, lo que hace que las aplicaciones sean más rápidas y dinámicas.",
      "correctAnswer": "c) Tecnología que permite realizar solicitudes asíncronas al servidor para actualizar contenido en una página web sin recargarla.",
      "allAnswers": [
      "a) Estándar para el diseño de hojas de estilo en una página web.",
      "b) Método para cifrar datos transmitidos entre un cliente y un servidor.",
      "c) Tecnología que permite realizar solicitudes asíncronas al servidor para actualizar contenido en una página web sin recargarla.",
      "d) Framework para la creación de animaciones en JavaScript."
      ]
    },
    {
      "id": 210,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Cómo se maneja el manejo de errores en JavaScript?",
      "answer": "En JavaScript, los errores se manejan mediante bloques 'try...catch'. Puedes colocar el código que puede generar un error dentro del bloque 'try', y si se produce un error, se captura y se maneja en el bloque 'catch'. Esto ayuda a evitar que los errores detengan la ejecución del programa.",
      "correctAnswer": "d) Mediante bloques 'try...catch' que permiten capturar y manejar errores durante la ejecución del código.",
      "allAnswers": [
      "a) A través de la palabra clave 'error' que detiene la ejecución del programa.",
      "b) Con el operador 'throw' que lanza un error en cualquier punto del código.",
      "c) Utilizando funciones de retorno de errores en JavaScript.",
      "d) Mediante bloques 'try...catch' que permiten capturar y manejar errores durante la ejecución del código."
      ]
    },
    {
      "id": 211,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué significa que un objeto en JavaScript sea mutable?",
      "answer": "En JavaScript, un objeto mutable es aquel cuyos valores pueden ser modificados después de su creación. Esto significa que puedes cambiar las propiedades de un objeto mutable, lo que lo diferencia de los objetos inmutables cuyos valores no pueden ser alterados una vez que han sido asignados.",
      "correctAnswer": "a) Un objeto mutable permite modificar sus valores después de su creación.",
      "allAnswers": [
      "a) Un objeto mutable permite modificar sus valores después de su creación.",
      "b) Un objeto mutable es aquel que no puede ser modificado.",
      "c) Un objeto mutable solo permite cambios en sus propiedades numéricas.",
      "d) Un objeto mutable no puede contener funciones."
      ]
    },
    {
      "id": 214,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre 'forEach()' y 'map()' en JavaScript?",
      "answer": "'forEach()' y 'map()' son métodos en JavaScript utilizados con arrays. La diferencia principal es que 'forEach()' no devuelve un nuevo array, mientras que 'map()' devuelve un nuevo array con los resultados de llamar a una función proporcionada para cada elemento del array original.",
      "correctAnswer": "c) 'forEach()' no devuelve un nuevo array, mientras que 'map()' devuelve un nuevo array con los resultados de la función aplicada a cada elemento.",
      "allAnswers": [
      "a) 'forEach()' y 'map()' son sinónimos y pueden usarse indistintamente.",
      "b) 'forEach()' y 'map()' devuelven nuevos arrays con el mismo contenido.",
      "c) 'forEach()' no devuelve un nuevo array, mientras que 'map()' devuelve un nuevo array con los resultados de la función aplicada a cada elemento.",
      "d) 'forEach()' y 'map()' son métodos obsoletos en JavaScript."
      ]
    },
    {
      "id": 215,
      "category": "Javascript",
      "level": "Middle",
      "question": "Explique qué es ECMAScript en el contexto de JavaScript.",
      "answer": "ECMAScript, abreviado como ES, es la especificación estándar en la que se basa JavaScript. Define las características del lenguaje, incluidos los elementos como tipos de datos, operadores y estructuras de control. JavaScript implementa ECMAScript y puede incluir características adicionales no definidas en la especificación.",
      "correctAnswer": "a) Especificación estándar en la que se basa JavaScript, define las características del lenguaje como tipos de datos y operadores.",
      "allAnswers": [
      "a) Especificación estándar en la que se basa JavaScript, define las características del lenguaje como tipos de datos y operadores.",
      "b) Biblioteca de funciones adicionales para JavaScript.",
      "c) Herramienta de desarrollo web para depurar código JavaScript.",
      "d) Estilo de codificación recomendado para proyectos JavaScript."
      ]
    },
    {
      "id": 216,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Cómo se utiliza el método 'reduce()' en JavaScript y cuál es su propósito?",
      "answer": "El método 'reduce()' en JavaScript se utiliza en arrays para reducir los elementos a un único valor. Toma una función de devolución de llamada y un valor inicial. La función se ejecuta en cada elemento del array, acumulando un resultado que se devuelve al final. Es útil para sumar elementos, concatenar cadenas, entre otros.",
      "correctAnswer": "c) Se utiliza en arrays para reducir los elementos a un único valor mediante una función de devolución de llamada.",
      "allAnswers": [
      "a) Se utiliza para duplicar todos los elementos de un array.",
      "b) Ordena los elementos de un array en orden descendente.",
      "c) Se utiliza en arrays para reducir los elementos a un único valor mediante una función de devolución de llamada.",
      "d) Filtra los elementos de un array según una condición dada."
      ]
    },
    {
      "id": 217,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Cuál es el propósito del método 'filter()' en JavaScript?",
      "answer": "El método 'filter()' en JavaScript se utiliza en arrays para crear un nuevo array con elementos que cumplen una condición específica. Filtra los elementos según la función de devolución de llamada proporcionada, que debe devolver verdadero o falso. Los elementos que devuelven verdadero se incluyen en el nuevo array.",
      "correctAnswer": "b) Crear un nuevo array con elementos que cumplen una condición específica.",
      "allAnswers": [
      "a) Modificar directamente los elementos de un array.",
      "b) Crear un nuevo array con elementos que cumplen una condición específica.",
      "c) Ordenar los elementos de un array alfabéticamente.",
      "d) Convertir todos los elementos de un array a cadenas de texto."
      ]
    },
    {
      "id": 218,
      "category": "Javascript",
      "level": "Middle",
      "question": "Explique la diferencia entre 'let' y 'const' en cuanto a la reasignación de variables.",
      "answer": "La diferencia entre 'let' y 'const' en JavaScript es que 'let' permite la reasignación de variables, mientras que 'const' no lo permite. Una vez que se asigna un valor a una constante ('const'), no se puede cambiar ese valor. En cambio, con 'let', puedes asignar un nuevo valor a la variable en cualquier momento.",
      "correctAnswer": "a) 'let' permite la reasignación de variables, mientras que 'const' no lo permite.",
      "allAnswers": [
      "a) 'let' permite la reasignación de variables, mientras que 'const' no lo permite.",
      "b) 'let' y 'const' tienen el mismo comportamiento en cuanto a la reasignación de variables.",
      "c) 'let' solo puede ser utilizado en bucles, mientras que 'const' se utiliza en funciones.",
      "d) 'const' permite la reasignación solo en funciones declaradas con la palabra clave 'function'."
      ]
    },
    {
      "id": 219,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué es el operador ternario y cómo se utiliza en JavaScript?",
      "answer": "El operador ternario en JavaScript es una forma abreviada de escribir una estructura 'if-else'. Tiene la forma 'condición ? expresión1 : expresión2'. Si la condición es verdadera, se devuelve expresión1; de lo contrario, se devuelve expresión2. Por ejemplo, 'let resultado = (edad >= 18) ? 'Mayor de edad' : 'Menor de edad';'.",
      "correctAnswer": "b) Forma abreviada de la estructura 'if-else' con la sintaxis 'condición ? expresión1 : expresión2'.",
      "allAnswers": [
      "a) Método para declarar funciones en JavaScript.",
      "b) Forma abreviada de la estructura 'if-else' con la sintaxis 'condición ? expresión1 : expresión2'.",
      "c) Operador para realizar operaciones matemáticas en JavaScript.",
      "d) Sintaxis para comentarios de varias líneas en JavaScript."
      ]
    },
    {
      "id": 220,
      "category": "Javascript",
      "level": "Middle",
      "question": "Explique qué es 'fetch()' y cómo se utiliza para realizar solicitudes HTTP en JavaScript.",
      "answer": "'fetch()' es una función en JavaScript utilizada para realizar solicitudes HTTP. Proporciona una interfaz más moderna y flexible en comparación con 'XMLHttpRequest'. 'fetch()' devuelve una Promesa que resuelve en la respuesta a la solicitud, y se puede encadenar con métodos como 'then()' para procesar la respuesta.",
      "correctAnswer": "b) Función utilizada para realizar solicitudes HTTP en JavaScript, devuelve una Promesa que resuelve en la respuesta.",
      "allAnswers": [
      "a) Función para la creación de animaciones en JavaScript.",
      "b) Función utilizada para realizar solicitudes HTTP en JavaScript, devuelve una Promesa que resuelve en la respuesta.",
      "c) Método para la manipulación de bases de datos en JavaScript.",
      "d) Técnica para el manejo de eventos de clic en elementos HTML."
      ]
    },
    {
      "id": 221,
      "category": "Javascript",
      "level": "Middle",
      "question": "¿Qué son las 'funciones puras' en JavaScript y por qué son importantes?",
      "answer": "Las 'funciones puras' en JavaScript son funciones que, dado el mismo conjunto de entradas, siempre producirán la misma salida sin causar efectos secundarios. No modifican variables fuera de su alcance y no tienen efectos colaterales. Son importantes porque facilitan el razonamiento sobre el código, mejoran la testabilidad y contribuyen a la previsibilidad del programa.",
      "correctAnswer": "a) Funciones que, dado el mismo conjunto de entradas, siempre producirán la misma salida sin causar efectos secundarios.",
      "allAnswers": [
      "a) Funciones que, dado el mismo conjunto de entradas, siempre producirán la misma salida sin causar efectos secundarios.",
      "b) Funciones que siempre modifican variables fuera de su alcance.",
      "c) Funciones que solo producen salidas diferentes con entradas diferentes.",
      "d) Funciones que siempre causan efectos secundarios en el ámbito global."
      ]
    },
    {
      "id": 222,
      "category": "Javascript",
      "level": "Senior",
      "question": "Explique el patrón 'Singleton' en JavaScript y proporcione un ejemplo de su implementación.",
      "answer": "El patrón 'Singleton' en JavaScript es un patrón de diseño que garantiza que una clase tenga solo una instancia y proporciona un punto de acceso global a ella. Se implementa utilizando una clase con un método estático que devuelve la única instancia de la clase, creándola si aún no existe. Esto es útil cuando se desea tener una única instancia compartida en todo el programa.",
      "correctAnswer": "b) Patrón de diseño que garantiza que una clase tenga solo una instancia y proporciona un punto de acceso global a ella.",
      "allAnswers": [
      "a) Patrón de diseño que permite tener múltiples instancias de una clase.",
      "b) Patrón de diseño que garantiza que una clase tenga solo una instancia y proporciona un punto de acceso global a ella.",
      "c) Patrón de diseño solo aplicable a funciones en JavaScript.",
      "d) Patrón de diseño utilizado exclusivamente en el desarrollo de interfaces de usuario."
      ]
    },
    {
      "id": 223,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es la 'programación reactiva' en JavaScript y cómo se implementa?",
      "answer": "La 'programación reactiva' en JavaScript es un paradigma de programación que se centra en la propagación de cambios y la reacción a ellos. Se implementa utilizando bibliotecas como RxJS, que proporciona observables y operadores para gestionar secuencias de eventos asíncronos. Los observables representan secuencias de datos y permiten la composición y transformación de estas secuencias de manera declarativa.",
      "correctAnswer": "c) Paradigma de programación que se centra en la propagación de cambios y la reacción a ellos, se implementa utilizando bibliotecas como RxJS.",
      "allAnswers": [
      "a) Paradigma de programación que utiliza exclusivamente bucles 'for' para controlar el flujo.",
      "b) Paradigma de programación que evita completamente el uso de funciones asíncronas.",
      "c) Paradigma de programación que se centra en la propagación de cambios y la reacción a ellos, se implementa utilizando bibliotecas como RxJS.",
      "d) Paradigma de programación que se basa únicamente en funciones puras."
      ]
    },    
    {
      "id": 224,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'TypeScript' y cuál es su relación con JavaScript?",
      "answer": "'TypeScript' es un lenguaje de programación que extiende JavaScript añadiendo tipos estáticos opcionales. Los archivos escritos en TypeScript tienen la extensión '.ts' y deben ser transpilados a JavaScript para su ejecución en el navegador. TypeScript mejora la mantenibilidad y escalabilidad del código al proporcionar un sistema de tipos robusto.",
      "correctAnswer": "a) Lenguaje de programación que extiende JavaScript añadiendo tipos estáticos opcionales.",
      "allAnswers": [
      "a) Lenguaje de programación que extiende JavaScript añadiendo tipos estáticos opcionales.",
      "b) Herramienta de empaquetado de módulos en JavaScript.",
      "c) Framework para el desarrollo de aplicaciones móviles en JavaScript.",
      "d) Versión mejorada de JavaScript con cambios significativos en la sintaxis."
      ]
    },    
    {
      "id": 225,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es el 'currying' en programación funcional y cuál es su ventaja?",
      "answer": "El 'currying' en programación funcional es una técnica que consiste en transformar una función que toma múltiples argumentos en una secuencia de funciones que toman un solo argumento. La ventaja es que permite la aplicación parcial de la función, lo que facilita la creación de funciones especializadas y la composición de funciones de manera más flexible.",
      "correctAnswer": "b) Técnica que consiste en transformar una función que toma múltiples argumentos en una secuencia de funciones que toman un solo argumento.",
      "allAnswers": [
      "a) Técnica para acelerar la ejecución de funciones en programación funcional.",
      "b) Técnica que consiste en transformar una función que toma múltiples argumentos en una secuencia de funciones que toman un solo argumento.",
      "c) Estrategia para evitar el uso de funciones anónimas en programación funcional.",
      "d) Técnica para limitar el alcance de las variables en programación funcional."
      ]
    },
    {
      "id": 226,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Cómo se implementa la herencia en JavaScript y cuál es la diferencia entre 'prototypal inheritance' y 'classical inheritance'?",
      "answer": "En JavaScript, la herencia se implementa mediante prototipos. Cada objeto tiene un prototipo del cual hereda propiedades y métodos. 'Prototypal inheritance' es inherente al lenguaje y se basa en la cadena de prototipos. 'Classical inheritance' simula la herencia de clases de otros lenguajes y fue introducida en ECMAScript 6 con la introducción de las clases.",
      "correctAnswer": "a) Mediante prototipos, diferenciándose de 'prototypal inheritance' y 'classical inheritance'.",
      "allAnswers": [
      "a) Mediante prototipos, diferenciándose de 'prototypal inheritance' y 'classical inheritance'.",
      "b) Utilizando exclusivamente 'classical inheritance' en JavaScript.",
      "c) Implementando interfaces en JavaScript para lograr la herencia.",
      "d) Aplicando únicamente 'prototypal inheritance' en JavaScript."
      ]
    },
    {
      "id": 227,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es el 'event delegation' y cuál es su ventaja en la manipulación de eventos en JavaScript?",
      "answer": "El 'event delegation' en JavaScript es una técnica donde un solo controlador de eventos se coloca en un ancestro común de varios elementos. En lugar de asignar un controlador a cada elemento individual, se utiliza un único controlador en el ancestro y se determina el objetivo del evento en función de la propagación del evento. Esto mejora la eficiencia y reduce la complejidad del código.",
      "correctAnswer": "a) Técnica donde un solo controlador de eventos se coloca en un ancestro común de varios elementos en JavaScript.",
      "allAnswers": [
      "a) Técnica donde un solo controlador de eventos se coloca en un ancestro común de varios elementos en JavaScript.",
      "b) Método para evitar el uso de eventos en JavaScript.",
      "c) Estrategia que asigna un controlador de eventos a cada elemento individualmente.",
      "d) Técnica que solo se aplica a eventos síncronos en JavaScript."
      ]
    },
    {
      "id": 228,
      "category": "Javascript",
      "level": "Senior",
      "question": "Explique el concepto de 'cookie' en el contexto de JavaScript y cómo se utiliza para el almacenamiento de información en el navegador.",
      "answer": "Una 'cookie' en JavaScript es una pequeña cantidad de datos que se almacena en el navegador del usuario. Se utiliza para recordar información específica sobre el usuario, como preferencias o estado de inicio de sesión. Las 'cookies' tienen un límite de tamaño y caducan después de un tiempo especificado. Se pueden utilizar para el seguimiento del usuario y para personalizar la experiencia del usuario.",
      "correctAnswer": "a) Pequeña cantidad de datos almacenados en el navegador del usuario para recordar información específica en JavaScript.",
      "allAnswers": [
      "a) Pequeña cantidad de datos almacenados en el navegador del usuario para recordar información específica en JavaScript.",
      "b) Herramienta exclusiva para la manipulación de estilos en JavaScript.",
      "c) Variable que almacena datos constantes en JavaScript.",
      "d) Método para el almacenamiento permanente de datos en el navegador."
      ]
    },
    {
      "id": 229,
      "category": "Javascript",
      "level": "Senior",
      "question": "Explique el concepto de 'JSON Web Token (JWT)' y cómo se utiliza para la autenticación en aplicaciones web.",
      "answer": "'JSON Web Token (JWT)' en JavaScript es un estándar abierto que define una forma compacta y autónoma de representar información entre dos partes. Se utiliza para la autenticación y transmisión segura de información entre el cliente y el servidor. Un JWT consta de tres partes: encabezado, carga útil y firma. Puede ser incluido en las solicitudes HTTP y verificar la identidad del usuario.",
      "correctAnswer": "c) Estándar que representa información de forma compacta y autónoma, utilizado para la autenticación en aplicaciones web en JavaScript.",
      "allAnswers": [
      "a) Método exclusivo para la manipulación de archivos en JavaScript.",
      "b) Herramienta que solo se aplica a la manipulación de estilos en JavaScript.",
      "c) Estándar que representa información de forma compacta y autónoma, utilizado para la autenticación en aplicaciones web en JavaScript.",
      "d) Técnica que solo se aplica a solicitudes asíncronas en JavaScript."
      ]
    },
    {
      "id": 230,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'localStorage' en JavaScript y cuál es su propósito en la persistencia de datos en el navegador?",
      "answer": "'localStorage' en JavaScript es un mecanismo de almacenamiento de clave-valor en el navegador que permite a las aplicaciones web almacenar datos de manera persistente. A diferencia de las 'cookies', 'localStorage' tiene un límite de almacenamiento más grande y no se transmite con cada solicitud HTTP, lo que lo hace adecuado para almacenar datos locales en el lado del cliente.",
      "correctAnswer": "a) Mecanismo de almacenamiento de clave-valor en el navegador para la persistencia de datos en JavaScript.",
      "allAnswers": [
      "a) Mecanismo de almacenamiento de clave-valor en el navegador para la persistencia de datos en JavaScript.",
      "b) Herramienta exclusiva para la manipulación de estilos en JavaScript.",
      "c) Variable que almacena datos constantes en JavaScript.",
      "d) Método para el almacenamiento temporal de datos en el navegador."
      ]
    },
    {
      "id": 231,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'Cross-Origin Resource Sharing (CORS)' y cómo afecta al intercambio de recursos entre diferentes dominios en JavaScript?",
      "answer": "'Cross-Origin Resource Sharing (CORS)' en JavaScript es un mecanismo que permite o restringe las solicitudes de recursos en una página web desde otro dominio diferente al dominio que sirvió la página original. Esto se implementa mediante encabezados HTTP que indican si un recurso puede ser compartido. CORS es fundamental para la seguridad del navegador al prevenir solicitudes no autorizadas.",
      "correctAnswer": "b) Mecanismo que permite o restringe las solicitudes de recursos entre diferentes dominios en JavaScript.",
      "allAnswers": [
      "a) Técnica que evita completamente la interacción entre recursos de diferentes dominios en JavaScript.",
      "b) Mecanismo que permite o restringe las solicitudes de recursos entre diferentes dominios en JavaScript.",
      "c) Herramienta exclusiva para la manipulación de estilos en JavaScript.",
      "d) Método que solo se aplica a solicitudes síncronas en JavaScript."
      ]
    },
    {
      "id": 232,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'Progressive Web App (PWA)' en el contexto de JavaScript y cuáles son sus características principales?",
      "answer": "Una 'Progressive Web App (PWA)' en JavaScript es una aplicación web que utiliza las últimas tecnologías para proporcionar una experiencia similar a la de una aplicación nativa. Sus características incluyen la capacidad de trabajar sin conexión, la capacidad de ser instalada en la pantalla de inicio del dispositivo, y la capacidad de recibir notificaciones push. Las PWA buscan combinar lo mejor de las aplicaciones web y nativas.",
      "correctAnswer": "c) Aplicación web que proporciona una experiencia similar a una aplicación nativa, con características como trabajo sin conexión e instalación en la pantalla de inicio.",
      "allAnswers": [
      "a) Técnica exclusiva para la manipulación de estilos en JavaScript.",
      "b) Herramienta que solo se aplica a la manipulación de archivos en JavaScript.",
      "c) Aplicación web que proporciona una experiencia similar a una aplicación nativa, con características como trabajo sin conexión e instalación en la pantalla de inicio.",
      "d) Método que solo se aplica a solicitudes síncronas en JavaScript."
      ]
    },
    {
      "id": 233,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'strict mode' en JavaScript y cuál es su propósito?",
      "answer": "'Strict mode' en JavaScript es una característica que te permite escribir un código más seguro al lanzar errores para prácticas que de otra manera pasarían desapercibidas. Evita el uso de variables no declaradas, elimina ambigüedades en la sintaxis y prohíbe ciertas prácticas propensas a errores. Se activa escribiendo 'use strict' al principio de un script o una función.",
      "correctAnswer": "c) Característica que mejora la seguridad y calidad del código en JavaScript.",
      "allAnswers": [
      "a) Técnica exclusiva para la manipulación de archivos en JavaScript.",
      "b) Herramienta que solo se aplica a la manipulación de estilos en JavaScript.",
      "c) Característica que mejora la seguridad y calidad del código en JavaScript.",
      "d) Estrategia que solo se aplica a funciones asíncronas en JavaScript."
      ]
    },
    {
      "id": 234,
      "category": "Javascript",
      "level": "Senior",
      "question": "Explique el concepto de 'Tree Shaking' en el contexto de JavaScript y cómo contribuye a la optimización del tamaño de los archivos.",
      "answer": "'Tree Shaking' en JavaScript es una técnica de optimización que elimina el código no utilizado (dead code) durante la fase de construcción. Se utiliza comúnmente con módulos ES6, donde el bundler puede eliminar las exportaciones que no se utilizan. Esto ayuda a reducir el tamaño de los archivos finales, mejorando así el rendimiento de la aplicación.",
      "correctAnswer": "b) Técnica de optimización que elimina el código no utilizado durante la fase de construcción en JavaScript.",
      "allAnswers": [
      "a) Estrategia diseñada exclusivamente para la creación de interfaces de usuario en JavaScript.",
      "b) Técnica de optimización que elimina el código no utilizado durante la fase de construcción en JavaScript.",
      "c) Herramienta que solo se aplica a la manipulación de archivos en JavaScript.",
      "d) Método que solo se aplica a funciones asíncronas en JavaScript."
      ]
    },
    {
      "id": 235,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'GraphQL' y cómo se utiliza en el desarrollo web junto con JavaScript?",
      "answer": "'GraphQL' en JavaScript es un lenguaje de consulta para APIs que proporciona una manera más eficiente y poderosa de obtener y enviar datos a través de HTTP. A diferencia de las REST APIs, en las que se obtiene un conjunto fijo de datos, con GraphQL, el cliente especifica exactamente qué datos necesita. Esto evita la sobre-solicitud o la falta de información en las respuestas de la API.",
      "correctAnswer": "c) Lenguaje de consulta para APIs que permite obtener y enviar datos de manera eficiente en el desarrollo web junto con JavaScript.",
      "allAnswers": [
      "a) Técnica exclusiva para la manipulación de estilos en JavaScript.",
      "b) Herramienta que solo se aplica a la manipulación de archivos en JavaScript.",
      "c) Lenguaje de consulta para APIs que permite obtener y enviar datos de manera eficiente en el desarrollo web junto con JavaScript.",
      "d) Estrategia que solo se aplica a funciones asíncronas en JavaScript."
      ]
    },
    {
      "id": 236,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'WebAssembly' y cuál es su propósito en el desarrollo web?",
      "answer": "'WebAssembly' es un estándar web que permite ejecutar código de bajo nivel en navegadores web de manera eficiente. Proporciona un formato binario compacto y de alto rendimiento que puede ser ejecutado en entornos virtuales. Su propósito es mejorar el rendimiento de las aplicaciones web al permitir la ejecución de código de manera más eficiente que JavaScript.",
      "correctAnswer": "a) Estándar web que permite ejecutar código de bajo nivel en navegadores para mejorar el rendimiento de las aplicaciones web.",
      "allAnswers": [
      "a) Estándar web que permite ejecutar código de bajo nivel en navegadores para mejorar el rendimiento de las aplicaciones web.",
      "b) Herramienta para la creación de animaciones en JavaScript.",
      "c) Biblioteca para el desarrollo de interfaces de usuario en JavaScript.",
      "d) Método para la creación de servidores web en JavaScript."
      ]
    },
    {
      "id": 237,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Cuál es el propósito de 'Service Worker' en JavaScript y cómo se utiliza?",
      "answer": "'Service Worker' es un script que se ejecuta en segundo plano en el navegador y actúa como un intermediario entre la aplicación web y la red. Su propósito es permitir funciones como notificaciones push, actualizaciones de contenido en segundo plano y el manejo de solicitudes de red. Se utiliza registrándolo en la página web y respondiendo a eventos como 'install' y 'fetch'.",
      "correctAnswer": "b) Actuar como intermediario entre la aplicación web y la red, permitiendo funciones como notificaciones push y actualizaciones de contenido en segundo plano.",
      "allAnswers": [
      "a) Controlar la interfaz de usuario de una aplicación web.",
      "b) Actuar como intermediario entre la aplicación web y la red, permitiendo funciones como notificaciones push y actualizaciones de contenido en segundo plano.",
      "c) Mejorar el rendimiento de funciones asíncronas en JavaScript.",
      "d) Servir como base de datos local en el navegador para aplicaciones web."
      ]
    },
    {
      "id": 238,
      "category": "Javascript",
      "level": "Senior",
      "question": "Explique el concepto de 'debounce' y cómo se implementa en JavaScript.",
      "answer": "El 'debounce' es una técnica en JavaScript que limita la frecuencia con la que se ejecuta una función. Se utiliza comúnmente en situaciones como la gestión de eventos de desplazamiento o redimensionamiento para mejorar el rendimiento. La implementación típica implica establecer un tiempo de espera después de la última vez que se ejecutó la función antes de permitir que se ejecute nuevamente.",
      "correctAnswer": "c) Técnica que limita la frecuencia de ejecución de una función, comúnmente utilizada en gestión de eventos para mejorar el rendimiento.",
      "allAnswers": [
      "a) Método para acelerar la ejecución de funciones en JavaScript.",
      "b) Técnica que aumenta la frecuencia de ejecución de una función.",
      "c) Técnica que limita la frecuencia de ejecución de una función, comúnmente utilizada en gestión de eventos para mejorar el rendimiento.",
      "d) Método para eliminar elementos duplicados de un array en JavaScript."
      ]
    },
    {
      "id": 239,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'WebSockets' y cuándo se utiliza en el desarrollo web?",
      "answer": "Los 'WebSockets' son una tecnología que permite la comunicación bidireccional en tiempo real entre un cliente y un servidor a través de un único canal de conexión persistente. Se utilizan en el desarrollo web para aplicaciones que requieren actualizaciones en tiempo real, como chats en línea, juegos multijugador o colaboración en tiempo real.",
      "correctAnswer": "a) Tecnología que permite la comunicación bidireccional en tiempo real entre un cliente y un servidor, utilizada en aplicaciones que requieren actualizaciones en tiempo real.",
      "allAnswers": [
      "a) Tecnología que permite la comunicación bidireccional en tiempo real entre un cliente y un servidor, utilizada en aplicaciones que requieren actualizaciones en tiempo real.",
      "b) Método para diseñar interfaces de usuario interactivas en JavaScript.",
      "c) Herramienta para la optimización de imágenes en una página web.",
      "d) Técnica para realizar pruebas unitarias en JavaScript."
      ]
    },
    {
      "id": 240,
      "category": "Javascript",
      "level": "Senior",
      "question": "¿Qué es 'ESLint' y cuál es su propósito en el desarrollo de JavaScript?",
      "answer": "'ESLint' es una herramienta de linting para JavaScript que ayuda a identificar y corregir problemas en el código. Realiza análisis estático del código para encontrar patrones problemáticos o código que no sigue las convenciones definidas. 'ESLint' es ampliamente utilizado en el desarrollo para mantener la calidad y consistencia del código.",
      "correctAnswer": "a) Herramienta de linting para identificar y corregir problemas en el código JavaScript.",
      "allAnswers": [
      "a) Herramienta de linting para identificar y corregir problemas en el código JavaScript.",
      "b) Biblioteca para la creación de gráficos en JavaScript.",
      "c) Framework para el desarrollo de juegos en línea.",
      "d) Método para realizar operaciones asíncronas en JavaScript."
      ]
    },    
    {
      "id": 241,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es TypeScript y cómo se relaciona con JavaScript?",
      "answer": "TypeScript es un lenguaje de programación desarrollado por Microsoft que se basa en JavaScript. Se compila a JavaScript y agrega tipos estáticos opcionales, lo que mejora la robustez y la calidad del código JavaScript.",
      "correctAnswer": "a) Lenguaje de programación desarrollado por Microsoft que se basa en JavaScript. Se compila a JavaScript y agrega tipos estáticos opcionales, mejorando la robustez y la calidad del código JavaScript.",
      "allAnswers": [
        "a) Lenguaje de programación desarrollado por Microsoft que se basa en JavaScript. Se compila a JavaScript y agrega tipos estáticos opcionales, mejorando la robustez y la calidad del código JavaScript.",
        "b) Método para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 242,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la extensión de archivo típica para los archivos TypeScript?",
      "answer": "La extensión de archivo típica para los archivos TypeScript es .ts",
      "correctAnswer": "a) .ts",
      "allAnswers": [
        "a) .ts",
        "b) .js",
        "c) .txt",
        "d) .html"
      ]
    },    
    {
      "id": 243,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son las interfaces en TypeScript y para qué se utiliza?",
      "answer": "Las interfaces en TypeScript son estructuras que definen la forma de un objeto, incluyendo sus propiedades, tipos y métodos, pero no su implementación. Se definen usando la palabra clave interface. Por ejemplo: interface Persona { nombre: string; edad: number; }. Con esto se garantiza que los objetos cumplan con ciertas propiedades y métodos.",
      "correctAnswer": "a) Estructuras que definen la forma de un objeto, incluyendo sus propiedades, tipos y métodos, pero no su implementación. Se definen usando la palabra clave interface. Se utilizan para garantizar que los objetos cumplan con ciertas propiedades y métodos.",
      "allAnswers": [
        "a) Estructuras que definen la forma de un objeto, incluyendo sus propiedades, tipos y métodos, pero no su implementación. Se definen usando la palabra clave interface. Se utilizan para garantizar que los objetos cumplan con ciertas propiedades y métodos.",
        "b) Métodos para diseñar interfaces de usuario en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 244,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Por qué TypeScript es útil en el desarrollo web y cuáles son sus ventajas clave?",
      "answer": "TypeScript es útil porque mejora la seguridad y la calidad del código JavaScript al agregar tipos estáticos. Esto facilita la detección temprana de errores y proporciona herramientas de desarrollo más sólidas.",
      "correctAnswer": "a) Mejora la seguridad y la calidad del código JavaScript al agregar tipos estáticos. Facilita la detección temprana de errores y proporciona herramientas de desarrollo más sólidas.",
      "allAnswers": [
        "a) Mejora la seguridad y la calidad del código JavaScript al agregar tipos estáticos. Facilita la detección temprana de errores y proporciona herramientas de desarrollo más sólidas.",
        "b) Permite el diseño de interfaces de usuario interactivas en TypeScript.",
        "c) Optimiza imágenes en una página web.",
        "d) Realiza pruebas unitarias en TypeScript."
      ]
    },
    {
      "id": 245,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es el propósito de las enumeraciones (enums) en TypeScript y cómo se declaran?",
      "answer": "Las enumeraciones en TypeScript permiten definir un conjunto de valores con nombres descriptivos. Se declaran usando enum. Por ejemplo: enum DíasSemana { Lunes, Martes, Miércoles, ... }",
      "correctAnswer": "a) Permiten definir un conjunto de valores con nombres descriptivos. Se declaran usando enum. Se utilizan para mejorar la legibilidad del código al asignar nombres a valores.",
      "allAnswers": [
        "a) Permiten definir un conjunto de valores con nombres descriptivos. Se declaran usando enum. Se utilizan para mejorar la legibilidad del código al asignar nombres a valores.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },
    {
      "id": 246,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es un tipo de dato en TypeScript?",
      "answer": "Un tipo de dato en TypeScript define el tipo de valor que puede contener una variable, como números, cadenas, objetos, etc.",
      "correctAnswer": "a) Define el tipo de valor que puede contener una variable, como números, cadenas, objetos, etc.",
      "allAnswers": [
        "a) Define el tipo de valor que puede contener una variable, como números, cadenas, objetos, etc.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 247,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre interface y type en TypeScript?",
      "answer": "Ambos se utilizan para definir estructuras de datos, pero interface se utiliza principalmente para definir contratos para objetos, mientras que type es más versátil y se puede usar para definir tipos de datos complejos.",
      "correctAnswer": "a) Ambos se utilizan para definir estructuras de datos, pero interface se utiliza principalmente para definir contratos para objetos, mientras que type es más versátil y se puede usar para definir tipos de datos complejos.",
      "allAnswers": [
        "a) Ambos se utilizan para definir estructuras de datos, pero interface se utiliza principalmente para definir contratos para objetos, mientras que type es más versátil y se puede usar para definir tipos de datos complejos.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 248,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la herencia en TypeScript y cómo se implementa?",
      "answer": "La herencia en TypeScript permite que una clase herede propiedades y métodos de otra clase. Se implementa usando la palabra clave extends, por ejemplo: class ClaseHija extends ClasePadre { }",
      "correctAnswer": "a) Permite que una clase herede propiedades y métodos de otra clase. Se implementa usando la palabra clave extends.",
      "allAnswers": [
        "a) Permite que una clase herede propiedades y métodos de otra clase. Se implementa usando la palabra clave extends.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 249,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la inferencia de tipos en TypeScript y cómo se utiliza?",
      "answer": "La inferencia de tipos es la capacidad de TypeScript para deducir automáticamente el tipo de una variable según su valor. No es necesario especificar el tipo explícitamente, TypeScript lo infiere automáticamente.",
      "correctAnswer": "a) La inferencia de tipos es la capacidad de TypeScript para deducir automáticamente el tipo de una variable según su valor. No es necesario especificar el tipo explícitamente, TypeScript lo infiere automáticamente.",
      "allAnswers": [
        "a) La inferencia de tipos es la capacidad de TypeScript para deducir automáticamente el tipo de una variable según su valor. No es necesario especificar el tipo explícitamente, TypeScript lo infiere automáticamente.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 250,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los decoradores en TypeScript y cuál es su propósito en Angular?",
      "answer": "Los decoradores en TypeScript son una característica que permite añadir metadatos a clases, métodos, propiedades y parámetros de funciones. En Angular, los decoradores se utilizan para configurar y modificar el comportamiento de las clases, como inyectar dependencias, definir componentes, servicios y más.",
      "correctAnswer": "a) Permiten añadir metadatos a clases, métodos, propiedades y parámetros de funciones. En Angular, se utilizan para configurar y modificar el comportamiento de las clases, como inyectar dependencias, definir componentes, servicios y más.",
      "allAnswers": [
        "a) Permiten añadir metadatos a clases, métodos, propiedades y parámetros de funciones. En Angular, se utilizan para configurar y modificar el comportamiento de las clases, como inyectar dependencias, definir componentes, servicios y más.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 251,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los genéricos en TypeScript y cómo se utilizan?",
      "answer": "Los genéricos permiten escribir funciones y clases que funcionen con diferentes tipos de datos sin perder la información de tipo. Se definen utilizando parámetros de tipo, por ejemplo: function ejemplo<T>(valor: T): T { return valor; }",
      "correctAnswer": "a) Permiten escribir funciones y clases que funcionen con diferentes tipos de datos sin perder la información de tipo. Se definen utilizando parámetros de tipo.",
      "allAnswers": [
        "a) Permiten escribir funciones y clases que funcionen con diferentes tipos de datos sin perder la información de tipo. Se definen utilizando parámetros de tipo.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 252,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los tipos de unión (union types) en TypeScript y cómo se declaran?",
      "answer": "Los tipos de unión permiten declarar una variable que puede tener varios tipos posibles. Se declaran usando el símbolo | entre los tipos, por ejemplo: let variable: string | number;",
      "correctAnswer": "a) Permiten declarar una variable que puede tener varios tipos posibles. Se declaran usando el símbolo | entre los tipos.",
      "allAnswers": [
        "a) Permiten declarar una variable que puede tener varios tipos posibles. Se declaran usando el símbolo | entre los tipos.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 253,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es un transpilador en TypeScript y cuál es su función?",
      "answer": "Es una herramienta que convierte código TypeScript en código JavaScript, lo que permite que los navegadores y entornos de ejecución de JavaScript lo comprendan y ejecuten. Un ejemplo de transpilador en TypeScript es el propio compilador de TypeScript, que se llama tsc (TypeScript Compiler).",
      "correctAnswer": "a) Herramienta que convierte código TypeScript en código JavaScript para que los navegadores y entornos de ejecución de JavaScript lo comprendan y ejecuten.",
      "allAnswers": [
        "a) Herramienta que convierte código TypeScript en código JavaScript para que los navegadores y entornos de ejecución de JavaScript lo comprendan y ejecuten.",
        "b) Método para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 254,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los módulos en TypeScript y cuál es su ventaja?",
      "answer": "Los módulos en TypeScript permiten organizar el código en archivos separados y reutilizables. Esto ayuda a mantener el código ordenado, modular y facilita la colaboración en proyectos grandes.",
      "correctAnswer": "a) Permiten organizar el código en archivos separados y reutilizables, facilitando el mantenimiento y la colaboración en proyectos grandes.",
      "allAnswers": [
        "a) Permiten organizar el código en archivos separados y reutilizables, facilitando el mantenimiento y la colaboración en proyectos grandes.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 255,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre any y unknown en TypeScript?",
      "answer": "ANY permite cualquier tipo de valor, mientras que UNKNOWN representa un tipo desconocido y es más seguro de usar que any.",
      "correctAnswer": "a) ANY permite cualquier tipo de valor, mientras que UNKNOWN representa un tipo desconocido y es más seguro de usar que any.",
      "allAnswers": [
        "a) ANY permite cualquier tipo de valor, mientras que UNKNOWN representa un tipo desconocido y es más seguro de usar que any.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },
    {
      "id": 256,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cómo se declara una variable con un tipo específico en TypeScript?",
      "answer": "Se puede declarar una variable con un tipo específico utilizando la notación de dos puntos después del nombre de la variable, por ejemplo, let miVariable: number = 5;",
      "correctAnswer": "a) Se puede declarar una variable con un tipo específico utilizando la notación de dos puntos después del nombre de la variable, por ejemplo, let miVariable: number = 5;",
      "allAnswers": [
        "a) Se puede declarar una variable con un tipo específico utilizando la notación de dos puntos después del nombre de la variable, por ejemplo, let miVariable: number = 5;",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 257,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es el sistema de módulos en TypeScript y cuáles son los dos formatos de módulos admitidos?",
      "answer": "El sistema de módulos en TypeScript permite organizar el código en unidades separadas y reutilizables. Los dos formatos de módulos admitidos son CommonJS y ES6 (ECMAScript 2015).",
      "correctAnswer": "a) Permite organizar el código en unidades separadas y reutilizables. Los dos formatos de módulos admitidos son CommonJS y ES6 (ECMAScript 2015).",
      "allAnswers": [
        "a) Permite organizar el código en unidades separadas y reutilizables. Los dos formatos de módulos admitidos son CommonJS y ES6 (ECMAScript 2015).",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },
    {
      "id": 258,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué es un namespace (espacio de nombres) en TypeScript y para qué se utiliza?",
      "answer": "Es una forma de agrupar y organizar código en un ámbito separado para evitar conflictos de nombres. Se utiliza para estructurar grandes aplicaciones y evitar la contaminación del espacio global.",
      "correctAnswer": "a) Es una forma de agrupar y organizar código en un ámbito separado para evitar conflictos de nombres. Se utiliza para estructurar grandes aplicaciones y evitar la contaminación del espacio global.",
      "allAnswers": [
        "a) Es una forma de agrupar y organizar código en un ámbito separado para evitar conflictos de nombres. Se utiliza para estructurar grandes aplicaciones y evitar la contaminación del espacio global.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },
    {
      "id": 259,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué son los tipos condicionales (conditional types) en TypeScript?",
      "answer": "Los tipos condicionales son tipos que se basan en condiciones lógicas para determinar su forma. Se utilizan para crear tipos que dependen de otros tipos, como T extends U ? X : Y.",
      "correctAnswer": "a) Son tipos que se basan en condiciones lógicas para determinar su forma. Se utilizan para crear tipos que dependen de otros tipos.",
      "allAnswers": [
        "a) Son tipos que se basan en condiciones lógicas para determinar su forma. Se utilizan para crear tipos que dependen de otros tipos.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },    
    {
      "id": 260,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Cuál es el propósito de los archivos de declaración (declaration files) en TypeScript y cómo se nombran?",
      "answer": "Los archivos de declaración se utilizan para proporcionar información de tipo para bibliotecas escritas en JavaScript. Se nombran con la extensión .d.ts y deben coincidir con el nombre del archivo JavaScript correspondiente.",
      "correctAnswer": "a) Se utilizan para proporcionar información de tipo para bibliotecas escritas en JavaScript. Se nombran con la extensión .d.ts y deben coincidir con el nombre del archivo JavaScript correspondiente.",
      "allAnswers": [
        "a) Se utilizan para proporcionar información de tipo para bibliotecas escritas en JavaScript. Se nombran con la extensión .d.ts y deben coincidir con el nombre del archivo JavaScript correspondiente.",
        "b) Métodos para diseñar interfaces de usuario interactivas en TypeScript.",
        "c) Herramienta para la optimización de imágenes en una página web.",
        "d) Técnica para realizar pruebas unitarias en TypeScript."
      ]
    },
    
    {
      "id": 301,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes actualizado/a en las últimas tendencias y tecnologías de desarrollo web?",
      "answer": "Me mantengo actualizado/a a través de blogs técnicos, conferencias en línea y cursos en plataformas como Coursera y Udemy. También me gusta unirme a comunidades en línea y participar en grupos de desarrollo web para estar al tanto de las últimas tendencias y discutir ideas con otros profesionales"
    },
    {
      "id": 302,
      "category": "Softskills",
      "level": "Junior",
      "question": "Describe una situación en la que tuviste que colaborar estrechamente con un diseñador o un miembro no técnico del equipo. ¿Cómo manejaste la comunicación y los desafíos?",
      "answer": "Trabajé en un proyecto donde colaboré estrechamente con un diseñador de UX/UI. Mantuvimos una comunicación abierta a lo largo del proyecto, programando reuniones regulares para discutir ideas y cambios. Para superar los desafíos de comunicación, utilizamos herramientas de diseño compartido como Figma, lo que facilitó la colaboración y la comprensión mutua de los requisitos del proyecto."
    },
    {
      "id": 303,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te aseguras de que el código que escribes sea claro y comprensible para otros miembros del equipo?",
      "answer": "Para asegurarme de que mi código sea claro y comprensible, sigo convenciones de nomenclatura consistentes, agrego comentarios explicativos cuando sea necesario y divido el código en funciones y módulos lógicos. También realizo revisiones de código regulares con mis colegas para obtener retroalimentación y garantizar que el código sea fácil de entender"
    },
    {
      "id": 304,
      "category": "Softskills",
      "level": "Junior",
      "question": "Háblame de una vez en la que tuviste que lidiar con una retroalimentación negativa sobre tu trabajo. ¿Cómo manejaste la situación?",
      "answer": "Recibí retroalimentación negativa en un proyecto pasado, y en lugar de tomarlo de manera personal, lo vi como una oportunidad de aprendizaje. Solicité más detalles sobre los problemas específicos, trabajé en mejorar esas áreas y mantuve una comunicación abierta con el cliente o el equipo para asegurarme de que estaban satisfechos con las mejoras"
    },
    {
      "id": 305,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo priorizas y gestionas tus tareas cuando tienes múltiples proyectos o plazos apretados?",
      "answer": "Utilizo metodologías ágiles como Scrum para priorizar tareas y establecer plazos realistas. También uso herramientas de gestión de proyectos como Trello o Jira para realizar un seguimiento de las tareas y garantizar que se cumplan los plazos. La comunicación constante con el equipo es clave para asegurarse de que todos estén alineados en cuanto a las prioridades."
    },
    {
      "id": 306,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes motivado/a cuando enfrentas desafíos técnicos complejos o tareas repetitivas?",
      "answer": "Mantener la motivación en situaciones difíciles es fundamental. Lo hago estableciendo metas claras y dividiendo tareas complejas en pasos más pequeños. También busco inspiración en proyectos pasados exitosos y me doy tiempo para descansar y recargar energías cuando sea necesario."
    },
    {
      "id": 307,
      "category": "Softskills",
      "level": "Junior",
      "question": "Cuéntame sobre una vez en la que tuviste que comunicar un problema técnico a un cliente o a un miembro no técnico de la empresa. ¿Cómo lo hiciste?",
      "answer": "En una ocasión, tuve que explicar un problema técnico a un cliente no técnico. Utilicé un lenguaje claro y evité tecnicismos. Además, utilicé ejemplos visuales o comparaciones simples para que el cliente comprendiera la situación. La empatía y la paciencia son clave en estas situaciones."
    },
    {
      "id": 308,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te aseguras de que tus proyectos de desarrollo web sean accesibles para personas con discapacidades?",
      "answer": "Para garantizar la accesibilidad en mis proyectos de desarrollo web, sigo prácticas como cumplir con las pautas WCAG, realizar pruebas de accesibilidad, colaborar en diseños inclusivos, permitir navegación con teclado, asegurar compatibilidad con lectores de pantalla y usar atributos ARIA cuando sea necesario. También fomento la concienciación sobre accesibilidad y, en casos críticos, considero auditorías de terceros."
    },
    {
      "id": 309,
      "category": "Softskills",
      "level": "Junior",
      "question": "Háblame de una situación en la que tuviste que resolver un conflicto con un colega. ¿Cómo lo manejaste?",
      "answer": "Cuando surgió un conflicto con un colega, primero escuché sus preocupaciones con empatía. Luego, traté de encontrar un terreno común y propuse soluciones constructivas. La comunicación abierta y la disposición para comprometerse son esenciales para resolver conflictos de manera efectiva."
    },
    {
      "id": 310,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes organizado/a en tu trabajo diario como Front-End Developer?",
      "answer": "Utilizo herramientas de gestión de tareas como Asana o Trello para llevar un registro de las actividades diarias. También establezco un horario de trabajo estructurado y priorizo las tareas según su importancia y plazos. La organización personal y la gestión del tiempo son fundamentales."
    },
    {
      "id": 311,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que el código que escribes sea eficiente en términos de rendimiento?",
      "answer": "Para garantizar un código eficiente en rendimiento, realizo pruebas exhaustivas y utilizo herramientas de perfilamiento para identificar cuellos de botella. También sigo las mejores prácticas de optimización, como minimizar solicitudes de red y reducir la carga de recursos. La colaboración con el equipo de operaciones también es esencial"
    },
    {
      "id": 312,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo manejas las críticas constructivas y las oportunidades de aprendizaje en tu carrera?",
      "answer": "Aprecio las críticas constructivas como oportunidades de crecimiento. Las considero como consejos para mejorar y no como ataques personales. Actúo sobre ellas, busco oportunidades de capacitación y no tengo miedo de admitir cuando no sé algo. Creo que la humildad y el aprendizaje constante son fundamentales en mi carrera."
    },
    {
      "id": 313,
      "category": "Softskills",
      "level": "Middle",
      "question": "Háblame de un proyecto en el que lideraste un equipo de desarrollo. ¿Cómo gestionaste y motivaste a tu equipo?",
      "answer": "Lideré un proyecto en el que formé un equipo de desarrolladores. Para motivarlos, les brindé claridad en los objetivos, escuché sus ideas y preocupaciones, y les proporcioné autonomía para tomar decisiones. También establecimos un sistema de comunicación efectiva y celebramos los logros del equipo."
    },
    {
      "id": 314,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que tus proyectos de desarrollo web cumplan con los estándares de seguridad?",
      "answer": "La seguridad es una prioridad en mis proyectos. Utilizo técnicas de desarrollo seguro, como la validación de entrada, el uso de HTTPS y la protección contra ataques de inyección. Además, realizo pruebas de seguridad regulares y colaboro con expertos en seguridad cuando es necesario"
    },
    {
      "id": 315,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo manejas el estrés en situaciones de alta presión, como un lanzamiento importante o una caída del sitio?",
      "answer": "En situaciones de alta presión, mantengo la calma y me centro en la resolución de problemas. Utilizo la planificación anticipada y la comunicación efectiva para evitar crisis. Además, me aseguro de tener un plan de contingencia en caso de problemas inesperados. El autocontrol y la preparación son clave para manejar el estrés."
    },
    {
      "id": 316,
      "category": "Softskills",
      "level": "Middle",
      "question": "Háblame de un momento en el que lideraste un esfuerzo para mejorar la calidad del código en tu equipo. ¿Qué enfoque tomaste?",
      "answer": "En situaciones de alta presión, mantengo la calma y me centro en la resolución de problemas. Utilizo la planificación anticipada y la comunicación efectiva para evitar crisis. Además, me aseguro de tener un plan de contingencia en caso de problemas inesperados. El autocontrol y la preparación son clave para manejar el estrés."
    },
    {
      "id": 317,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que estás siguiendo las mejores prácticas de desarrollo web y no adoptando malos hábitos?",
      "answer": "Para asegurarme de seguir las mejores prácticas, dedico tiempo a la investigación y la educación continua. Leo libros y artículos técnicos, participo en conferencias y cursos en línea, y me mantengo al tanto de las actualizaciones en la industria. También realizo revisiones de código y busco retroalimentación de mis colegas para identificar áreas de mejora."
    },
    {
      "id": 318,
      "category": "Softskills",
      "level": "Senior",
      "question": "Cuéntame sobre una vez en la que tuviste que aprender una nueva tecnología o lenguaje de programación rápidamente. ¿Cómo lo hiciste?",
      "answer": "En una ocasión, tuve que aprender un nuevo marco de trabajo en poco tiempo para un proyecto. Para hacerlo, comencé con la documentación oficial y tutoriales en línea. También colaboré con colegas más experimentados y practiqué con proyectos pequeños. La clave fue la dedicación y la disposición para aprender de forma constante."
    },
    {
      "id": 319,
      "category": "Softskills",
      "level": "Senior",
      "question": "¿Cómo te comunicas con los miembros no técnicos del equipo para explicar conceptos técnicos de manera comprensible?",
      "answer": "Cuando necesito comunicar conceptos técnicos a miembros no técnicos, evito el jerga técnico y utilizo ejemplos y analogías simples. Además, me aseguro de escuchar sus preguntas y preocupaciones para aclarar cualquier confusión. La empatía y la paciencia son esenciales para garantizar una comunicación efectiva."
    },
    {
      "id": 320,
      "category": "Softskills",
      "level": "Senior",
      "question": "Háblame de un proyecto en el que enfrentaste un desafío técnico importante. ¿Cómo lo abordaste y qué aprendiste de esa experiencia?",
      "answer": "En un proyecto anterior, enfrenté un desafío técnico complejo relacionado con la escalabilidad. Lo abordé realizando una investigación exhaustiva, consultando con expertos y probando diferentes enfoques. Aprendí la importancia de la perseverancia y la colaboración en equipo, y finalmente, logramos superar el desafío con éxito."
    },
    {
      "id": 361,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es Git y para qué se utiliza en el desarrollo web?",
      "answer": "Git es un sistema de control de versiones que se utiliza en el desarrollo web para rastrear y gestionar cambios en el código fuente. Permite a los desarrolladores trabajar en colaboración y realizar un seguimiento de las modificaciones realizadas en un proyecto a lo largo del tiempo.",
      "correctAnswer": "d) Git es un sistema de control de versiones que se utiliza en el desarrollo web para rastrear y gestionar cambios en el código fuente. Permite a los desarrolladores trabajar en colaboración y realizar un seguimiento de las modificaciones realizadas en un proyecto a lo largo del tiempo.",
      "allAnswers": [
        "a) Git es una herramienta de diseño web.",
        "b) Git es un servidor web para desarrollo.",
        "c) Git es un sistema de control de versiones que solo se utiliza en proyectos grandes.",
        "d) Git es un sistema de control de versiones que se utiliza en el desarrollo web para rastrear y gestionar cambios en el código fuente. Permite a los desarrolladores trabajar en colaboración y realizar un seguimiento de las modificaciones realizadas en un proyecto a lo largo del tiempo."
      ]
    },
    {
      "id": 362,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre Git y GitHub?",
      "answer": "Git es un sistema de control de versiones, mientras que GitHub es una plataforma en línea que proporciona servicios de alojamiento de repositorios Git. Git se utiliza para rastrear cambios a nivel local, mientras que GitHub permite almacenar y colaborar en repositorios de Git en la nube, facilitando la colaboración entre desarrolladores.",
      "correctAnswer": "b) Git es un sistema de control de versiones, mientras que GitHub es una plataforma en línea que proporciona servicios de alojamiento de repositorios Git. Git se utiliza para rastrear cambios a nivel local, mientras que GitHub permite almacenar y colaborar en repositorios de Git en la nube, facilitando la colaboración entre desarrolladores.",
      "allAnswers": [
        "a) Git y GitHub son dos nombres para la misma herramienta.",
        "b) Git es un sistema de control de versiones, mientras que GitHub es una plataforma en línea que proporciona servicios de alojamiento de repositorios Git. Git se utiliza para rastrear cambios a nivel local, mientras que GitHub permite almacenar y colaborar en repositorios de Git en la nube, facilitando la colaboración entre desarrolladores.",
        "b) GitHub es un sistema de control de versiones que funciona con Git.",
        "c) Git es una interfaz gráfica para GitHub."       
      ]
    },    
    {
      "id": 363,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué comando se utiliza para iniciar un nuevo repositorio Git en un proyecto?",
      "answer": "El comando utilizado para iniciar un nuevo repositorio Git en un proyecto es 'git init'.",
      "correctAnswer": "c) 'git init'",
      "allAnswers": [
        "a) 'git create'",
        "b) 'git start'",
        "c) 'git init'",
        "d) 'git new'"
      ]
    },    
    {
      "id": 364,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cómo se realiza un commit en Git y por qué es importante?",
      "answer": "Para realizar un commit en Git, se utiliza el comando 'git commit'. Un commit es importante porque registra un conjunto de cambios en el repositorio, lo que permite realizar un seguimiento de la historia del proyecto y facilita la colaboración en equipo.",
      "correctAnswer": "d) 'git commit'",
      "allAnswers": [
        "a) 'git save' y es importante para Visual Studio",
        "b) 'git push' y es importante para el proyecto",
        "c) 'git update' y es importante por buenas prácticas",
        "d) 'git commit' y es importante para registrar cambios en el repositorio teniendo así un seguimiento de la historia del proyecto"
      ]
    },    
    {
      "id": 365,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es un conflicto de merge en Git y cómo se resuelve?",
      "answer": "Un conflicto de merge en Git ocurre cuando dos ramas diferentes contienen cambios conflictivos en la misma parte del código. Para resolverlo, se debe realizar una revisión manual del conflicto, editar el código para resolver las diferencias y luego realizar un nuevo commit para completar el merge.",
      "correctAnswer": "d) Revisión manual del conflicto, edición del código para resolver las diferencias y un nuevo commit.",
      "allAnswers": [
        "a) Un conflicto de merge es una tontería.Ignorar el conflicto y continuar con el merge.",
        "b) Un conflicto de merge es importante para Visual Studio.Eliminar uno de los cambios para evitar el conflicto.",
        "c) Un conflicto de merge es pan comido.Realizar un nuevo branch para evitar el conflicto.",
        "d) Un conflicto de merge ocurre cuando dos ramas diferentes contienen cambios conflictivos en la misma parte del código. Revisión manual del conflicto, edición del código para resolver las diferencias y un nuevo commit."
      ]
    },    
    {
      "id": 366,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el comando para clonar un repositorio Git existente?",
      "answer": "El comando para clonar un repositorio Git existente es 'git clone <URL_del_repositorio>'. Esto crea una copia local del repositorio remoto en tu máquina.",
      "correctAnswer": "a) 'git clone <URL_del_repositorio>'",
      "allAnswers": [
        "a) 'git clone <URL_del_repositorio>'",
        "b) 'git pull <URL_del_repositorio>'",
        "c) 'git copy <URL_del_repositorio>'",
        "d) 'git init <URL_del_repositorio>'"
      ]
    },    
    {
      "id": 367,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es un commit en Git y por qué es importante?",
      "answer": "Un commit en Git es una instantánea de los cambios en el código. Es importante porque permite realizar un seguimiento del historial de cambios, volver a versiones anteriores y colaborar de manera efectiva en proyectos.",
      "correctAnswer": "d) Un commit en Git es una instantánea de los cambios en el código. Es importante porque permite realizar un seguimiento del historial de cambios, volver a versiones anteriores y colaborar de manera efectiva en proyectos.",
      "allAnswers": [
        "a) Un commit en Git es una copia de seguridad del repositorio.",
        "b) Un commit en Git es solo un comentario en el código.",
        "c) Un commit en Git es una forma de subir archivos al repositorio remoto.",
        "d) Un commit en Git es una instantánea de los cambios en el código. Es importante porque permite realizar un seguimiento del historial de cambios, volver a versiones anteriores y colaborar de manera efectiva en proyectos."
      ]
    },    
    {
      "id": 368,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el propósito del archivo '.gitignore' en un repositorio Git?",
      "answer": "El archivo '.gitignore' se utiliza para especificar archivos y directorios que Git debe ignorar y no rastrear en el control de versiones. Esto es útil para evitar que archivos irrelevantes o sensibles se incluyan en el repositorio.",
      "correctAnswer": "d) El archivo '.gitignore' se utiliza para especificar archivos y directorios que Git debe ignorar y no rastrear en el control de versiones. Esto es útil para evitar que archivos irrelevantes o sensibles se incluyan en el repositorio.",
      "allAnswers": [
        "a) El archivo '.gitignore' es necesario para que Git funcione correctamente.",
        "b) El archivo '.gitignore' se utiliza para almacenar contraseñas de forma segura.",
        "c) El archivo '.gitignore' es una copia de seguridad automática generada por Git.",
        "d) El archivo '.gitignore' se utiliza para especificar archivos y directorios que Git debe ignorar y no rastrear en el control de versiones. Esto es útil para evitar que archivos irrelevantes o sensibles se incluyan en el repositorio."
      ]
    },    
    {
      "id": 369,
      "category": "Git",
      "level": "Middle",
      "question": "Explica la diferencia entre 'git pull' y 'git fetch'.",
      "answer": "'Git pull' descarga los cambios remotos y fusiona automáticamente en la rama actual. 'Git fetch' descarga los cambios remotos pero no realiza la fusión, por lo que debes fusionarlos manualmente si es necesario.",
      "correctAnswer": "c) 'Git pull' descarga los cambios remotos y fusiona automáticamente en la rama actual. 'Git fetch' descarga los cambios remotos pero no realiza la fusión, por lo que debes fusionarlos manualmente si es necesario.",
      "allAnswers": [
        "a) 'Git pull' y 'git fetch' son comandos equivalentes en Git.",
        "b) 'Git pull' y 'git fetch' realizan la misma operación: descargar cambios remotos.",
        "c) 'Git pull' descarga los cambios remotos y fusiona automáticamente en la rama actual. 'Git fetch' descarga los cambios remotos pero no realiza la fusión, por lo que debes fusionarlos manualmente si es necesario.",
        "d) 'Git pull' descarga los cambios remotos pero no realiza la fusión, mientras que 'git fetch' fusiona automáticamente en la rama actual."
      ]
    },    
    {
      "id": 370,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es una rama (branch) en Git y cuál es su propósito?",
      "answer": "Una rama en Git es una línea de desarrollo independiente que permite trabajar en nuevas características o correcciones sin afectar la rama principal. Se utilizan para mantener un historial de cambios organizado y facilitar la colaboración.",
      "correctAnswer": "d) Una rama en Git es una línea de desarrollo independiente que permite trabajar en nuevas características o correcciones sin afectar la rama principal. Se utilizan para mantener un historial de cambios organizado y facilitar la colaboración.",
      "allAnswers": [
        "a) Una rama en Git es un duplicado exacto de la rama principal.Sirve para jugar con el código",
        "b) Una rama en Git es un contenedor para archivos temporales.Sirve de poco al ser temporal",
        "c) Una rama en Git solo se utiliza para almacenar archivos de respaldo.Sirve por si se pierde el trabajo",
        "d) Una rama en Git es una línea de desarrollo independiente que permite trabajar en nuevas características o correcciones sin afectar la rama principal. Se utilizan para mantener un historial de cambios organizado y facilitar la colaboración."
      ]
    },    
    {
      "id": 371,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cómo se fusiona una rama en Git y cuál es el comando utilizado?",
      "answer": "Para fusionar una rama en Git, se utiliza el comando 'git merge <nombre_de_la_rama>' mientras se encuentra en la rama en la que deseas fusionar los cambios.",
      "correctAnswer": "d) Para fusionar una rama en Git, se utiliza el comando 'git merge <nombre_de_la_rama>' mientras se encuentra en la rama en la que deseas fusionar los cambios.",
      "allAnswers": [
        "a) 'git join <nombre_de_la_rama>'",
        "b) 'git branch <nombre_de_la_rama>'",
        "c) 'git combine <nombre_de_la_rama>'",
        "d) Para fusionar una rama en Git, se utiliza el comando 'git merge <nombre_de_la_rama>' mientras se encuentra en la rama en la que deseas fusionar los cambios."
      ]
    },    
    {
      "id": 372,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un conflicto de resolución de merge y cómo se soluciona?",
      "answer": "Un conflicto de resolución de merge ocurre cuando hay conflictos en los cambios entre las ramas fusionadas. Se soluciona manualmente editando los archivos en conflicto, marcándolos como resueltos, y luego realizando un commit para finalizar la fusión.",
      "correctAnswer": "b) Un conflicto de resolución de merge ocurre cuando hay conflictos en los cambios entre las ramas fusionadas. Se soluciona manualmente editando los archivos en conflicto, marcándolos como resueltos, y luego realizando un commit para finalizar la fusión.",
      "allAnswers": [
        "a) Un conflicto de resolución de merge ocurre cuando las ramas se fusionan sin problemas.",
        "b) Un conflicto de resolución de merge ocurre cuando hay conflictos en los cambios entre las ramas fusionadas. Se soluciona manualmente editando los archivos en conflicto, marcándolos como resueltos, y luego realizando un commit para finalizar la fusión.",
        "c) Se resuelve automáticamente sin intervención del usuario.",
        "d) Se soluciona mediante el comando 'git resolve'."
      ]
    },    
    {
      "id": 373,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es la función del comando 'git status' y por qué es útil en el desarrollo con Git?",
      "answer": "El comando 'git status' muestra el estado actual del repositorio, incluyendo los cambios realizados, archivos añadidos, y archivos que aún no han sido rastreados. Es útil para tener una visión general de las modificaciones pendientes y facilita el seguimiento del progreso del trabajo.",
      "correctAnswer": "b) El comando 'git status' muestra el estado actual del repositorio, incluyendo los cambios realizados, archivos añadidos, y archivos que aún no han sido rastreados. Es útil para tener una visión general de las modificaciones pendientes y facilita el seguimiento del progreso del trabajo.",
      "allAnswers": [
        "a) 'git status' se utiliza para fusionar ramas en Git.",
        "b) El comando 'git status' muestra el estado actual del repositorio, incluyendo los cambios realizados, archivos añadidos, y archivos que aún no han sido rastreados. Es útil para tener una visión general de las modificaciones pendientes y facilita el seguimiento del progreso del trabajo.",
        "c) 'git status' se utiliza para revertir cambios en Git.",
        "d) 'git status' es exclusivamente para mostrar información sobre las ramas en Git."
      ]
    },    
    {
      "id": 374,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un repositorio remoto en Git?",
      "answer": "Un repositorio remoto en Git es una versión de tu proyecto alojada en un servidor o en la nube. Permite colaborar con otros desarrolladores y sincronizar los cambios entre diferentes copias del repositorio.",
      "correctAnswer": "d) Un repositorio remoto en Git es una versión de tu proyecto alojada en un servidor o en la nube. Permite colaborar con otros desarrolladores y sincronizar los cambios entre diferentes copias del repositorio.",
      "allAnswers": [
        "a) Un repositorio remoto en Git es una copia local de tu proyecto en la máquina de otro desarrollador.",       
        "b) Un repositorio remoto en Git es una copia de seguridad de tu proyecto almacenada en tu propia máquina.",
        "c) Un repositorio remoto en Git es una versión sin conexión de tu proyecto.",
        "d) Un repositorio remoto en Git es una versión de tu proyecto alojada en un servidor o en la nube. Permite colaborar con otros desarrolladores y sincronizar los cambios entre diferentes copias del repositorio."
      ]
    },    
    {
      "id": 375,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un remoto upstream en Git y cuál es su propósito?",
      "answer": "Un remoto upstream en Git es una referencia a un repositorio remoto que se bifurcó (forked) desde el repositorio original. Su propósito es permitir que el propietario del repositorio original pueda incorporar cambios desde las bifurcaciones (forks) de otros desarrolladores. Esto facilita la colaboración y la integración de cambios en el proyecto principal.",
      "correctAnswer": "b) Un remoto upstream en Git es una referencia a un repositorio remoto que se bifurcó (forked) desde el repositorio original. Su propósito es permitir que el propietario del repositorio original pueda incorporar cambios desde las bifurcaciones (forks) de otros desarrolladores. Esto facilita la colaboración y la integración de cambios en el proyecto principal.",
      "allAnswers": [
        "a) Un remoto upstream en Git es una versión sin conexión de tu proyecto.",
        "b) Un remoto upstream en Git es una referencia a un repositorio remoto que se bifurcó (forked) desde el repositorio original. Su propósito es permitir que el propietario del repositorio original pueda incorporar cambios desde las bifurcaciones (forks) de otros desarrolladores. Esto facilita la colaboración y la integración de cambios en el proyecto principal.",
        "c) Un remoto upstream en Git es una copia local de tu proyecto en la máquina de otro desarrollador.",
        "d) Un remoto upstream en Git es una copia de seguridad de tu proyecto almacenada en tu propia máquina."
      ]
    },
    {
      "id": 376,
      "category": "Git",
      "level": "Middle",
      "question": "Explica el flujo de trabajo típico de Git para colaborar en un proyecto con otros desarrolladores.",
      "answer": "El flujo de trabajo típico de Git involucra clonar un repositorio, crear una rama para tu trabajo, realizar cambios y commits en esa rama, luego fusionar la rama de vuelta a la rama principal (como 'master' o 'main') y finalmente hacer 'push' de tus cambios al repositorio remoto para que otros desarrolladores puedan acceder a ellos.",
      "correctAnswer": "d) El flujo de trabajo típico de Git involucra clonar un repositorio, crear una rama para tu trabajo, realizar cambios y commits en esa rama, luego fusionar la rama de vuelta a la rama principal (como 'master' o 'main') y finalmente hacer 'push' de tus cambios al repositorio remoto para que otros desarrolladores puedan acceder a ellos.",
      "allAnswers": [
        "a) El flujo de trabajo típico de Git implica solo hacer cambios directamente en la rama principal (master o main).",
        "b) El flujo de trabajo típico de Git no implica fusionar ramas.",
        "c) El flujo de trabajo típico de Git no incluye realizar commits.",
        "d) El flujo de trabajo típico de Git involucra clonar un repositorio, crear una rama para tu trabajo, realizar cambios y commits en esa rama, luego fusionar la rama de vuelta a la rama principal (como 'master' o 'main') y finalmente hacer 'push' de tus cambios al repositorio remoto para que otros desarrolladores puedan acceder a ellos."
      ]
    },    
    {
      "id": 377,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es Git rebase y cuál es su propósito?",
      "answer": "'Git rebase' es una operación que permite cambiar la base de una rama. Su propósito es mantener un historial de cambios más limpio y lineal al aplicar los cambios de una rama sobre otra.",
      "correctAnswer": "d) 'Git rebase' es una operación que permite cambiar la base de una rama. Su propósito es mantener un historial de cambios más limpio y lineal al aplicar los cambios de una rama sobre otra.",
      "allAnswers": [
        "a) 'Git rebase' es una operación que permite cambiar la base de una rama. Su propósito es mantener un historial de cambios más limpio y lineal al aplicar los cambios de una rama sobre otra.",
        "b) 'Git rebase' es una operación que elimina por completo el historial de cambios.",
        "c) 'Git rebase' es una operación que solo se puede aplicar a la rama principal (master o main).",
        "d) 'Git rebase' es una operación que no afecta el historial de cambios."     
      ]
    },    
    {
      "id": 378,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es un submódulo Git?",
      "answer": "Un submódulo Git es un repositorio Git dentro de otro repositorio Git. Permite incluir un proyecto dentro de otro como una dependencia, lo que facilita la gestión de proyectos grandes y la colaboración en equipos.",
      "correctAnswer": "d) Un submódulo Git es un repositorio Git dentro de otro repositorio Git. Permite incluir un proyecto dentro de otro como una dependencia, lo que facilita la gestión de proyectos grandes y la colaboración en equipos.",
      "allAnswers": [
        "a) Un submódulo Git es una rama adicional en un repositorio Git.",
        "b) Un submódulo Git es un archivo de configuración para ajustes específicos de Git.",
        "c) Un submódulo Git es una etiqueta de versión en un repositorio Git.",
        "d) Un submódulo Git es un repositorio Git dentro de otro repositorio Git. Permite incluir un proyecto dentro de otro como una dependencia, lo que facilita la gestión de proyectos grandes y la colaboración en equipos."
      ]
    },    
    {
      "id": 379,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es 'git stash' y cuándo se utiliza?",
      "answer": "'Git stash' se utiliza para guardar temporalmente cambios no comprometidos en una rama en un estado de almacenamiento temporal. Esto es útil cuando deseas cambiar de rama sin realizar un commit de los cambios actuales.",
      "correctAnswer": "b) 'Git stash' se utiliza para guardar temporalmente cambios no comprometidos en una rama en un estado de almacenamiento temporal. Esto es útil cuando deseas cambiar de rama sin realizar un commit de los cambios actuales.",
      "allAnswers": [
        "a) 'Git stash' se utiliza para eliminar permanentemente cambios no comprometidos.",
        "b) 'Git stash' se utiliza para guardar temporalmente cambios no comprometidos en una rama en un estado de almacenamiento temporal. Esto es útil cuando deseas cambiar de rama sin realizar un commit de los cambios actuales.",
        "c) 'Git stash' se utiliza para fusionar cambios entre ramas.",
        "d) 'Git stash' se utiliza para revertir un commit en Git."
      ]
    },    
    {
      "id": 380,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es Git bisect y cómo se utiliza para depurar problemas en el código?",
      "answer": "'Git bisect' es una herramienta que ayuda a encontrar el commit que introdujo un problema en el código. Se utiliza ejecutando 'git bisect start', marcando un commit bueno y malo, y Git automáticamente selecciona un commit intermedio para revisar. Continúas marcando bueno o malo hasta encontrar el commit problemático.",
      "correctAnswer": "c) 'Git bisect' es una herramienta que ayuda a encontrar el commit que introdujo un problema en el código. Se utiliza ejecutando 'git bisect start', marcando un commit bueno y malo, y Git automáticamente selecciona un commit intermedio para revisar. Continúas marcando bueno o malo hasta encontrar el commit problemático.",
      "allAnswers": [
        "a) 'Git bisect' es una herramienta para fusionar ramas en Git.",
        "b) 'Git bisect' es una función para revertir cambios en Git.",
        "c) 'Git bisect' es una herramienta que ayuda a encontrar el commit que introdujo un problema en el código. Se utiliza ejecutando 'git bisect start', marcando un commit bueno y malo, y Git automáticamente selecciona un commit intermedio para revisar. Continúas marcando bueno o malo hasta encontrar el commit problemático.",
        "d) 'Git bisect' es una herramienta para clonar un repositorio Git."
      ]
    },    
    {
      "id": 381,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre un repositorio Git local y un repositorio Git remoto?",
      "answer": "Un repositorio Git local se encuentra en la máquina del desarrollador y contiene una copia completa del proyecto. Un repositorio Git remoto está alojado en un servidor y permite la colaboración entre varios desarrolladores al compartir y sincronizar cambios.",
      "correctAnswer": "d) Un repositorio Git local se encuentra en la máquina del desarrollador y contiene una copia completa del proyecto. Un repositorio Git remoto está alojado en un servidor y permite la colaboración entre varios desarrolladores al compartir y sincronizar cambios.",
      "allAnswers": [
        "a) Un repositorio Git local es una versión reducida del repositorio Git remoto.",
        "b) Un repositorio Git local se encuentra en un servidor remoto.",
        "c) Un repositorio Git remoto solo contiene cambios recientes en comparación con el repositorio Git local.",
        "d) Un repositorio Git local se encuentra en la máquina del desarrollador y contiene una copia completa del proyecto. Un repositorio Git remoto está alojado en un servidor y permite la colaboración entre varios desarrolladores al compartir y sincronizar cambios."
      ]
    },    
    {
      "id": 382,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cómo se crea una rama (branch) en Git y cuál es su propósito?",
      "answer": "Para crear una rama en Git, se utiliza el comando 'git branch <nombre_de_la_rama>'. El propósito de una rama es permitir el desarrollo paralelo de características o correcciones sin afectar la rama principal, lo que facilita la colaboración y la organización del trabajo.",
      "correctAnswer": "d) Para crear una rama en Git, se utiliza el comando 'git branch <nombre_de_la_rama>'. El propósito de una rama es permitir el desarrollo paralelo de características o correcciones sin afectar la rama principal, lo que facilita la colaboración y la organización del trabajo.",
      "allAnswers": [
        "a) Una rama en Git se crea automáticamente al iniciar un nuevo proyecto.",
        "b) Para crear una rama en Git, se utiliza el comando 'git create-branch <nombre_de_la_rama>'.",
        "c) Las ramas en Git solo se utilizan para corregir errores en el código.",
        "d) Para crear una rama en Git, se utiliza el comando 'git branch <nombre_de_la_rama>'. El propósito de una rama es permitir el desarrollo paralelo de características o correcciones sin afectar la rama principal, lo que facilita la colaboración y la organización del trabajo."
      ]
    },
    {
      "id": 383,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la herramienta GitKraken?",
      "answer": "GitKraken es una herramienta de interfaz gráfica para Git que facilita la gestión de repositorios Git. Se utiliza para realizar operaciones Git de manera visual y simplificada.",
      "correctAnswer": "a) GitKraken es una herramienta de interfaz gráfica para Git que facilita la gestión de repositorios Git. Se utiliza para realizar operaciones Git de manera visual y simplificada.",
      "allAnswers": [
        "a) GitKraken es una herramienta de interfaz gráfica para Git que facilita la gestión de repositorios Git. Se utiliza para realizar operaciones Git de manera visual y simplificada.",
        "b) GitKraken es una herramienta para desinstalar Git en el sistema.",
        "c) GitKraken es una plataforma de alojamiento de repositorios Git.",
        "d) GitKraken es una herramienta para clonar repositorios Git."    
      ]
    },    
    {
      "id": 384,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cómo se elimina una rama (branch) en Git?",
      "answer": "Para eliminar una rama en Git, se utiliza el comando 'git branch -d <nombre_de_la_rama>' si la rama ha sido fusionada o 'git branch -D <nombre_de_la_rama>' para forzar la eliminación.",
      "correctAnswer": "d) Para eliminar una rama en Git, se utiliza el comando 'git branch -d <nombre_de_la_rama>' si la rama ha sido fusionada o 'git branch -D <nombre_de_la_rama>' para forzar la eliminación.",
      "allAnswers": [
        "a) Para eliminar una rama en Git, se utiliza el comando 'git remove <nombre_de_la_rama>'.",
        "b) Para eliminar una rama en Git, se utiliza el comando 'git delete branch <nombre_de_la_rama>'.",
        "c) Para eliminar una rama en Git, se utiliza el comando 'git branch delete <nombre_de_la_rama>'.",
        "d) Para eliminar una rama en Git, se utiliza el comando 'git branch -d <nombre_de_la_rama>' si la rama ha sido fusionada o 'git branch -D <nombre_de_la_rama>' para forzar la eliminación."
      ]
    },    
    {
      "id": 385,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un pull request en Git y cuál es su función?",
      "answer": "Un pull request en Git es una solicitud que un desarrollador envía para fusionar sus cambios en una rama con otra, generalmente de una rama de características a una rama principal. Su función es permitir la revisión y aprobación de los cambios antes de la fusión.",
      "correctAnswer": "c) Un pull request en Git es una solicitud que un desarrollador envía para fusionar sus cambios en una rama con otra, generalmente de una rama de características a una rama principal. Su función es permitir la revisión y aprobación de los cambios antes de la fusión.",
      "allAnswers": [
        "a) Un pull request en Git es un comando para extraer cambios desde una rama remota.",
        "b) Un pull request en Git es una solicitud para clonar un repositorio remoto.",
        "c) Un pull request en Git es una solicitud que un desarrollador envía para fusionar sus cambios en una rama con otra, generalmente de una rama de características a una rama principal. Su función es permitir la revisión y aprobación de los cambios antes de la fusión.",
        "d) Un pull request en Git es una acción para revertir cambios en una rama."     
      ]
    },    
    {
      "id": 386,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un 'squash commit' en Git y cómo se realiza?",
      "answer": "Un 'squash commit' en Git es la combinación de varios commits en uno solo para mantener un historial de cambios más ordenado. Se realiza durante un rebase interactivo al especificar 'squash' o 'fixup' en los commits que se desean combinar.",
      "correctAnswer": "b) Un 'squash commit' en Git es la combinación de varios commits en uno solo para mantener un historial de cambios más ordenado. Se realiza durante un rebase interactivo al especificar 'squash' o 'fixup' en los commits que se desean combinar.",
      "allAnswers": [
        "a) Un 'squash commit' en Git es un nuevo tipo de commit sin cambios reales.",
        "b) Un 'squash commit' en Git es la combinación de varios commits en uno solo para mantener un historial de cambios más ordenado. Se realiza durante un rebase interactivo al especificar 'squash' o 'fixup' en los commits que se desean combinar.",
        "c) Un 'squash commit' en Git es un commit que introduce conflictos en el código.",
        "d) Un 'squash commit' en Git es un comando para deshacer cambios en un commit."
      ]
    },    
    {
      "id": 387,
      "category": "Git",
      "level": "Senior",
      "question": "Explica el flujo de trabajo de 'git cherry-pick' y cuándo se utiliza.",
      "answer": "'Git cherry-pick' es una operación que permite aplicar un commit específico de una rama a otra. Se utiliza cuando se desea incorporar cambios selectivos de una rama en otra sin fusionar toda la rama.",
      "correctAnswer": "d) 'Git cherry-pick' es una operación que permite aplicar un commit específico de una rama a otra. Se utiliza cuando se desea incorporar cambios selectivos de una rama en otra sin fusionar toda la rama.",
      "allAnswers": [
        "a) 'Git cherry-pick' es una operación que fusiona dos ramas automáticamente.",       
        "b) 'Git cherry-pick' es una operación que revierte un commit en una rama específica.",
        "c) 'Git cherry-pick' es una operación que solo se puede realizar en repositorios remotos.",
        "d) 'Git cherry-pick' es una operación que permite aplicar un commit específico de una rama a otra. Se utiliza cuando se desea incorporar cambios selectivos de una rama en otra sin fusionar toda la rama."
      ]
    },    
    {
      "id": 388,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es la 'staging area' en Git y cuál es su función?",
      "answer": "La 'staging area' en Git es una zona intermedia donde se preparan los cambios antes de realizar un commit. Permite revisar y seleccionar los cambios que se incluirán en el próximo commit, lo que brinda mayor control sobre el historial de versiones.",
      "correctAnswer": "d) La 'staging area' en Git es una zona intermedia donde se preparan los cambios antes de realizar un commit. Permite revisar y seleccionar los cambios que se incluirán en el próximo commit, lo que brinda mayor control sobre el historial de versiones.",
      "allAnswers": [
        "a) La 'staging area' en Git es una zona donde se almacenan permanentemente los cambios.",
        "b) La 'staging area' en Git es un lugar donde se almacenan archivos binarios.",
        "c) La 'staging area' en Git es un espacio de almacenamiento en la nube para proyectos.",
        "d) La 'staging area' en Git es una zona intermedia donde se preparan los cambios antes de realizar un commit. Permite revisar y seleccionar los cambios que se incluirán en el próximo commit, lo que brinda mayor control sobre el historial de versiones."
      ]
    },    
    {
      "id": 389,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el comando para ver el historial de commits en Git?",
      "answer": "El comando para ver el historial de commits en Git es 'git log'.",
      "correctAnswer": "c) El comando para ver el historial de commits en Git es 'git log'.",
      "allAnswers": [
        "a) 'git history'",
        "b) 'git show --commits'",
        "c) 'git log'",
        "d) 'git commit --log'"
      ]
    },    
    {
      "id": 390,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre 'git push' y 'git pull'?",
      "answer": "'Git push' se utiliza para enviar cambios locales a un repositorio remoto. 'Git pull' se utiliza para obtener cambios del repositorio remoto y fusionarlos en la rama local.",
      "correctAnswer": "d) 'Git push' se utiliza para enviar cambios locales a un repositorio remoto. 'Git pull' se utiliza para obtener cambios del repositorio remoto y fusionarlos en la rama local.",
      "allAnswers": [
        "a) 'Git push' se utiliza para obtener cambios del repositorio remoto. 'Git pull' se utiliza para enviar cambios locales a un repositorio remoto.",
        "b) 'Git pull' se utiliza para enviar cambios locales a un repositorio remoto. 'Git push' se utiliza para obtener cambios del repositorio remoto.",
        "c) 'Git push' y 'Git pull' son intercambiables y realizan la misma operación.",
        "d) 'Git push' se utiliza para enviar cambios locales a un repositorio remoto. 'Git pull' se utiliza para obtener cambios del repositorio remoto y fusionarlos en la rama local."
      ]
    },
    {
      "id": 391,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es un 'fork' en Git?",
      "answer": "Un 'fork' en Git es una copia de un repositorio ajeno en tu propia cuenta de GitHub o GitLab. Se utiliza para contribuir a proyectos de código abierto o trabajar en una copia personal del proyecto original.",
      "correctAnswer": "d) Un 'fork' en Git es una copia de un repositorio ajeno en tu propia cuenta de GitHub o GitLab. Se utiliza para contribuir a proyectos de código abierto o trabajar en una copia personal del proyecto original.",
      "allAnswers": [
        "a) Un 'fork' en Git es la acción de bifurcar una rama en dos.",
        "b) Un 'fork' en Git es una característica experimental para clonar un repositorio.",
        "c) Un 'fork' en Git es una herramienta para fusionar ramas en un repositorio.",
        "d) Un 'fork' en Git es una copia de un repositorio ajeno en tu propia cuenta de GitHub o GitLab. Se utiliza para contribuir a proyectos de código abierto o trabajar en una copia personal del proyecto original."
      ]
    },    
    {
      "id": 392,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el propósito de la rama 'master' en Git?",
      "answer": "La rama 'master' en Git suele ser la rama principal que contiene la versión estable del proyecto. Es común utilizarla como base para otras ramas de desarrollo.",
      "correctAnswer": "b) La rama 'master' en Git suele ser la rama principal que contiene la versión estable del proyecto. Es común utilizarla como base para otras ramas de desarrollo.",
      "allAnswers": [
        "a) La rama 'master' en Git es solo una convención de nombre y no tiene un propósito específico.",
        "b) La rama 'master' en Git suele ser la rama principal que contiene la versión estable del proyecto. Es común utilizarla como base para otras ramas de desarrollo.",
        "c) La rama 'master' en Git siempre contiene la versión más reciente del proyecto.",
        "d) La rama 'master' en Git se utiliza solo para propósitos de prueba."
      ]
    },    
    {
      "id": 393,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cuál es el propósito de las etiquetas (tags) en Git?",
      "answer": "Las etiquetas (tags) en Git se utilizan para marcar puntos específicos en la historia del repositorio, como versiones de lanzamiento. Proporcionan un punto de referencia fijo para facilitar la referencia y la recuperación de versiones específicas.",
      "correctAnswer": "d) Las etiquetas (tags) en Git se utilizan para marcar puntos específicos en la historia del repositorio, como versiones de lanzamiento. Proporcionan un punto de referencia fijo para facilitar la referencia y la recuperación de versiones específicas.",
      "allAnswers": [
        "a) Las etiquetas (tags) en Git son solo decorativas y no tienen un propósito real.",
        "b) Las etiquetas (tags) en Git se utilizan solo para marcar commits importantes.",
        "c) Las etiquetas (tags) en Git son solo para uso interno y no se comparten con otros desarrolladores.",
        "d) Las etiquetas (tags) en Git se utilizan para marcar puntos específicos en la historia del repositorio, como versiones de lanzamiento. Proporcionan un punto de referencia fijo para facilitar la referencia y la recuperación de versiones específicas."
      ]
    },    
    {
      "id": 394,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es una 'pre-commit hook' en Git y cuál es su función?",
      "answer": "Una 'pre-commit hook' en Git es un script personalizado que se ejecuta antes de realizar un commit. Su función es realizar comprobaciones o tareas automatizadas, como pruebas, para garantizar que los commits cumplan con los estándares establecidos.",
      "correctAnswer": "a) Una 'pre-commit hook' en Git es un script personalizado que se ejecuta antes de realizar un commit. Su función es realizar comprobaciones o tareas automatizadas, como pruebas, para garantizar que los commits cumplan con los estándares establecidos.",
      "allAnswers": [
        "a) Una 'pre-commit hook' en Git es un script personalizado que se ejecuta antes de realizar un commit. Su función es realizar comprobaciones o tareas automatizadas, como pruebas, para garantizar que los commits cumplan con los estándares establecidos.",
        "b) Una 'pre-commit hook' en Git es una tarea manual que el desarrollador realiza antes de cada commit.",
        "c) Una 'pre-commit hook' en Git es una característica obsoleta y no se recomienda su uso.",
        "d) Una 'pre-commit hook' en Git es una herramienta gráfica para revisar los cambios antes de hacer un commit."       
      ]
    },    
    {
      "id": 395,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre 'git rebase' y 'git merge'?",
      "answer": "'Git rebase' cambia la base de una rama al aplicar los cambios de otra rama, lo que puede mantener un historial más limpio y lineal. 'Git merge' fusiona los cambios de una rama en otra sin cambiar la base, lo que puede crear un historial más ramificado.",
      "correctAnswer": "d) 'Git rebase' cambia la base de una rama al aplicar los cambios de otra rama, lo que puede mantener un historial más limpio y lineal. 'Git merge' fusiona los cambios de una rama en otra sin cambiar la base, lo que puede crear un historial más ramificado.",
      "allAnswers": [
        "a) 'Git rebase' y 'git merge' son comandos equivalentes y se pueden usar indistintamente.",
        "b) 'Git rebase' y 'git merge' son comandos obsoletos y no se recomienda su uso.",
        "c) 'Git rebase' y 'git merge' realizan la misma operación de fusionar cambios de una rama en otra.",
        "d) 'Git rebase' cambia la base de una rama al aplicar los cambios de otra rama, lo que puede mantener un historial más limpio y lineal. 'Git merge' fusiona los cambios de una rama en otra sin cambiar la base, lo que puede crear un historial más ramificado."
      ]
    },    
    {
      "id": 396,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es 'git reflog' y cuál es su propósito?",
      "answer": "'Git reflog' es un registro que almacena un historial de referencias y acciones realizadas en un repositorio Git. Su propósito es proporcionar una forma de recuperar cambios o referencias perdidas, incluso después de operaciones delicadas.",
      "correctAnswer": "b) 'Git reflog' es un registro que almacena un historial de referencias y acciones realizadas en un repositorio Git. Su propósito es proporcionar una forma de recuperar cambios o referencias perdidas, incluso después de operaciones delicadas.",
      "allAnswers": [
        "a) 'Git reflog' es un comando para realizar la fusión de ramas en Git.",
        "b) 'Git reflog' es un registro que almacena un historial de referencias y acciones realizadas en un repositorio Git. Su propósito es proporcionar una forma de recuperar cambios o referencias perdidas, incluso después de operaciones delicadas.",
        "c) 'Git reflog' es un comando para eliminar permanentemente referencias en Git.",
        "d) 'Git reflog' es un comando para revertir cambios específicos en Git."
      ]
    },    
    {
      "id": 397,
      "category": "Git",
      "level": "Senior",
      "question": "Explica la diferencia entre 'git cherry-pick' y 'git rebase'.",
      "answer": "'Git cherry-pick' se utiliza para aplicar un commit específico de una rama a otra, mientras que 'git rebase' permite cambiar la base de una rama aplicando cambios de otra rama. 'Cherry-pick' es selectivo, mientras que 'rebase' cambia la historia completa de una rama.",
      "correctAnswer": "b) 'Git cherry-pick' se utiliza para aplicar un commit específico de una rama a otra, mientras que 'git rebase' permite cambiar la base de una rama aplicando cambios de otra rama. 'Cherry-pick' es selectivo, mientras que 'rebase' cambia la historia completa de una rama.",
      "allAnswers": [
        "a) 'Git cherry-pick' y 'git rebase' son comandos equivalentes en Git.",
        "b) 'Git cherry-pick' se utiliza para aplicar un commit específico de una rama a otra, mientras que 'git rebase' permite cambiar la base de una rama aplicando cambios de otra rama. 'Cherry-pick' es selectivo, mientras que 'rebase' cambia la historia completa de una rama.",
        "c) 'Git cherry-pick' y 'git rebase' son términos intercambiables en Git.",
        "d) 'Git cherry-pick' se utiliza para revertir cambios en una rama, mientras que 'git rebase' se utiliza para fusionar ramas en Git."
      ]
    },    
    {
      "id": 398,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es 'git worktree' y cómo se utiliza?",
      "answer": "'Git worktree' permite trabajar en múltiples ramas simultáneamente en el mismo repositorio. Se utiliza para crear directorios de trabajo adicionales para diferentes ramas o commits, lo que facilita la colaboración en proyectos paralelos.",
      "correctAnswer": "d) 'Git worktree' permite trabajar en múltiples ramas simultáneamente en el mismo repositorio. Se utiliza para crear directorios de trabajo adicionales para diferentes ramas o commits, lo que facilita la colaboración en proyectos paralelos.",
      "allAnswers": [
        "a) 'Git worktree' es un comando para eliminar ramas en Git.",
        "b) 'Git worktree' es una herramienta para visualizar el historial de cambios en Git.",
        "c) 'Git worktree' es una característica para deshacer commits en Git.",
        "d) 'Git worktree' permite trabajar en múltiples ramas simultáneamente en el mismo repositorio. Se utiliza para crear directorios de trabajo adicionales para diferentes ramas o commits, lo que facilita la colaboración en proyectos paralelos."
      ]
    },    
    {
      "id": 399,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué son los 'hooks' en Git y cuáles son algunos ejemplos de ellos?",
      "answer": "Los 'hooks' en Git son scripts personalizables que se ejecutan automáticamente en ciertos eventos, como antes o después de realizar un commit o recibir un 'push'. Algunos ejemplos incluyen 'pre-commit', 'post-commit', 'pre-receive' y 'post-receive' hooks.",
      "correctAnswer": "d) Los 'hooks' en Git son scripts personalizables que se ejecutan automáticamente en ciertos eventos, como antes o después de realizar un commit o recibir un 'push'. Algunos ejemplos incluyen 'pre-commit', 'post-commit', 'pre-receive' y 'post-receive' hooks.",
      "allAnswers": [
        "a) Los 'hooks' en Git son extensiones para agregar nuevas características.",
        "b) Los 'hooks' en Git son comandos para revertir cambios en un repositorio.",
        "c) Los 'hooks' en Git son herramientas para gestionar conflictos de fusión.",
        "d) Los 'hooks' en Git son scripts personalizables que se ejecutan automáticamente en ciertos eventos, como antes o después de realizar un commit o recibir un 'push'. Algunos ejemplos incluyen 'pre-commit', 'post-commit', 'pre-receive' y 'post-receive' hooks."
      ]
    },    
    {
      "id": 400,
      "category": "Git",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre 'git revert' y 'git reset'?",
      "answer": "'Git revert' crea un nuevo commit que deshace los cambios de un commit anterior, mientras que 'git reset' modifica la historia del repositorio eliminando commits. 'Revert' es más seguro para colaboraciones, mientras que 'reset' es más drástico y se usa localmente.",
      "correctAnswer": "c) 'Git revert' crea un nuevo commit que deshace los cambios de un commit anterior, mientras que 'git reset' modifica la historia del repositorio eliminando commits. 'Revert' es más seguro para colaboraciones, mientras que 'reset' es más drástico y se usa localmente.",
      "allAnswers": [
        "a) 'Git revert' y 'git reset' son comandos equivalentes y pueden usarse indistintamente.",
        "b) 'Git revert' se utiliza para deshacer cambios locales, mientras que 'git reset' deshace cambios en el repositorio remoto.",
        "c) 'Git revert' crea un nuevo commit que deshace los cambios de un commit anterior, mientras que 'git reset' modifica la historia del repositorio eliminando commits. 'Revert' es más seguro para colaboraciones, mientras que 'reset' es más drástico y se usa localmente.",
        "d) 'Git revert' modifica la historia del repositorio eliminando commits, mientras que 'git reset' crea un nuevo commit que deshace los cambios de un commit anterior."      
      ]
    },    
    {
      "id": 401,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cómo se crea una etiqueta (tag) en Git?",
      "answer": "Para crear una etiqueta en Git, puedes utilizar el comando 'git tag <nombre_de_la_etiqueta>'. Luego, puedes asociar la etiqueta con un commit específico.",
      "correctAnswer": "a) Para crear una etiqueta en Git, puedes utilizar el comando 'git tag <nombre_de_la_etiqueta>'. Luego, puedes asociar la etiqueta con un commit específico.",
      "allAnswers": [
        "a) Para crear una etiqueta en Git, puedes utilizar el comando 'git tag <nombre_de_la_etiqueta>'. Luego, puedes asociar la etiqueta con un commit específico.",
        "b) Las etiquetas en Git se crean automáticamente para cada commit.",
        "c) El comando 'git create-tag' se utiliza para crear etiquetas en Git.",
        "d) Las etiquetas en Git solo se pueden crear en ramas principales."
      ]
    },    
    {
      "id": 402,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es un repositorio Git bare?",
      "answer": "Un repositorio Git bare es un repositorio sin una copia de trabajo. Se utiliza como repositorio central compartido para colaboración entre desarrolladores y no tiene una estructura de directorios de trabajo.",
      "correctAnswer": "d) Un repositorio Git bare es un repositorio sin una copia de trabajo. Se utiliza como repositorio central compartido para colaboración entre desarrolladores y no tiene una estructura de directorios de trabajo.",
      "allAnswers": [      
        "a) Un repositorio Git bare es un repositorio con múltiples copias de trabajo.",
        "b) Un repositorio Git bare es un repositorio local en la máquina de un desarrollador.",
        "c) Un repositorio Git bare es un repositorio con una estructura de directorios de trabajo, pero sin historial de cambios.",
        "d) Un repositorio Git bare es un repositorio sin una copia de trabajo. Se utiliza como repositorio central compartido para colaboración entre desarrolladores y no tiene una estructura de directorios de trabajo."
      ]
    },    
    {
      "id": 403,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es 'git squash' y cuál es su utilidad?",
      "answer": "'Git squash' es una operación que combina múltiples commits en uno solo. Se utiliza para mantener un historial de commits más limpio y comprensible al agrupar cambios relacionados en un solo commit.",
      "correctAnswer": "c) 'Git squash' es una operación que combina múltiples commits en uno solo. Se utiliza para mantener un historial de commits más limpio y comprensible al agrupar cambios relacionados en un solo commit.",
      "allAnswers": [
        "a) 'Git squash' es una operación que divide un commit en varios.",
        "b) 'Git squash' es una operación que deshace el último commit.",
        "c) 'Git squash' es una operación que combina múltiples commits en uno solo. Se utiliza para mantener un historial de commits más limpio y comprensible al agrupar cambios relacionados en un solo commit.",
        "d) 'Git squash' es una operación que renombra un commit."
      ]
    },
    {
      "id": 404,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es 'git blame' y cómo se utiliza?",
      "answer": "'Git blame' es un comando que muestra quién modificó cada línea de un archivo y en qué commit se realizó la modificación. Se utiliza para rastrear la autoría de cambios en un archivo.",
      "correctAnswer": "d) 'Git blame' es un comando que muestra quién modificó cada línea de un archivo y en qué commit se realizó la modificación. Se utiliza para rastrear la autoría de cambios en un archivo.",
      "allAnswers": [
        "a) 'Git blame' es un comando que revierte cambios en un archivo.",
        "b) 'Git blame' es un comando que fusiona ramas en Git.",
        "c) 'Git blame' es un comando que lista todos los commits en un repositorio.",
        "d) 'Git blame' es un comando que muestra quién modificó cada línea de un archivo y en qué commit se realizó la modificación. Se utiliza para rastrear la autoría de cambios en un archivo."
      ]
    },
    {
      "id": 405,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es 'git filter-branch' y cuándo se utiliza?",
      "answer": "'Git filter-branch' es una herramienta avanzada para reescribir la historia de un repositorio. Se utiliza en situaciones específicas, como eliminar archivos confidenciales de la historia o cambiar nombres de archivos en commits antiguos.",
      "correctAnswer": "d) 'Git filter-branch' es una herramienta avanzada para reescribir la historia de un repositorio. Se utiliza en situaciones específicas, como eliminar archivos confidenciales de la historia o cambiar nombres de archivos en commits antiguos.",
      "allAnswers": [
        "a) 'Git filter-branch' es una herramienta para fusionar ramas en Git.",
        "b) 'Git filter-branch' es una herramienta para crear repositorios remotos.",
        "c) 'Git filter-branch' es una herramienta para clonar un repositorio en Git.",
        "d) 'Git filter-branch' es una herramienta avanzada para reescribir la historia de un repositorio. Se utiliza en situaciones específicas, como eliminar archivos confidenciales de la historia o cambiar nombres de archivos en commits antiguos."
      ]
    },    
    {
      "id": 406,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cómo se revierten cambios en Git?",
      "answer": "Los cambios en Git se pueden revertir de diferentes maneras, pero una común es utilizando 'git revert' para crear un nuevo commit que deshaga los cambios de un commit anterior. Se utiliza el comando 'git revert <hash_del_commit>'. Esto crea un nuevo commit que deshace los cambios introducidos por el commit especificado.",
      "correctAnswer": "c) Los cambios en Git se pueden revertir de diferentes maneras, pero una común es utilizando 'git revert' para crear un nuevo commit que deshaga los cambios de un commit anterior. Se utiliza el comando 'git revert <hash_del_commit>'. Esto crea un nuevo commit que deshace los cambios introducidos por el commit especificado.",
      "allAnswers": [
        "a) Utilizando 'git remove'.",
        "b) Eliminando manualmente los archivos modificados.",
        "c) Los cambios en Git se pueden revertir de diferentes maneras, pero una común es utilizando 'git revert' para crear un nuevo commit que deshaga los cambios de un commit anterior. Se utiliza el comando 'git revert <hash_del_commit>'. Esto crea un nuevo commit que deshace los cambios introducidos por el commit especificado.",
        "d) Utilizando 'git undo'."
      ]
    },    
    {
      "id": 407,
      "category": "Git",
      "level": "Junior",
      "question": "¿Cuál es el propósito de 'git checkout' en Git?",
      "answer": "'Git checkout' se utiliza para cambiar entre ramas y commits en un repositorio Git. También se utiliza para crear ramas nuevas: puedes utilizar el comando 'git checkout -b <nombre_de_la_rama>'. Con esto, la creas y también te mueves a ella sin usar otro comando de git.",
      "correctAnswer": "b) 'Git checkout' se utiliza para cambiar entre ramas y commits en un repositorio Git. También se utiliza para crear ramas nuevas: puedes utilizar el comando 'git checkout -b <nombre_de_la_rama>'. Con esto, la creas y también te mueves a ella sin usar otro comando de git.",
      "allAnswers": [
        "a) 'Git checkout' se utiliza solo para cambiar entre commits en un repositorio Git.",
        "b) 'Git checkout' se utiliza para cambiar entre ramas y commits en un repositorio Git. También se utiliza para crear ramas nuevas: puedes utilizar el comando 'git checkout -b <nombre_de_la_rama>'. Con esto, la creas y también te mueves a ella sin usar otro comando de git.",
        "c) 'Git checkout' se utiliza solo para crear nuevas ramas en un repositorio Git.",
        "d) 'Git checkout' se utiliza solo para cambiar entre ramas en un repositorio Git."
      ]
    },    
    {
      "id": 408,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es la rama (branch) 'master' en Git y cómo ha evolucionado su uso?",
      "answer": "La rama 'master' solía ser la rama principal en Git, pero su uso está evolucionando hacia nombres como 'main' o 'mainline' para evitar connotaciones negativas asociadas con 'master'.",
      "correctAnswer": "b) La rama 'master' solía ser la rama principal en Git, pero su uso está evolucionando hacia nombres como 'main' o 'mainline' para evitar connotaciones negativas asociadas con 'master'.",
      "allAnswers": [
        "a) La rama 'master' es la única rama permitida en Git.",
        "b) La rama 'master' solía ser la rama principal en Git, pero su uso está evolucionando hacia nombres como 'main' o 'mainline' para evitar connotaciones negativas asociadas con 'master'.",
        "c) La rama 'master' es obsoleta y no se utiliza más en Git.",
        "d) La rama 'master' es la única rama permitida para colaboración en Git."
      ]
    },    
    {
      "id": 409,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cuál es el propósito de 'git rebase -i' y cómo se utiliza?",
      "answer": "'Git rebase -i' tiene como propósito permitir una reescritura interactiva del historial de commits en Git. Se utiliza ejecutando el comando 'git rebase -i <base>', donde '<base>' es el commit hasta el cual se realizará el rebase. Este comando abrirá un editor interactivo que te permite editar, combinar o reorganizar commits antes de aplicarlos.",
      "correctAnswer": "b) 'Git rebase -i' tiene como propósito permitir una reescritura interactiva del historial de commits en Git. Se utiliza ejecutando el comando 'git rebase -i <base>', donde '<base>' es el commit hasta el cual se realizará el rebase. Este comando abrirá un editor interactivo que te permite editar, combinar o reorganizar commits antes de aplicarlos.",
      "allAnswers": [
        "a) 'Git rebase -i' es un comando para deshacer los cambios en Git.",
        "b) 'Git rebase -i' tiene como propósito permitir una reescritura interactiva del historial de commits en Git. Se utiliza ejecutando el comando 'git rebase -i <base>', donde '<base>' es el commit hasta el cual se realizará el rebase. Este comando abrirá un editor interactivo que te permite editar, combinar o reorganizar commits antes de aplicarlos.",
        "c) 'Git rebase -i' es utilizado para crear nuevas ramas en Git.",
        "d) 'Git rebase -i' es un comando para fusionar ramas en Git."
      ]
    },    
    {
      "id": 410,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué son los hooks de cliente en Git y cuál es su propósito?",
      "answer": "Los hooks de cliente en Git son scripts personalizados que se ejecutan en las máquinas locales de los desarrolladores en respuesta a eventos de Git. Su propósito es implementar acciones personalizadas en el lado del cliente, como comprobaciones de pre-commit, que ayudan a mantener la calidad y consistencia del código antes de que se realice un commit.",
      "correctAnswer": "b) Los hooks de cliente en Git son scripts personalizados que se ejecutan en las máquinas locales de los desarrolladores en respuesta a eventos de Git. Su propósito es implementar acciones personalizadas en el lado del cliente, como comprobaciones de pre-commit, que ayudan a mantener la calidad y consistencia del código antes de que se realice un commit.",
      "allAnswers": [
        "a) Los hooks de cliente en Git son scripts que se ejecutan en el servidor de Git.",
        "b) Los hooks de cliente en Git son scripts personalizados que se ejecutan en las máquinas locales de los desarrolladores en respuesta a eventos de Git. Su propósito es implementar acciones personalizadas en el lado del cliente, como comprobaciones de pre-commit, que ayudan a mantener la calidad y consistencia del código antes de que se realice un commit.",
        "c) Los hooks de cliente en Git son funciones integradas en el núcleo de Git.",
        "d) Los hooks de cliente en Git son scripts utilizados exclusivamente para la fase de 'push'."
      ]
    },    
    {
      "id": 411,
      "category": "Git",
      "level": "Middle",
      "question": "Explica el concepto de 'rebasing' en Git y cuándo es útil.",
      "answer": "'Rebasing' en Git es el proceso de mover o combinar una rama con otra base, generalmente una rama principal. Es útil para mantener un historial de commits más limpio y lineal en lugar de tener múltiples commits de fusión.",
      "correctAnswer": "d) 'Rebasing' en Git es el proceso de mover o combinar una rama con otra base, generalmente una rama principal. Es útil para mantener un historial de commits más limpio y lineal en lugar de tener múltiples commits de fusión.",
      "allAnswers": [
        "a) 'Rebasing' en Git es un proceso que crea commits adicionales para fusionar ramas.",       
        "b) 'Rebasing' en Git solo se utiliza en proyectos pequeños.",
        "c) 'Rebasing' en Git es equivalente a realizar un 'merge'.",
        "d) 'Rebasing' en Git es el proceso de mover o combinar una rama con otra base, generalmente una rama principal. Es útil para mantener un historial de commits más limpio y lineal en lugar de tener múltiples commits de fusión."
      ]
    },    
    {
      "id": 412,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cuál es el propósito de 'git submodules' en Git?",
      "answer": "'Git submodules' permite incluir un repositorio Git dentro de otro repositorio Git como una dependencia. Esto es útil para gestionar proyectos grandes o incorporar bibliotecas externas.",
      "correctAnswer": "b) 'Git submodules' permite incluir un repositorio Git dentro de otro repositorio Git como una dependencia. Esto es útil para gestionar proyectos grandes o incorporar bibliotecas externas.",
      "allAnswers": [
        "a) 'Git submodules' es una herramienta para fusionar ramas en Git.",
        "b) 'Git submodules' permite incluir un repositorio Git dentro de otro repositorio Git como una dependencia. Esto es útil para gestionar proyectos grandes o incorporar bibliotecas externas.",
        "c) 'Git submodules' se utiliza para eliminar ramas obsoletas en Git.",
        "d) 'Git submodules' es una característica obsoleta de Git."
      ]
    },    
    {
      "id": 413,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre un 'pull request' y un 'push' en Git?",
      "answer": "Un 'pull request' es una solicitud para fusionar cambios de una rama a otra en un repositorio remoto, generalmente en una plataforma como GitHub. Un 'push' es una acción que envía cambios locales a un repositorio remoto sin solicitar una fusión.",
      "correctAnswer": "b) Un 'pull request' es una solicitud para fusionar cambios de una rama a otra en un repositorio remoto, generalmente en una plataforma como GitHub. Un 'push' es una acción que envía cambios locales a un repositorio remoto sin solicitar una fusión.",
      "allAnswers": [
        "a) Un 'pull request' y un 'push' son términos intercambiables en Git.",
        "b) Un 'pull request' es una solicitud para fusionar cambios de una rama a otra en un repositorio remoto, generalmente en una plataforma como GitHub. Un 'push' es una acción que envía cambios locales a un repositorio remoto sin solicitar una fusión.",
        "c) Un 'push request' es una solicitud para enviar cambios locales a un repositorio remoto.",
        "d) Un 'push' y un 'pull request' significan lo mismo en Git."
      ]
    },    
    {
      "id": 414,
      "category": "Git",
      "level": "Middle",
      "question": "¿Cómo se cambia el mensaje de un commit en Git?",
      "answer": "Para cambiar el mensaje de un commit en Git, se utiliza el comando 'git commit --amend -m 'nuevo_mensaje''. Esto permite editar el mensaje del commit más reciente.",
      "correctAnswer": "c) Para cambiar el mensaje de un commit en Git, se utiliza el comando 'git commit --amend -m 'nuevo_mensaje''. Esto permite editar el mensaje del commit más reciente.",
      "allAnswers": [
        "a) Se utiliza 'git commit --modify-message 'nuevo_mensaje'' para cambiar el mensaje de un commit.",      
        "b) No es posible cambiar el mensaje de un commit después de realizarlo.",
        "c) Para cambiar el mensaje de un commit en Git, se utiliza el comando 'git commit --amend -m 'nuevo_mensaje''. Esto permite editar el mensaje del commit más reciente.",
        "d) Se utiliza 'git commit --edit-message 'nuevo_mensaje'' para cambiar el mensaje de un commit."
      ]
    },    
    {
      "id": 415,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es 'git switch' y cómo se utiliza?",
      "answer": "'Git switch' es un comando que se utiliza para cambiar entre ramas en un repositorio Git. Se utiliza de la siguiente manera: 'git switch <nombre_de_la_rama>'. Este comando te permite cambiar rápidamente entre ramas sin necesidad de crear una nueva.",
      "correctAnswer": "b) 'Git switch' es un comando que se utiliza para cambiar entre ramas en un repositorio Git. Se utiliza de la siguiente manera: 'git switch <nombre_de_la_rama>'. Este comando te permite cambiar rápidamente entre ramas sin necesidad de crear una nueva.",
      "allAnswers": [
        "a) 'Git switch' es un comando para fusionar ramas en Git.",
        "b) 'Git switch' es un comando que se utiliza para cambiar entre ramas en un repositorio Git. Se utiliza de la siguiente manera: 'git switch <nombre_de_la_rama>'. Este comando te permite cambiar rápidamente entre ramas sin necesidad de crear una nueva.",
        "c) 'Git switch' es una herramienta gráfica para gestionar repositorios Git.",
        "d) 'Git switch' se utiliza para crear una nueva rama en Git."
      ]
    },    
    {
      "id": 416,
      "category": "Git",
      "level": "Senior",
      "question": "¿Qué es el 'gitflow workflow' y cuál es su utilidad?",
      "answer": "El 'gitflow workflow' es un modelo de colaboración y gestión de ramas en Git que define reglas claras para el uso de diferentes tipos de ramas (por ejemplo, 'feature', 'release', 'hotfix'). Su utilidad radica en mantener un flujo de trabajo organizado y escalable.",
      "correctAnswer": "b) El 'gitflow workflow' es un modelo de colaboración y gestión de ramas en Git que define reglas claras para el uso de diferentes tipos de ramas (por ejemplo, 'feature', 'release', 'hotfix'). Su utilidad radica en mantener un flujo de trabajo organizado y escalable.",
      "allAnswers": [
        "a) El 'gitflow workflow' es un conjunto de comandos específicos en Git para realizar operaciones avanzadas.",
        "b) El 'gitflow workflow' es un modelo de colaboración y gestión de ramas en Git que define reglas claras para el uso de diferentes tipos de ramas (por ejemplo, 'feature', 'release', 'hotfix'). Su utilidad radica en mantener un flujo de trabajo organizado y escalable.",
        "c) El 'gitflow workflow' es una interfaz gráfica para Git.",
        "d) El 'gitflow workflow' es una herramienta de respaldo para recuperar ramas perdidas."
      ]
    },
    {
      "id": 417,
      "category": "Git",
      "level": "Senior",
      "question": "Explica 'git restore' y cómo se utiliza para deshacer cambios en Git.",
      "answer": "'Git restore' es un comando que se utiliza para deshacer cambios en Git al restaurar un archivo o una rama a un estado anterior. Puedes usar 'git restore' con opciones específicas para revertir cambios no deseados en archivos o para restaurar una rama a una revisión anterior.",
      "correctAnswer": "b) 'Git restore' es un comando que se utiliza para deshacer cambios en Git al restaurar un archivo o una rama a un estado anterior. Puedes usar 'git restore' con opciones específicas para revertir cambios no deseados en archivos o para restaurar una rama a una revisión anterior.",
      "allAnswers": [
        "a) 'Git restore' es un comando que se utiliza para eliminar permanentemente un archivo del historial de Git.",
        "b) 'Git restore' es un comando que se utiliza para deshacer cambios en Git al restaurar un archivo o una rama a un estado anterior. Puedes usar 'git restore' con opciones específicas para revertir cambios no deseados en archivos o para restaurar una rama a una revisión anterior.",
        "c) 'Git restore' es un comando que fusiona cambios de una rama a otra en Git.",
        "d) 'Git restore' es un comando que se utiliza para crear un nuevo repositorio Git."
      ]
    },    
    {
      "id": 418,
      "category": "Git",
      "level": "Middle",
      "question": "¿Qué es un flujo de trabajo 'fork and pull' en Git y cuándo se utiliza?",
      "answer": "El flujo de trabajo 'fork and pull' se utiliza comúnmente en proyectos de código abierto. Implica bifurcar (fork) un repositorio público en tu propia cuenta de GitHub, realizar cambios en tu bifurcación y luego enviar una solicitud de extracción (pull request) al repositorio original para que los cambios sean considerados por los colaboradores principales.",
      "correctAnswer": "d) El flujo de trabajo 'fork and pull' se utiliza comúnmente en proyectos de código abierto. Implica bifurcar (fork) un repositorio público en tu propia cuenta de GitHub, realizar cambios en tu bifurcación y luego enviar una solicitud de extracción (pull request) al repositorio original para que los cambios sean considerados por los colaboradores principales.",
      "allAnswers": [
        "a) El flujo de trabajo 'fork and pull' se utiliza solo en proyectos privados.",      
        "b) El flujo de trabajo 'fork and pull' implica realizar cambios directamente en el repositorio original.",
        "c) 'Fork and pull' es un término obsoleto en Git y ya no se utiliza.",
        "d) El flujo de trabajo 'fork and pull' se utiliza comúnmente en proyectos de código abierto. Implica bifurcar (fork) un repositorio público en tu propia cuenta de GitHub, realizar cambios en tu bifurcación y luego enviar una solicitud de extracción (pull request) al repositorio original para que los cambios sean considerados por los colaboradores principales."
      ]
    },    
    {
      "id": 419,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es Git Bash y cuál es su función en Git?",
      "answer": "Git Bash es una interfaz de línea de comandos que proporciona una terminal interactiva para ejecutar comandos Git en sistemas Windows. Facilita el uso de Git en entornos que no son nativos de Unix.",
      "correctAnswer": "b) Git Bash es una interfaz de línea de comandos que proporciona una terminal interactiva para ejecutar comandos Git en sistemas Windows. Facilita el uso de Git en entornos que no son nativos de Unix.",
      "allAnswers": [
        "a) Git Bash es una herramienta de interfaz gráfica para Git.",
        "b) Git Bash es una interfaz de línea de comandos que proporciona una terminal interactiva para ejecutar comandos Git en sistemas Windows. Facilita el uso de Git en entornos que no son nativos de Unix.",
        "c) Git Bash es exclusivo de sistemas Unix y no está disponible para Windows.",
        "d) Git Bash es una función de Git que permite el intercambio de archivos binarios."
      ]
    },    
    {
      "id": 421,
      "category": "Git",
      "level": "Junior",
      "question": "¿Qué es Git Pull y cuál es su propósito?",
      "answer": "Git Pull es un comando que se utiliza para descargar cambios desde un repositorio remoto y fusionarlos automáticamente en la rama actual. Su propósito es mantener tu copia local actualizada con los cambios remotos.",
      "correctAnswer": "a) Git Pull es un comando que se utiliza para descargar cambios desde un repositorio remoto y fusionarlos automáticamente en la rama actual. Su propósito es mantener tu copia local actualizada con los cambios remotos.",
      "allAnswers": [
        "a) Git Pull es un comando que se utiliza para descargar cambios desde un repositorio remoto y fusionarlos automáticamente en la rama actual. Su propósito es mantener tu copia local actualizada con los cambios remotos.",
        "b) Git Pull es un comando que se utiliza para subir cambios locales a un repositorio remoto.",
        "c) Git Pull es un comando que elimina todos los cambios locales y sincroniza el repositorio local con el remoto.",
        "d) Git Pull es un comando específico de Git Bash y no está disponible en otras interfaces de línea de comandos."
      ]
    }    
  ],
  "weblinks": [
    {
      "id": 1,
      "name": "Angular Official Page",
      "link": "https://angular.io/docs",
      "category": "officialDoc"
    },
    {
      "id": 2,
      "name": "Bootstrap",
      "link": "https://getbootstrap.com/",
      "category": "officialDoc"
    },
    {
      "id": 3,
      "name": "RXJS",
      "link": "https://rxjs-dev.firebaseapp.com/",
      "category": "officialDoc"
    },
    {
      "id": 4,
      "name": "DevDocs",
      "link": "https://devdocs.io/",
      "category": "officialDoc"
    },
    {
      "id": 5,
      "name": "MDN Web Docs",
      "link": "https://developer.mozilla.org/",
      "category": "officialDoc"
    },
    {
      "id": 6,
      "name": "Repositorio con listas de pruebas técnicas",
      "link": "https://github.com/midudev/pruebas-tecnicas",
      "category": "challenges"
    },
    {
      "id": 7,
      "name": "Web para practicar código",
      "link": "https://www.codewars.com/",
      "category": "challenges"
    },
    {
      "id": 8,
      "name": "Desafíos de programación y ejercicios",
      "link": "https://retosdeprogramacion.com/",
      "category": "challenges"
    },
    {
      "id": 9,
      "name": "Practica tu habilidad de resolución de problemas",
      "link": "https://leetcode.com/",
      "category": "challenges"
    },
    {
      "id": 10,
      "name": "Mejora tu habilidad en CSS jugando",
      "link": "http://flexboxfroggy.com/#es",
      "category": "challenges"
    },
    {
      "id": 11,
      "name": "Cursos y certificaciones de distintos lenguajes",
      "link": "https://www.freecodecamp.org/",
      "category": "courses"
    },
    {
      "id": 12,
      "name": "Chrome DevTools - Crash Course",
      "link": "https://www.youtube.com/watch?v=gTVpBbFWry8",
      "category": "courses"
    },
    {
      "id": 13,
      "name": "Fundamentos de testing",
      "link": "https://www.testim.io/blog/jasmine-js-a-from-scratch-tutorial-to-start-testing/",
      "category": "courses"
    },
    {
      "id": 14,
      "name": "Parcel vs Webpack",
      "link": "https://www.youtube.com/watch?v=gTVpBbFWry8",
      "category": "courses"
    },
    {
      "id": 15,
      "name": "Conventional Commits - Qué es y por qué deberías empezar a utilizarlo",
      "link": "https://dev.to/achamorro_dev/conventional-commits-que-es-y-por-que-deberias-empezar-a-utilizarlo-23an",
      "category": "courses"
    },
    {
      "id": 16,
      "name": "¿Cómo crear tu perfil de Github",
      "link": "https://midu.dev/como-crear-tu-perfil-de-github-con-readme/",
      "category": "resources"
    },
    {
      "id": 17,
      "name": "Repositorio con lista de pruebas técnicas",
      "link": "https://github.com/midudev/pruebas-tecnicas",
      "category": "resources"
    },
    {
      "id": 18,
      "name": "Generar opiniones en retrospectiva en equipo",
      "link": "https://retroteam.app/",
      "category": "resources"
    },
    {
      "id": 19,
      "name": "Plantillas para Expresiones Regulares",
      "link": "https://regex101.com/",
      "category": "resources"
    },
    {
      "id": 20,
      "name": "Lista de API's públicas",
      "link": "https://publicapi.dev/",
      "category": "resources"
    }
  ]
}
