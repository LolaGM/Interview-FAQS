{
  "users": [
    {
      "id": 1,
      "name": "Jesús Villalón",
      "password": "12345678",
      "confirmPassword": "12345678",
      "email": "jesus@google.com"
    },
    {
      "name": "lola",
      "email": "lola@google.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 2
    },
    {
      "name": "david",
      "email": "dagalisteo@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 3
    },
    {
      "name": "dani",
      "email": "dani@gmail.com",
      "password": "12345678",
      "confirmPassword": "12345678",
      "id": 4
    },
    {
      "name": "María",
      "email": "maria@google.com",
      "password": "87654321",
      "confirmPassword": "87654321",
      "id": 5
    },
    {
      "name": "Manolito",
      "email": "manolito@google.com",
      "password": "manolito",
      "confirmPassword": "manolito",
      "id": 6
    }
  ],
  "userFavs": [],
  "questions": [
    {
      "id": 1,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que son los componentes de Angular",
      "answer": "Los componentes son los bloques de construcción más básicos para crear la interfaz de usuario de una aplicación de Angular. Estos componentes forman una especie de árbol en la aplicación y siempre tienen una plantilla (o template) con la que podemos formar la vista de nuestra aplicacion."
    },
    {
      "id": 2,
      "category": "Angular",
      "level": "Junior",
      "question": "Indica al menos 3 formas en las que puedan comunicarse los componentes en Angular",
      "answer": "Binding (vinculación de entrada INPUT y vinculación de salida OUTPUT), Servicios (servicios compartidos inyectado en componentes), Router y rutas anidadas (Los datos pueden transmitirse a través de la URL),LocalStorage y SessionStorage (para la comunicación persistente entre sesiones o pestañas del navegador),Navegación con parámetros de ruta (a través de los parámetros de ruta en la URL cuando se navega entre diferentes vistas de la aplicación),Inyección de Dependencia (DI - Dependency Injection),  Directivas personalizadas..."
    },
    {
      "id": 3,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Que es una plantilla?",
      "answer": "Una plantilla o template es una vista Html donde puedes mostrar datos al conectar sus elementos con las propiedades o métodos de un componente Angular."
    },    
    {
      "id": 4,
      "category": "Angular",
      "level": "Junio",
      "question": "¿Qué es el Data Binding o vinculación de datos?",
      "answer": "Es un concepto clave en Angular y permite definir la comunicación entre un componente y el DOM, lo que hace que sea muy fácil definir aplicaciones interactivas sin preocuparse por enviar y extraer datos"
    },
    {
      "id": 5,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es Angular CLI y para qué se usa?",
      "answer": "Es una interfaz de línea de comandos (Command Line Interface) para desarrollar y crear aplicaciones angulares utilizando módulos de estilo nodejs (commonJs). Se instala usando el siguiente comando: npm install @angular/cli@latest"
    },
    {
      "id": 6,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué es la inyección de dependencia en Angular?",
      "answer": "Es un patrón de diseño de aplicaciones importante en el que una clase solicita dependencias de fuentes externas en lugar de crearlas ella misma. Angular viene con su propio marco de inyección de dependencias para resolver dependencias (servicios u objetos que una clase necesita para realizar su función), por lo que puede hacer que sus servicios dependan de otros servicios en toda su aplicació"
    },
    {
      "id": 7,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué son las directivas? Tipos de directivas en Angular",
      "answer": "En Angular, las directivas son marcadores en el DOM (Documento de Objetos del Modelo) que le indican al framework qué hacer con un elemento del DOM o cómo debe comportarse (se usan para agregar funcionalidad adicional a los elementos HTML o modificar su comportamiento). Existen ESTRUCTURALES que modifican la estructura del DOM al agregar o eliminar elementos del mismo (ngIf, ngFor y ngSwitch), las de ATRIBUTO (ngModel,ngClass, ngStyle, ngFor) y las de COMPONENTE que se refieren al uso de componentes personalizados como directivas en la construcción de la interfaz de usuario."
    },
    {
      "id": 8,
      "category": "Angular",
      "level": "Junior",
      "question": "¿Qué son los formularios reactivos? Explica FormBuilder",
      "answer": "Estos formularios se basan en programación reactiva y permiten un mayor control y flexibilidad en la manipulación y validación de datos de entrada del usuario.Son un enfoque basado en modelos para crear formularios en un estilo reactivo (las entradas del formulario cambian con el tiempo). Estos se construyen alrededor de flujos observables, donde las entradas de formularios y los valores se proporcionan como flujos de valores de entrada.Los formularios reactivos son especialmente útiles cuando necesitas gestionar formularios complejos con reglas de validación personalizadas, dependencias entre campos o cuando deseas tener un control más preciso sobre la manipulación de datos de entrada en tiempo real. También facilitan las pruebas unitarias de la lógica del formulario, ya que puedes simular fácilmente eventos y cambios en los campos.FormBuilder es una utilidad proporcionada por Angular que simplifica la creación de formularios reactivos al proporcionar métodos para crear instancias de FormGroup y FormControl de manera más sencilla y legible."
    },
    {
      "id": 9,
      "category": "Angular",
      "level": "Junior",
      "question": "Lazy loading: ¿qué es?",
      "answer": "La carga diferida es uno de los conceptos más útiles de Angular Routing. Nos ayuda a descargar las páginas web en trozos en lugar de descargar todo en un paquete grande. Se utiliza para la carga diferida al cargar de forma asincrónica el módulo de funciones para el enrutamiento cuando sea necesario usando la propiedad loadChildren"
    },
    {
      "id": 10,
      "category": "Angular",
      "level": "Junior",
      "question": "Pipes.¿Qué son en Angular?",
      "answer": "Las tuberías o canalizaciones llamadas pipes en Angular son funciones simples que utilizan expresiones de plantilla para aceptar datos como entrada y transformarlos en la salida deseada en la interfaz de usuario.Son una característica esencial para la presentación de datos en Angular y se utilizan para realizar tareas comunes de formateo, filtrado y transformación de datos de manera declarativa en las plantillas. Ejemplo: ({{ userName | uppercase}})"
    },
    {
      "id": 11,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es la interpolación?",
      "answer": "Es una técnica que se utiliza en las plantillas para mostrar dinámicamente valores de variables y expresiones en la interfaz de usuario. Permite incrustar valores de variables y expresiones directamente en el contenido HTML de una plantilla. La interpolación se realiza mediante la sintaxis de doble llave {{ }} y es una de las formas más simples y comunes de vincular datos en Angular. El texto entre llaves suele ser el nombre de una propiedad de componente. Angular reemplaza ese nombre con el valor de cadena de la propiedad del componente correspondiente."
    },
    {
      "id": 12,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué son los Observables?¿Cómo se crean?",
      "answer": "Son una parte fundamental de la programación reactiva y se utilizan en Angular (y en otros contextos) para manejar secuencias de eventos asíncronos y streams de datos. Los observables permiten la gestión de flujos de datos en tiempo real, lo que es especialmente útil en aplicaciones web para manejar eventos, solicitudes HTTP, actualizaciones en tiempo real y otras operaciones asíncronas.  Angular proporciona una implementación de observables basada en la biblioteca RxJS, que es una de las bibliotecas más populares para la programación reactiva en JavaScript. 1- Crearlo desde cero con OBSERVABLE y el método NEXT. 2- A partir de una promesa usando FROM. 3- Con el método FROMEVENT creamos observable que emite eventos del DOM. 4- Con INTERVAL creamos observables que emite valores en intervalos de tiempo."
    },
    {
      "id": 13,
      "category": "Angular",
      "level": "Middle",
      "question": "¿Qué es el Http Client en Angular?",
      "answer": "Es un módulo proporcionado por Angular para realizar solicitudes HTTP a servidores o recursos externos desde una aplicación Angular. Se utiliza para interactuar con servicios web, recuperar datos JSON, realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) y más."
    },
    {
      "id": 14,
      "category": "Angular",
      "level": "Middle",
      "question": "Explica el Angular Router",
      "answer": "El enrutador de Angular es una característica clave que permite la navegación entre diferentes vistas o componentes en una aplicación web Angular de una página (SPA, por sus siglas en inglés). El enrutador de Angular proporciona una forma estructurada de definir las rutas y gestionar la navegación del usuario en la aplicación."
    },
    {
      "id": 15,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es un módulo compartido (Shared Module) en Angular y cuál es su propósito en una aplicación?",
      "answer": "Un módulo compartido (Shared Module) en Angular es un módulo que se utiliza para agrupar y exportar componentes, directivas, pipes y otros elementos que deben ser compartidos entre diferentes partes de una aplicación. Su propósito es promover la reutilización de código y evitar la duplicación de componentes y funcionalidades comunes en toda la aplicación. Un módulo compartido puede importarse en otros módulos de la aplicación para que los componentes y recursos compartidos estén disponibles en toda la aplicación."
    },
    {
      "id": 16,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre el enlace de datos unidireccional y el enlace de datos bidireccional en Angular y cuándo utilizarías uno u otro?",
      "answer": "El enlace de datos unidireccional y el enlace de datos bidireccional son dos enfoques para gestionar la comunicación entre componentes y la actualización de datos en Angular. El unidireccional es generalmente preferido para mantener un flujo de datos más predecible y evitar problemas potenciales, mientras que el enlace de datos bidireccional es útil en situaciones específicas donde la comunicación bidireccional es esencial, como en formularios interactivos."
    },
    {
      "id": 17,
      "category": "Angular",
      "level": "Senior",
      "question": "Signals en Angular",
      "answer": "Son espacios en memoria que apunta en todo momento dónde se está usando el elemento señalado, y actualiza su información en todo momento. Si no lo usáramos Angular debe disparar todos sus métodos de detección de cambios a lo largo de toda la aplicación."
    },
    {
      "id": 18,
      "category": "Angular",
      "level": "Senior",
      "question": "RXJS",
      "answer": "RxJS (Reactive Extensions for JavaScript) es una biblioteca de programación reactiva en JavaScript que se utiliza ampliamente en el desarrollo de aplicaciones Angular. Angular utiliza RxJS para manejar flujos de datos asincrónicos, como observables, y facilita la gestión de eventos, llamadas HTTP y otros flujos de datos en aplicaciones web."
    },
    {
      "id": 19,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre el enrutamiento con carga diferida (Lazy Loading) y la carga convencional de módulos en Angular?",
      "answer": "El enrutamiento con carga diferida (Lazy Loading) es una técnica que retrasa la carga de módulos de Angular hasta que se necesitan, lo que mejora significativamente el rendimiento inicial de la aplicación. En contraste, la carga convencional de módulos carga todos los módulos de la aplicación al inicio. Lazy Loading se configura en las rutas del enrutador utilizando el método loadChildren, mientras que la carga convencional se realiza mediante el método import en los módulos principales. Lazy Loading es particularmente útil en aplicaciones grandes para reducir el tiempo de carga inicial."
    },
    {
      "id": 20,
      "category": "Angular",
      "level": "Senior",
      "question": "¿Qué es AOT (Ahead-of-Time) en Angular y cuáles son sus ventajas sobre JIT (Just-in-Time) en la compilación de plantillas?",
      "answer": " AOT (Ahead-of-Time) es una técnica de compilación utilizada en Angular que compila las plantillas y los componentes en código JavaScript antes de que la aplicación se ejecute en el navegador. Las ventajas de AOT sobre JIT (Just-in-Time) incluyen 1- Mejor rendimiento: La compilación AOT reduce el tiempo de inicio de la aplicación y mejora la velocidad de carga, ya que no es necesario compilar plantillas en el navegador en tiempo de ejecución. 2- Errores de plantillas en tiempo de compilación: AOT detecta errores de plantillas en tiempo de compilación, lo que permite identificar y solucionar problemas antes de que la aplicación se ejecute. 3- Tamaño de archivo más pequeño: AOT elimina el compilador de plantillas de la carga útil del cliente, lo que reduce el tamaño del paquete JavaScript que se envía al navegador."
    },
    {
      "id": 21,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre una etiqueta Html y un elemento Html?",
      "answer": "Una etiqueta Html es un marcador que define el inicio o el final de un elemento en un documento Html, mientras que un elemento Html es un conjunto completo que consta de una etiqueta de inicio, contenido y una etiqueta de cierre (si es necesario)."
    },
    {
      "id": 22,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es un atributo en Html y cómo se utiliza?",
      "answer": "Un atributo en Html proporciona información adicional sobre un elemento y se especifica dentro de la etiqueta de inicio. Por ejemplo, en <img src='imagen.jpg'>, 'src' es un atributo que especifica la fuente de la imagen."
    },
    {
      "id": 23,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla DOCTYPE en Html y cuál es su propósito?",
      "answer": "DOCTYPE significa Document Type Declaration. Se utiliza para especificar la versión de Html que se está utilizando en el documento y asegura que el navegador interprete la página correctamente."
    },
    {
      "id": 24,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea una lista desordenada en Html?",
      "answer": "Una lista desordenada se crea utilizando la etiqueta <ul>, y los elementos de la lista se especifican con la etiqueta <li> dentro de <ul>."
    },
    {
      "id": 25,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una entidad Html y cuál es su uso?",
      "answer": "Una entidad Html es una secuencia de caracteres predefinida que representa un carácter especial en Html, como '&lt;' para '<' y '&amp;' para '&'. Se utilizan para evitar conflictos con la sintaxis Html."
    },
    {
      "id": 26,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es un enlace relativo en Html y cómo se diferencia de un enlace absoluto?",
      "answer": "Un enlace relativo en Html especifica la ubicación de un recurso en relación con la ubicación actual del documento, mientras que un enlace absoluto proporciona una URL completa. Los enlaces relativos son útiles cuando se trabaja en un sitio web local o se desea flexibilidad en las rutas de archivo."
    },
    {
      "id": 27,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cómo se crea una tabla con bordes visibles en Html?",
      "answer": "Para crear una tabla con bordes visibles en Html, puedes agregar el atributo 'border' a la etiqueta <table> y establecerlo en un valor mayor que cero, por ejemplo, <table border='1'>."
    },
    {
      "id": 28,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es un formulario Html y cuál es su propósito?",
      "answer": "Un formulario Html es un conjunto de elementos que permiten a los usuarios ingresar datos y enviarlos a un servidor web. Se utiliza para interactuar con los usuarios y recopilar información."
    },
    {
      "id": 29,
      "category": "Html",
      "level": "Middle",
      "question": "¿Cuál es la etiqueta de encabezado más importante en Html y por qué?",
      "answer": "La etiqueta de encabezado más importante es <h1>. Es importante porque define el encabezado principal de la página y tiene un gran impacto en la optimización para motores de búsqueda (SEO) y la estructura del contenido."
    },
    {
      "id": 30,
      "category": "Html",
      "level": "Middle",
      "question": "¿Qué es la validación en Html y por qué es importante?",
      "answer": "La validación en Html se refiere a asegurarse de que el código Html cumple con los estándares definidos por el W3C. Es importante porque ayuda a garantizar la consistencia y la compatibilidad entre navegadores, lo que mejora la calidad de la página web."
    },
    {
      "id": 31,
      "category": "Html",
      "level": "Senior",
      "question": "¿Qué son las etiquetas de encabezado en Html y cuál es su jerarquía?",
      "answer": "Las etiquetas de encabezado en Html, como <h1>, <h2>, ..., <h6>, se utilizan para definir la estructura jerárquica del contenido de la página. <h1> es el encabezado principal y <h6> el menos importante."
    },
    {
      "id": 32,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es la diferencia entre Html y XHtml?",
      "answer": "XHtml es una versión más estricta y XML-compatible de Html. Requiere que el código esté bien formado y se adhiera a reglas más estrictas de sintaxis. Html es más flexible en términos de estructura y validación."
    },
    {
      "id": 33,
      "category": "Html",
      "level": "Senior",
      "question": "¿Qué son las hojas de estilo en cascada (CSS) y cómo se relacionan con Html?",
      "answer": "Las hojas de estilo en cascada (CSS) se utilizan para aplicar estilos y diseños a elementos Html. Permiten separar la estructura del contenido (Html) de su presentación visual, lo que facilita la gestión y el mantenimiento del diseño de un sitio web."
    },
    {
      "id": 34,
      "category": "Html",
      "level": "Senior",
      "question": "¿Cuál es la función de la etiqueta <iframe> en Html?",
      "answer": "La etiqueta <iframe> se utiliza para incrustar contenido de otra página web dentro de la página actual. Puede ser útil para mostrar mapas, videos u otros elementos externos."
    },
    {
      "id": 35,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre una etiqueta Html y un elemento Html?",
      "answer": "Una etiqueta Html es un marcador que define el inicio o el final de un elemento en un"
    },
    {
      "id": 36,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es un atributo en Html y cómo se utiliza?",
      "answer": "Un atributo en Html proporciona información adicional sobre un elemento y se especifica dentro de la etiqueta de inicio. Por ejemplo, en <img src='imagen.jpg'>, 'src' es un atributo que especifica la fuente de la imagen."
    },
    {
      "id": 37,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué significa la sigla DOCTYPE en Html y cuál es su propósito?",
      "answer": "DOCTYPE significa Document Type Declaration. Se utiliza para especificar la versión de Html que se está utilizando en el documento y asegura que el navegador interprete la página correctamente."
    },
    {
      "id": 38,
      "category": "Html",
      "level": "Junior",
      "question": "¿Cómo se crea una lista desordenada en Html?",
      "answer": "Una lista desordenada se crea utilizando la etiqueta <ul>, y los elementos de la lista se especifican con la etiqueta <li> dentro de <ul>."
    },
    {
      "id": 39,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una entidad Html y cuál es su uso?",
      "answer": "Una entidad Html es una secuencia de caracteres predefinida que representa un carácter especial en Html, como '&lt;' para '<' y '&amp;' para '&'. Se utilizan para evitar conflictos con la sintaxis Html."
    },
    {
      "id": 40,
      "category": "Html",
      "level": "Junior",
      "question": "¿Qué es una etiqueta de anclaje en Html y cómo se utiliza?",
      "answer": "Una etiqueta de anclaje, <a>, se utiliza para crear hipervínculos a otras páginas web o recursos. Se especifica el destino del enlace mediante el atributo 'href'. Por ejemplo, <a href='https://www.ejemplo.com'>Enlace a Ejemplo</a>."
    },
    {
      "id": 41,
      "category": "Css",
      "level": "Junior",
      "question": "Explique en qué se diferencia un selector de clase de CSS de un selector id",
      "answer": "Un selector de clase en CSS se denota con un punto (por ejemplo, '.mi-clase') y puede aplicarse a múltiples elementos en tu Html. Múltiples elementos pueden compartir la misma clase y tener estilos similares. Un selector de ID en CSS se denota con un símbolo de almohadilla o numeral (por ejemplo, '#mi-id') y debe ser único en todo tu documento Html. Solo un elemento puede tener un ID específico, y se utiliza cuando deseas aplicar estilos o manipular ese elemento en particular."
    },
    {
      "id": 42,
      "category": "Css",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre las posiciones relative, fixed, absolute y static para un elemento dado?",
      "answer": "Estas posiciones afectan cómo se ubica un elemento en relación con su posición inicial y otros elementos. Static (Estático):Valor predeterminado para todos los elementos Html. Los elementos se muestran en el orden en que aparecen en el flujo normal del documento. No se ven afectados por las propiedades top, right, bottom o left. No se pueden superponer a otros elementos ni ajustar su posición en relación con otros elementos. Relative (Relativo):Los elementos se desplazan en relación con su posición normal. Puedes usar las propiedades top, right, bottom o left para mover el elemento desde su posición original. El espacio ocupado por el elemento en su posición original se mantiene, lo que significa que otros elementos no se ven afectados por su movimiento. Absolute (Absoluto): Los elementos se posicionan en relación con el ancestro más cercano que tenga una posición relativa, absoluta o fija. Los elementos absolutos se eliminan del flujo normal del documento, por lo que no ocupan espacio en el diseño original. Puedes usar top, right, bottom o left para ajustar su posición en relación con el ancestro posicionado. Si no hay un ancestro posicionado, se posicionan en relación con el documento Html.Fixed (Fijo): Los elementos se posicionan de forma fija en relación con la ventana gráfica del navegador, por lo que permanecen en la misma posición incluso si se desplaza la página. Se usan las propiedades top, right, bottom o left para definir su posición en relación con la ventana gráfica. No afectan ni se ven afectados por otros elementos en el documento."
    },
    {
      "id": 43,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 44,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 45,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 46,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 47,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 48,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 49,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 50,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 51,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 52,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 53,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 54,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 55,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 56,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 57,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 58,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 59,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 60,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 61,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre undefined y null?",
      "answer": "undefined representa una variable que no ha sido declarada o a la que no se le ha asignado un valor, mientras que null representa un valor intencionadamente vacío o ausente."
    },
    {
      "id": 62,
      "category": "Javascript",
      "level": "Junior",
      "question": "¿Qué es el scope en JavaScript?",
      "answer": "El scope en JavaScript se refiere al alcance o contexto en el que una variable o función es accesible dentro del código. Puede ser global o local, y determina dónde una variable o función puede ser utilizada dentro de un programa."
    },
    {
      "id": 63,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 64,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 65,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 66,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 67,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 68,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 69,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 70,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 71,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 72,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 73,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 74,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 75,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 76,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 77,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 78,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 79,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 80,
      "category": "",
      "level": "",
      "question": "",
      "answer": ""
    },
    {
      "id": 81,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es TypeScript y cómo se relaciona con JavaScript?",
      "answer": "TypeScript es un lenguaje de programación desarrollado por Microsoft que se basa en JavaScript. Se compila a JavaScript y agrega tipos estáticos opcionales, lo que mejora la robustez y la calidad del código JavaScript."
    },
    {
      "id": 82,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la extensión de archivo típica para los archivos TypeScript?",
      "answer": "La extensión de archivo típica para los archivos TypeScript es .ts"
    },
    {
      "id": 83,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son las interfaces en TypeScript y para qué se utiliza?",
      "answer": "Las interfaces en TypeScript son estructuras que definen la forma de un objeto, incluyendo sus propiedades,tipos y métodos, pero no su implementación. Se definen usando la palabra clave interface. Por ejemplo: interface Persona { nombre: string; edad: number; }. Con esto se garantiza que los objetos cumplan con ciertas propiedades y métodos"
    },
    {
      "id": 84,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Por qué TypeScript es útil en el desarrollo web y cuáles son sus ventajas clave?",
      "answer": "TypeScript es útil porque mejora la seguridad y la calidad del código JavaScript al agregar tipos estáticos. Esto facilita la detección temprana de errores y proporciona herramientas de desarrollo más sólidas."
    },
    {
      "id": 85,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es el propósito de las enumeraciones (enums) en TypeScript y cómo se declaran?",
      "answer": "Las enumeraciones en TypeScript permiten definir un conjunto de valores con nombres descriptivos. Se declaran usando enum. Por ejemplo: enum DíasSemana { Lunes, Martes, Miércoles, ... }"
    },
    {
      "id": 86,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es un tipo de dato en TypeScript?",
      "answer": "Un tipo de dato en TypeScript define el tipo de valor que puede contener una variable, como números, cadenas, objetos, etc."
    },
    {
      "id": 87,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Cuál es la diferencia entre interface y type en TypeScript?",
      "answer": "Ambos se utilizan para definir estructuras de datos, pero interface se utiliza principalmente para definir contratos para objetos, mientras que type es más versátil y se puede usar para definir tipos de datos complejos."
    },
    {
      "id": 88,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la herencia en TypeScript y cómo se implementa?",
      "answer": "La herencia en TypeScript permite que una clase herede propiedades y métodos de otra clase. Se implementa usando la palabra clave extends, por ejemplo: class ClaseHija extends ClasePadre { } "
    },
    {
      "id": 89,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué es la inferencia de tipos en TypeScript y cómo se utiliza?",
      "answer": "La inferencia de tipos es la capacidad de TypeScript para deducir automáticamente el tipo de una variable según su valor. No es necesario especificar el tipo explícitamente, TypeScript lo infiere automáticamente."
    },
    {
      "id": 90,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los decoradores en TypeScript y cuál es su propósito en Angular?",
      "answer": "Los decoradores son funciones que se utilizan para modificar clases, métodos o propiedades en TypeScript. En Angular, se usan para agregar metadatos a clases y componentes, lo que permite que Angular realice tareas como inyección de dependencias y enrutamiento."
    },
    {
      "id": 91,
      "category": "Typescript",
      "level": "Junior",
      "question": "¿Qué son los genéricos en TypeScript y cómo se utilizan?",
      "answer": "Los genéricos permiten escribir funciones y clases que funcionen con diferentes tipos de datos sin perder la información de tipo. Se definen utilizando parámetros de tipo, por ejemplo: function ejemplo<T>(valor: T): T { return valor; }"
    },
    {
      "id": 92,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los tipos de unión (union types) en TypeScript y cómo se declaran?",
      "answer": "Los tipos de unión permiten declarar una variable que puede tener varios tipos posibles. Se declaran usando el símbolo | entre los tipos, por ejemplo: let variable: string | number; "
    },
    {
      "id": 93,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es un transpilador en TypeScript y cuál es su función?",
      "answer": "Es una herramienta que convierte código TypeScript en código JavaScript, lo que permite que los navegadores y entornos de ejecución de JavaScript lo comprendan y ejecuten.Un ejemplo de transpilador en TypeScript es el propio compilador de TypeScript, que se llama tsc (TypeScript Compiler). "
    },
    {
      "id": 94,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué son los módulos en TypeScript y cuál es su ventaja?",
      "answer": "Los módulos en TypeScript permiten organizar el código en archivos separados y reutilizables. Esto ayuda a mantener el código ordenado, modular y facilita la colaboración en proyectos grandes."
    },
    {
      "id": 95,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cuál es la diferencia entre any y unknown en TypeScript?",
      "answer": "ANY permite cualquier tipo de valor, mientras que UNKNOWN representa un tipo desconocido y es más seguro de usar que any."
    },
    {
      "id": 96,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Cómo se declara una variable con un tipo específico en TypeScript?",
      "answer": "Se puede declarar una variable con un tipo específico utilizando la notación de dos puntos después del nombre de la variable, por ejemplo, let miVariable: number = 5;"
    },
    {
      "id": 97,
      "category": "Typescript",
      "level": "Middle",
      "question": "¿Qué es el sistema de módulos en TypeScript y cuáles son los dos formatos de módulos admitidos?",
      "answer": "El sistema de módulos en TypeScript permite organizar el código en unidades separadas y reutilizables. Los dos formatos de módulos admitidos son CommonJS y ES6 (ECMAScript 2015)."
    },
    {
      "id": 98,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué es un namespace (espacio de nombres) en TypeScript y para qué se utiliza?",
      "answer": "Es una forma de agrupar y organizar código en un ámbito separado para evitar conflictos de nombres. Se utiliza para estructurar grandes aplicaciones y evitar la contaminación del espacio global."
    },
    {
      "id": 99,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Qué son los tipos condicionales (conditional types) en TypeScript?",
      "answer": "Los tipos condicionales son tipos que se basan en condiciones lógicas para determinar su forma. Se utilizan para crear tipos que dependen de otros tipos, como T extends U ? X : Y."
    },
    {
      "id": 100,
      "category": "Typescript",
      "level": "Senior",
      "question": "¿Cuál es el propósito de los archivos de declaración (declaration files) en TypeScript y cómo se nombran?",
      "answer": "Los archivos de declaración se utilizan para proporcionar información de tipo para bibliotecas escritas en JavaScript. Se nombran con la extensión .d.ts y deben coincidir con el nombre del archivo JavaScript correspondiente."
    },
    {
      "id": 101,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes actualizado/a en las últimas tendencias y tecnologías de desarrollo web?",
      "answer": "Me mantengo actualizado/a a través de blogs técnicos, conferencias en línea y cursos en plataformas como Coursera y Udemy. También me gusta unirme a comunidades en línea y participar en grupos de desarrollo web para estar al tanto de las últimas tendencias y discutir ideas con otros profesionales"
      },      
      {
      "id": 102,
      "category": "Softskills",
      "level": "Junior",
      "question": "Describe una situación en la que tuviste que colaborar estrechamente con un diseñador o un miembro no técnico del equipo. ¿Cómo manejaste la comunicación y los desafíos?",
      "answer": "Trabajé en un proyecto donde colaboré estrechamente con un diseñador de UX/UI. Mantuvimos una comunicación abierta a lo largo del proyecto, programando reuniones regulares para discutir ideas y cambios. Para superar los desafíos de comunicación, utilizamos herramientas de diseño compartido como Figma, lo que facilitó la colaboración y la comprensión mutua de los requisitos del proyecto."
      },      
      {
      "id": 103,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te aseguras de que el código que escribes sea claro y comprensible para otros miembros del equipo?",
      "answer": "Para asegurarme de que mi código sea claro y comprensible, sigo convenciones de nomenclatura consistentes, agrego comentarios explicativos cuando sea necesario y divido el código en funciones y módulos lógicos. También realizo revisiones de código regulares con mis colegas para obtener retroalimentación y garantizar que el código sea fácil de entender"
      },
      {
      "id": 104,
      "category": "Softskills",
      "level": "Junior",
      "question": "Háblame de una vez en la que tuviste que lidiar con una retroalimentación negativa sobre tu trabajo. ¿Cómo manejaste la situación?",
      "answer": "Recibí retroalimentación negativa en un proyecto pasado, y en lugar de tomarlo de manera personal, lo vi como una oportunidad de aprendizaje. Solicité más detalles sobre los problemas específicos, trabajé en mejorar esas áreas y mantuve una comunicación abierta con el cliente o el equipo para asegurarme de que estaban satisfechos con las mejoras"
      },
      {
      "id": 105,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo priorizas y gestionas tus tareas cuando tienes múltiples proyectos o plazos apretados?",
      "answer": "Utilizo metodologías ágiles como Scrum para priorizar tareas y establecer plazos realistas. También uso herramientas de gestión de proyectos como Trello o Jira para realizar un seguimiento de las tareas y garantizar que se cumplan los plazos. La comunicación constante con el equipo es clave para asegurarse de que todos estén alineados en cuanto a las prioridades."
      },
      {
      "id": 106,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes motivado/a cuando enfrentas desafíos técnicos complejos o tareas repetitivas?",
      "answer": "Mantener la motivación en situaciones difíciles es fundamental. Lo hago estableciendo metas claras y dividiendo tareas complejas en pasos más pequeños. También busco inspiración en proyectos pasados exitosos y me doy tiempo para descansar y recargar energías cuando sea necesario."
      },      
      {
      "id": 107,
      "category": "Softskills",
      "level": "Junior",
      "question": "Cuéntame sobre una vez en la que tuviste que comunicar un problema técnico a un cliente o a un miembro no técnico de la empresa. ¿Cómo lo hiciste?",
      "answer": "En una ocasión, tuve que explicar un problema técnico a un cliente no técnico. Utilicé un lenguaje claro y evité tecnicismos. Además, utilicé ejemplos visuales o comparaciones simples para que el cliente comprendiera la situación. La empatía y la paciencia son clave en estas situaciones."
      },      
      {
      "id": 108,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te aseguras de que tus proyectos de desarrollo web sean accesibles para personas con discapacidades?",
      "answer": "Para garantizar la accesibilidad en mis proyectos de desarrollo web, sigo prácticas como cumplir con las pautas WCAG, realizar pruebas de accesibilidad, colaborar en diseños inclusivos, permitir navegación con teclado, asegurar compatibilidad con lectores de pantalla y usar atributos ARIA cuando sea necesario. También fomento la concienciación sobre accesibilidad y, en casos críticos, considero auditorías de terceros."
      },      
      {
      "id": 109,
      "category": "Softskills",
      "level": "Junior",
      "question": "Háblame de una situación en la que tuviste que resolver un conflicto con un colega. ¿Cómo lo manejaste?",
      "answer": "Cuando surgió un conflicto con un colega, primero escuché sus preocupaciones con empatía. Luego, traté de encontrar un terreno común y propuse soluciones constructivas. La comunicación abierta y la disposición para comprometerse son esenciales para resolver conflictos de manera efectiva."
      },      
      {
      "id": 110,
      "category": "Softskills",
      "level": "Junior",
      "question": "¿Cómo te mantienes organizado/a en tu trabajo diario como Front-End Developer?",
      "answer": "Utilizo herramientas de gestión de tareas como Asana o Trello para llevar un registro de las actividades diarias. También establezco un horario de trabajo estructurado y priorizo las tareas según su importancia y plazos. La organización personal y la gestión del tiempo son fundamentales."
      },      
      {
      "id": 111,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que el código que escribes sea eficiente en términos de rendimiento?",
      "answer": "Para garantizar un código eficiente en rendimiento, realizo pruebas exhaustivas y utilizo herramientas de perfilamiento para identificar cuellos de botella. También sigo las mejores prácticas de optimización, como minimizar solicitudes de red y reducir la carga de recursos. La colaboración con el equipo de operaciones también es esencial"
      },      
      {
      "id": 112,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo manejas las críticas constructivas y las oportunidades de aprendizaje en tu carrera?",
      "answer": "Aprecio las críticas constructivas como oportunidades de crecimiento. Las considero como consejos para mejorar y no como ataques personales. Actúo sobre ellas, busco oportunidades de capacitación y no tengo miedo de admitir cuando no sé algo. Creo que la humildad y el aprendizaje constante son fundamentales en mi carrera."
      },      
      {
      "id": 113,
      "category": "Softskills",
      "level": "Middle",
      "question": "Háblame de un proyecto en el que lideraste un equipo de desarrollo. ¿Cómo gestionaste y motivaste a tu equipo?",
      "answer": "Lideré un proyecto en el que formé un equipo de desarrolladores. Para motivarlos, les brindé claridad en los objetivos, escuché sus ideas y preocupaciones, y les proporcioné autonomía para tomar decisiones. También establecimos un sistema de comunicación efectiva y celebramos los logros del equipo."
      },      
      {
      "id": 114,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que tus proyectos de desarrollo web cumplan con los estándares de seguridad?",
      "answer": "La seguridad es una prioridad en mis proyectos. Utilizo técnicas de desarrollo seguro, como la validación de entrada, el uso de HTTPS y la protección contra ataques de inyección. Además, realizo pruebas de seguridad regulares y colaboro con expertos en seguridad cuando es necesario"
      },      
      {
      "id": 115,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo manejas el estrés en situaciones de alta presión, como un lanzamiento importante o una caída del sitio?",
      "answer": "En situaciones de alta presión, mantengo la calma y me centro en la resolución de problemas. Utilizo la planificación anticipada y la comunicación efectiva para evitar crisis. Además, me aseguro de tener un plan de contingencia en caso de problemas inesperados. El autocontrol y la preparación son clave para manejar el estrés."
      },      
      {
      "id": 116,
      "category": "Softskills",
      "level": "Middle",
      "question": "Háblame de un momento en el que lideraste un esfuerzo para mejorar la calidad del código en tu equipo. ¿Qué enfoque tomaste?",
      "answer": "En situaciones de alta presión, mantengo la calma y me centro en la resolución de problemas. Utilizo la planificación anticipada y la comunicación efectiva para evitar crisis. Además, me aseguro de tener un plan de contingencia en caso de problemas inesperados. El autocontrol y la preparación son clave para manejar el estrés."
      },
      
      {
      "id": 117,
      "category": "Softskills",
      "level": "Middle",
      "question": "¿Cómo te aseguras de que estás siguiendo las mejores prácticas de desarrollo web y no adoptando malos hábitos?",
      "answer": "Para asegurarme de seguir las mejores prácticas, dedico tiempo a la investigación y la educación continua. Leo libros y artículos técnicos, participo en conferencias y cursos en línea, y me mantengo al tanto de las actualizaciones en la industria. También realizo revisiones de código y busco retroalimentación de mis colegas para identificar áreas de mejora."
      },      
      {
      "id": 118,
      "category": "Softskills",
      "level": "Senior",
      "question": "Cuéntame sobre una vez en la que tuviste que aprender una nueva tecnología o lenguaje de programación rápidamente. ¿Cómo lo hiciste?",
      "answer": "En una ocasión, tuve que aprender un nuevo marco de trabajo en poco tiempo para un proyecto. Para hacerlo, comencé con la documentación oficial y tutoriales en línea. También colaboré con colegas más experimentados y practiqué con proyectos pequeños. La clave fue la dedicación y la disposición para aprender de forma constante."
      },      
      {
      "id": 119,
      "category": "Softskills",
      "level": "Senior",
      "question": "¿Cómo te comunicas con los miembros no técnicos del equipo para explicar conceptos técnicos de manera comprensible?",
      "answer": "Cuando necesito comunicar conceptos técnicos a miembros no técnicos, evito el jerga técnico y utilizo ejemplos y analogías simples. Además, me aseguro de escuchar sus preguntas y preocupaciones para aclarar cualquier confusión. La empatía y la paciencia son esenciales para garantizar una comunicación efectiva."
      },      
      {
      "id": 120,
      "category": "Softskills",
      "level": "Senior",
      "question": "Háblame de un proyecto en el que enfrentaste un desafío técnico importante. ¿Cómo lo abordaste y qué aprendiste de esa experiencia?",
      "answer": "En un proyecto anterior, enfrenté un desafío técnico complejo relacionado con la escalabilidad. Lo abordé realizando una investigación exhaustiva, consultando con expertos y probando diferentes enfoques. Aprendí la importancia de la perseverancia y la colaboración en equipo, y finalmente, logramos superar el desafío con éxito."
      },
      {
        "id": 121,
        "category": "Git",
        "level": "Junior",
        "question": "¿Qué es Git y para qué se utiliza en el desarrollo web?",
        "answer": "Git es un sistema de control de versiones que se utiliza en el desarrollo web para rastrear y gestionar cambios en el código fuente. Permite a los desarrolladores trabajar en colaboración y realizar un seguimiento de las modificaciones realizadas en un proyecto a lo largo del tiempo."
      },
      {
        "id": 122,
        "category": "Git",
        "level": "Junior",
        "question": "¿Cuál es la diferencia entre Git y GitHub?",
        "answer": "Git es un sistema de control de versiones, mientras que GitHub es una plataforma en línea que proporciona servicios de alojamiento de repositorios Git. Git se utiliza para rastrear cambios a nivel local, mientras que GitHub permite almacenar y colaborar en repositorios de Git en la nube, facilitando la colaboración entre desarrolladores."
      },
      {
        "id": 123,
        "category": "Git",
        "level": "Junior",
        "question": "¿Qué comando se utiliza para iniciar un nuevo repositorio Git en un proyecto?",
        "answer": "El comando utilizado para iniciar un nuevo repositorio Git en un proyecto es 'git init'."
      },
      {
        "id": 124,
        "category": "Git",
        "level": "Junior",
        "question": "¿Cómo se realiza un commit en Git y por qué es importante?",
        "answer": "Para realizar un commit en Git, se utiliza el comando 'git commit'. Un commit es importante porque registra un conjunto de cambios en el repositorio, lo que permite realizar un seguimiento de la historia del proyecto y facilita la colaboración en equipo."
      },
      {
        "id": 125,
        "category": "Git",
        "level": "Junior",
        "question": "¿Qué es un conflicto de merge en Git y cómo se resuelve?",
        "answer": "Un conflicto de merge en Git ocurre cuando dos ramas diferentes contienen cambios conflictivos en la misma parte del código. Para resolverlo, se debe realizar una revisión manual del conflicto, editar el código para resolver las diferencias y luego realizar un nuevo commit para completar el merge."
      },
      {
        "id": 126,
        "category": "Git",
        "level": "Junior",
        "question": "¿Cuál es el comando para clonar un repositorio Git existente?",
        "answer": "El comando para clonar un repositorio Git existente es 'git clone <URL_del_repositorio>'. Esto crea una copia local del repositorio remoto en tu máquina."
      },
      {
        "id": 127,
        "category": "Git",
        "level": "Junior",
        "question": "¿Qué es un commit en Git y por qué es importante?",
        "answer": "Un commit en Git es una instantánea de los cambios en el código. Es importante porque permite realizar un seguimiento del historial de cambios, volver a versiones anteriores y colaborar de manera efectiva en proyectos."
      },
      {
        "id": 128,
        "category": "Git",
        "level": "Junior",
        "question": "¿Cuál es el propósito del archivo '.gitignore' en un repositorio Git?",
        "answer": "El archivo '.gitignore' se utiliza para especificar archivos y directorios que Git debe ignorar y no rastrear en el control de versiones. Esto es útil para evitar que archivos irrelevantes o sensibles se incluyan en el repositorio."
      },   
      {
        "id": 129,
        "category": "Git",
        "level": "Middle",
        "question": "Explica la diferencia entre 'git pull' y 'git fetch'.",
        "answer": "'Git pull' descarga los cambios remotos y fusiona automáticamente en la rama actual. 'Git fetch' descarga los cambios remotos pero no realiza la fusión, por lo que debes fusionarlos manualmente si es necesario."
      },
      {
        "id": 130,
        "category": "Git",
        "level": "Middle",
        "question": "¿Qué es una rama (branch) en Git y cuál es su propósito?",
        "answer": "Una rama en Git es una línea de desarrollo independiente que permite trabajar en nuevas características o correcciones sin afectar la rama principal. Se utilizan para mantener un historial de cambios organizado y facilitar la colaboración."
      },
      {
        "id": 131,
        "category": "Git",
        "level": "Middle",
        "question": "¿Cómo se fusiona una rama en Git y cuál es el comando utilizado?",
        "answer": "Para fusionar una rama en Git, se utiliza el comando 'git merge <nombre_de_la_rama>' mientras se encuentra en la rama en la que deseas fusionar los cambios."
      },
      {
        "id": 132,
        "category": "Git",
        "level": "Middle",
        "question": "¿Qué es un conflicto de resolución de merge y cómo se soluciona?",
        "answer": "Un conflicto de resolución de merge ocurre cuando hay conflictos en los cambios entre las ramas fusionadas. Se soluciona manualmente editando los archivos en conflicto, marcándolos como resueltos, y luego realizando un commit para finalizar la fusión."
      },
      {
        "id": 133,
        "category": "Git",
        "level": "Junior",
        "question": "¿Cuál es el comando para clonar un repositorio Git existente?",
        "answer": "El comando para clonar un repositorio Git existente es 'git clone <URL_del_repositorio>'. Esto crea una copia local del repositorio remoto en tu máquina."
      },      
      {
        "id": 134,
        "category": "Git",
        "level": "Middle",
        "question": "¿Qué es un repositorio remoto en Git?",
        "answer": "Un repositorio remoto en Git es una versión de tu proyecto alojada en un servidor o en la nube. Permite colaborar con otros desarrolladores y sincronizar los cambios entre diferentes copias del repositorio."
      },  
      {
        "id": 135,
        "category": "Git",
        "level": "Middle",
        "question": "¿Qué es un conflicto de fusión (merge conflict) en Git y cómo se resuelve?",
        "answer": "Un conflicto de fusión ocurre cuando dos ramas tienen cambios en las mismas líneas de código. Para resolverlo, debes abrir el archivo en conflicto, editar manualmente las secciones en conflicto para que queden como desees y luego hacer un commit para finalizar la fusión."
      },
      {
        "id": 136,
        "category": "Git",
        "level": "Middle",
        "question": "Explica el flujo de trabajo típico de Git para colaborar en un proyecto con otros desarrolladores.",
        "answer": "El flujo de trabajo típico de Git involucra clonar un repositorio, crear una rama para tu trabajo, realizar cambios y commits en esa rama, luego fusionar la rama de vuelta a la rama principal (como 'master' o 'main') y finalmente hacer 'push' de tus cambios al repositorio remoto para que otros desarrolladores puedan acceder a ellos."
      },      
      {
        "id": 137,
        "category": "Git",
        "level": "Senior",
        "question": "¿Qué es Git rebase y cuál es su propósito?",
        "answer": "'Git rebase' es una operación que permite cambiar la base de una rama. Su propósito es mantener un historial de cambios más limpio y lineal al aplicar los cambios de una rama sobre otra."
      },
      {
        "id": 138,
        "category": "Git",
        "level": "Senior",
        "question": "¿Qué es un submódulo Git?",
        "answer": "Un submódulo Git es un repositorio Git dentro de otro repositorio Git. Permite incluir un proyecto dentro de otro como una dependencia, lo que facilita la gestión de proyectos grandes y la colaboración en equipos."
      },
      {
        "id": 139,
        "category": "Git",
        "level": "Senior",
        "question": "¿Qué es 'git stash' y cuándo se utiliza?",
        "answer": "'Git stash' se utiliza para guardar temporalmente cambios no comprometidos en una rama en un estado de almacenamiento temporal. Esto es útil cuando deseas cambiar de rama sin realizar un commit de los cambios actuales."
      },
      {
        "id": 140,
        "category": "Git",
        "level": "Senior",
        "question": "¿Qué es Git bisect y cómo se utiliza para depurar problemas en el código?",
        "answer": "'Git bisect' es una herramienta que ayuda a encontrar el commit que introdujo un problema en el código. Se utiliza ejecutando 'git bisect start', marcando un commit bueno y malo, y Git automáticamente selecciona un commit intermedio para revisar. Continúas marcando bueno o malo hasta encontrar el commit problemático."
      }      
  ]
}
